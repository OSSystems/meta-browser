Upstream-Status: Backport

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From fe078e1dd51cedbc2c5b421c8205ac6b4869b2d7 Mon Sep 17 00:00:00 2001
From: Maksim Sisov <msisov@igalia.com>
Date: Tue, 14 Sep 2021 17:35:08 +0000
Subject: [PATCH] ozone/wayland: do not create surface sync if buffers not
 attached.

wl_surface.commit may be called for different reasons apart from
attaching buffers. And it's not necessary to create a surface sync.

Also, if Wayland EGL is used instead of our buffer management
(dmabuf is not available), it may also want to create a surface sync,
which will result in a Wayland protocol error as WaylandSurface has
already created one.

Bug: none
Change-Id: Ie75c55ecec11764cc59ff8e7052afcf28edafdb9
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3160336
Auto-Submit: Maksim Sisov <msisov@igalia.com>
Commit-Queue: Kramer Ge <fangzhoug@chromium.org>
Reviewed-by: Kramer Ge <fangzhoug@chromium.org>
Cr-Commit-Position: refs/heads/main@{#921294}
---
 .../platform/wayland/host/wayland_surface.cc  | 42 +++++++++++--------
 .../platform/wayland/host/wayland_surface.h   |  2 +
 .../wayland/host/wayland_window_unittest.cc   |  9 ++++
 3 files changed, 36 insertions(+), 17 deletions(-)

diff --git a/ui/ozone/platform/wayland/host/wayland_surface.cc b/ui/ozone/platform/wayland/host/wayland_surface.cc
index 89668e1c1d664..babbfbb7f7b63 100644
--- a/ui/ozone/platform/wayland/host/wayland_surface.cc
+++ b/ui/ozone/platform/wayland/host/wayland_surface.cc
@@ -178,23 +178,31 @@ void WaylandSurface::UpdateBufferDamageRegion(
 }
 
 void WaylandSurface::Commit() {
-  auto* surface_sync = GetSurfaceSync();
-  if (surface_sync && buffer_attached_since_last_commit_) {
-    auto* linux_buffer_release =
-        zwp_linux_surface_synchronization_v1_get_release(surface_sync);
-
-    static struct zwp_linux_buffer_release_v1_listener release_listener = {
-        &WaylandSurface::FencedRelease,
-        &WaylandSurface::ImmediateRelease,
-    };
-    zwp_linux_buffer_release_v1_add_listener(linux_buffer_release,
-                                             &release_listener, this);
-
-    linux_buffer_releases_.emplace(
-        linux_buffer_release,
-        ExplicitReleaseInfo(
-            wl::Object<zwp_linux_buffer_release_v1>(linux_buffer_release),
-            buffer_attached_since_last_commit_));
+  if (buffer_attached_since_last_commit_) {
+    // Do not call GetSurfaceSync() if the buffer management doesn't happen with
+    // WaylandBufferManagerHost. That is, if Wayland EGL implementation is used,
+    // buffers are attached/swapped via eglSwapBuffers, which may internally
+    // (depends on the implementation) also create a surface sync. Creating a
+    // surface sync in this case is not necessary. Moreover, a Wayland protocol
+    // error will be raised as only one surface sync can exist.
+    auto* surface_sync = GetSurfaceSync();
+    if (surface_sync) {
+      auto* linux_buffer_release =
+          zwp_linux_surface_synchronization_v1_get_release(surface_sync);
+
+      static struct zwp_linux_buffer_release_v1_listener release_listener = {
+          &WaylandSurface::FencedRelease,
+          &WaylandSurface::ImmediateRelease,
+      };
+      zwp_linux_buffer_release_v1_add_listener(linux_buffer_release,
+                                               &release_listener, this);
+
+      linux_buffer_releases_.emplace(
+          linux_buffer_release,
+          ExplicitReleaseInfo(
+              wl::Object<zwp_linux_buffer_release_v1>(linux_buffer_release),
+              buffer_attached_since_last_commit_));
+    }
   }
   wl_surface_commit(surface_.get());
   buffer_attached_since_last_commit_ = nullptr;
diff --git a/ui/ozone/platform/wayland/host/wayland_surface.h b/ui/ozone/platform/wayland/host/wayland_surface.h
index b6aad67b46b01..dc3453f7c6cb3 100644
--- a/ui/ozone/platform/wayland/host/wayland_surface.h
+++ b/ui/ozone/platform/wayland/host/wayland_surface.h
@@ -128,6 +128,8 @@ class WaylandSurface {
   void RemoveEnteredOutput(uint32_t id);
 
  private:
+  FRIEND_TEST_ALL_PREFIXES(WaylandWindowTest,
+                           DoesNotCreateSurfaceSyncOnCommitWithoutBuffers);
   // Holds information about each explicit synchronization buffer release.
   struct ExplicitReleaseInfo {
     ExplicitReleaseInfo(
diff --git a/ui/ozone/platform/wayland/host/wayland_window_unittest.cc b/ui/ozone/platform/wayland/host/wayland_window_unittest.cc
index 9d0740967f90b..de042ad510498 100644
--- a/ui/ozone/platform/wayland/host/wayland_window_unittest.cc
+++ b/ui/ozone/platform/wayland/host/wayland_window_unittest.cc
@@ -2997,6 +2997,15 @@ TEST_P(WaylandWindowTest, RepositionPopups) {
   VerifyAndClearExpectations();
 }
 
+// If buffers are not attached (aka WaylandBufferManagerHost is not used for
+// buffer management), WaylandSurface::Commit mustn't result in creation of
+// surface sync.
+TEST_P(WaylandWindowTest, DoesNotCreateSurfaceSyncOnCommitWithoutBuffers) {
+  EXPECT_THAT(window_->root_surface()->surface_sync_, nullptr);
+  window_->root_surface()->Commit();
+  EXPECT_THAT(window_->root_surface()->surface_sync_, nullptr);
+}
+
 INSTANTIATE_TEST_SUITE_P(XdgVersionStableTest,
                          WaylandWindowTest,
                          Values(wl::ServerConfig{
-- 
2.25.1

