Upstream-Status: Backport

Fixes "interface 'wl_output' has no event 4" error.

Signed-off-by: Markus Volk f_l_k@t-online.de

author	Alexander Dunaev <adunaev@igalia.com>	Tue Dec 14 09:54:52 2021
committer	Chromium LUCI CQ <chromium-scoped@luci-project-accounts.iam.gserviceaccount.com>	Tue Dec 14 09:54:52 2021
tree	20c9ca1d8d2caf14be6eccf113550b929e2530e5
parent	d5684ab99411bd973c4c5fcb400070c4094dd57d [diff]

[linux/wayland] Fixed terminate caused by binding to wrong version.

The Ozone/Wayland implementation had a few places where the Wayland
objects were bound without proper checking for their versions.  That was
part of the technical debt not addressed before, and ended up causing
the issue explained in the linked crbug: the compositor terminates the
client that binds to the protocol that it does not actually support.

This patch fixes the issue by adding the necessary checks in all places
where they were missing.  Also a convenience macro for validating the
version is proposed.

Bug: 1279574
Change-Id: I74efa97f64b480bed47372d8d559593ae84eeb18
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3337037
Reviewed-by: Maksim Sisov <msisov@igalia.com>
Commit-Queue: Alexander Dunaev <adunaev@igalia.com>
Cr-Commit-Position: refs/heads/main@{#951428}

 .../platform/wayland/common/wayland_object.cc | 21 +++++++++++++++++++
 .../platform/wayland/common/wayland_object.h  | 11 ++++++++++
 .../gtk_primary_selection_device_manager.cc   | 11 +++++-----
 ui/ozone/platform/wayland/host/gtk_shell1.cc  | 12 ++++++-----
 .../host/wayland_data_device_manager.cc       |  9 +++++---
 ui/ozone/platform/wayland/host/wayland_drm.cc |  6 ++++--
 .../platform/wayland/host/wayland_output.cc   | 10 ++++-----
 ui/ozone/platform/wayland/host/wayland_shm.cc |  9 ++++----
 .../wayland/host/wayland_zaura_shell.cc       |  9 +++++---
 .../wayland/host/wayland_zcr_cursor_shapes.cc | 10 +++++----
 .../wayland/host/wayland_zwp_linux_dmabuf.cc  |  9 +++++---
 .../host/wayland_zwp_pointer_constraints.cc   |  6 +++---
 .../host/wayland_zwp_pointer_gestures.cc      |  7 ++++---
 .../wayland_zwp_relative_pointer_manager.cc   |  8 ++++---
 .../wayland/host/xdg_foreign_wrapper.cc       | 14 ++++++++-----
 .../wayland/host/zwp_idle_inhibit_manager.cc  | 10 +++++----
 .../zwp_primary_selection_device_manager.cc   |  9 ++++----
 17 files changed, 114 insertions(+), 57 deletions(-)

diff --git a/ui/ozone/platform/wayland/common/wayland_object.cc b/ui/ozone/platform/wayland/common/wayland_object.cc
index 0374cb9d874ba..8faa648120de3 100644
--- a/ui/ozone/platform/wayland/common/wayland_object.cc
+++ b/ui/ozone/platform/wayland/common/wayland_object.cc
@@ -35,6 +35,8 @@
 #include <xdg-shell-client-protocol.h>
 #include <xdg-shell-unstable-v6-client-protocol.h>
 
+#include "base/logging.h"
+
 namespace wl {
 namespace {
 
@@ -77,6 +79,25 @@ void delete_touch(wl_touch* touch) {
 
 }  // namespace
 
+bool CanBind(const std::string& interface,
+             uint32_t available_version,
+             uint32_t min_version,
+             uint32_t max_version) {
+  if (available_version < min_version) {
+    LOG(WARNING) << "Unable to bind to " << interface << " version "
+                 << available_version << ".  The minimum supported version is "
+                 << min_version << ".";
+    return false;
+  }
+
+  if (available_version > max_version) {
+    LOG(WARNING) << "Binding to " << interface << " version " << max_version
+                 << " but version " << available_version << " is available.";
+  }
+
+  return true;
+}
+
 void (*ObjectTraits<wl_cursor_theme>::deleter)(wl_cursor_theme*) =
     &wl_cursor_theme_destroy;
 
diff --git a/ui/ozone/platform/wayland/common/wayland_object.h b/ui/ozone/platform/wayland/common/wayland_object.h
index 3a8bb9e494d5e..ce787bf8805ef 100644
--- a/ui/ozone/platform/wayland/common/wayland_object.h
+++ b/ui/ozone/platform/wayland/common/wayland_object.h
@@ -79,6 +79,17 @@ struct ObjectTraits<wl_proxy> {
   static void (*deleter)(void*);
 };
 
+// Checks the given |available_version| exposed by the server against
+// |min_version| and |max_version| supported by the client.
+// Returns false (with rendering a warning) if |available_version| is less than
+// the minimum supported version.
+// Returns true otherwise, renders an info message if |available_version| is
+// greater than the maximum supported one.
+bool CanBind(const std::string& interface,
+             uint32_t available_version,
+             uint32_t min_version,
+             uint32_t max_version);
+
 }  // namespace wl
 
 // Puts the forward declaration for struct TYPE and declares the template
diff --git a/ui/ozone/platform/wayland/host/gtk_primary_selection_device_manager.cc b/ui/ozone/platform/wayland/host/gtk_primary_selection_device_manager.cc
index af3087d1891ff..2991233fe6ec4 100644
--- a/ui/ozone/platform/wayland/host/gtk_primary_selection_device_manager.cc
+++ b/ui/ozone/platform/wayland/host/gtk_primary_selection_device_manager.cc
@@ -16,7 +16,7 @@
 namespace ui {
 
 namespace {
-constexpr uint32_t kMaxGtkPrimarySelectionDeviceManagerVersion = 1;
+constexpr uint32_t kMinVersion = 1;
 }
 
 // static
@@ -31,12 +31,13 @@ void GtkPrimarySelectionDeviceManager::Instantiate(
     uint32_t version) {
   DCHECK_EQ(interface, kInterfaceName);
 
-  if (connection->gtk_primary_selection_device_manager())
+  if (connection->gtk_primary_selection_device_manager() ||
+      !wl::CanBind(interface, version, kMinVersion, kMinVersion)) {
     return;
+  }
 
-  auto manager = wl::Bind<gtk_primary_selection_device_manager>(
-      registry, name,
-      std::min(version, kMaxGtkPrimarySelectionDeviceManagerVersion));
+  auto manager = wl::Bind<gtk_primary_selection_device_manager>(registry, name,
+                                                                kMinVersion);
   if (!manager) {
     LOG(ERROR) << "Failed to bind gtk_primary_selection_device_manager";
     return;
diff --git a/ui/ozone/platform/wayland/host/gtk_shell1.cc b/ui/ozone/platform/wayland/host/gtk_shell1.cc
index cb3b0c8fa024e..26dfd7fbf3f40 100644
--- a/ui/ozone/platform/wayland/host/gtk_shell1.cc
+++ b/ui/ozone/platform/wayland/host/gtk_shell1.cc
@@ -17,8 +17,8 @@ namespace {
 // gtk_shell1 exposes request_focus() since version 3.  Below that, it is not
 // interesting for us, although it provides some shell integration that might be
 // useful.
-constexpr uint32_t kMinGtkShell1Version = 3;
-constexpr uint32_t kMaxGtkShell1Version = 4;
+constexpr uint32_t kMinVersion = 3;
+constexpr uint32_t kMaxVersion = 4;
 }  // namespace
 
 // static
@@ -32,11 +32,13 @@ void GtkShell1::Instantiate(WaylandConnection* connection,
                             uint32_t version) {
   DCHECK_EQ(interface, kInterfaceName);
 
-  if (connection->gtk_shell1_ || version < kMinGtkShell1Version)
+  if (connection->gtk_shell1_ ||
+      !wl::CanBind(interface, version, kMinVersion, kMaxVersion)) {
     return;
+  }
 
-  auto gtk_shell1 = wl::Bind<::gtk_shell1>(
-      registry, name, std::min(version, kMaxGtkShell1Version));
+  auto gtk_shell1 =
+      wl::Bind<::gtk_shell1>(registry, name, std::min(version, kMaxVersion));
   if (!gtk_shell1) {
     LOG(ERROR) << "Failed to bind gtk_shell1";
     return;
diff --git a/ui/ozone/platform/wayland/host/wayland_data_device_manager.cc b/ui/ozone/platform/wayland/host/wayland_data_device_manager.cc
index 408cb1c72f474..0f03942e6991a 100644
--- a/ui/ozone/platform/wayland/host/wayland_data_device_manager.cc
+++ b/ui/ozone/platform/wayland/host/wayland_data_device_manager.cc
@@ -14,7 +14,8 @@
 namespace ui {
 
 namespace {
-constexpr uint32_t kMaxDeviceManagerVersion = 3;
+constexpr uint32_t kMinVersion = 1;
+constexpr uint32_t kMaxVersion = 3;
 }
 
 // static
@@ -28,11 +29,13 @@ void WaylandDataDeviceManager::Instantiate(WaylandConnection* connection,
                                            uint32_t version) {
   DCHECK_EQ(interface, kInterfaceName);
 
-  if (connection->data_device_manager_)
+  if (connection->data_device_manager_ ||
+      !wl::CanBind(interface, version, kMinVersion, kMaxVersion)) {
     return;
+  }
 
   auto data_device_manager = wl::Bind<wl_data_device_manager>(
-      registry, name, std::min(version, kMaxDeviceManagerVersion));
+      registry, name, std::min(version, kMaxVersion));
   if (!data_device_manager) {
     LOG(ERROR) << "Failed to bind to wl_data_device_manager global";
     return;
diff --git a/ui/ozone/platform/wayland/host/wayland_drm.cc b/ui/ozone/platform/wayland/host/wayland_drm.cc
index d806e8e9f5de0..a7ed2e20ffe0a 100644
--- a/ui/ozone/platform/wayland/host/wayland_drm.cc
+++ b/ui/ozone/platform/wayland/host/wayland_drm.cc
@@ -17,7 +17,7 @@
 namespace ui {
 
 namespace {
-constexpr uint32_t kMinWlDrmVersion = 2;
+constexpr uint32_t kMinVersion = 2;
 }
 
 // static
@@ -31,8 +31,10 @@ void WaylandDrm::Instantiate(WaylandConnection* connection,
                              uint32_t version) {
   DCHECK_EQ(interface, kInterfaceName);
 
-  if (connection->drm_ || version < kMinWlDrmVersion)
+  if (connection->drm_ ||
+      !!wl::CanBind(interface, version, kMinVersion, kMinVersion)) {
     return;
+  }
 
   auto wl_drm = wl::Bind<struct wl_drm>(registry, name, version);
   if (!wl_drm) {
diff --git a/ui/ozone/platform/wayland/host/wayland_output.cc b/ui/ozone/platform/wayland/host/wayland_output.cc
index 585568f2e729d..2186d6a823cee 100644
--- a/ui/ozone/platform/wayland/host/wayland_output.cc
+++ b/ui/ozone/platform/wayland/host/wayland_output.cc
@@ -16,7 +16,8 @@
 namespace ui {
 
 namespace {
-constexpr uint32_t kMinWlOutputVersion = 2;
+// TODO(crbug.com/1279681): support newer versions.
+constexpr uint32_t kMinVersion = 2;
 }
 
 // static
@@ -30,14 +31,11 @@ void WaylandOutput::Instantiate(WaylandConnection* connection,
                                 uint32_t version) {
   DCHECK_EQ(interface, kInterfaceName);
 
-  if (version < kMinWlOutputVersion) {
-    LOG(ERROR)
-        << "Unable to bind to the unsupported wl_output object with version= "
-        << version << ". Minimum supported version is " << kMinWlOutputVersion;
+  if (!wl::CanBind(interface, version, kMinVersion, kMinVersion)) {
     return;
   }
 
-  auto output = wl::Bind<wl_output>(registry, name, version);
+  auto output = wl::Bind<wl_output>(registry, name, kMinVersion);
   if (!output) {
     LOG(ERROR) << "Failed to bind to wl_output global";
     return;
diff --git a/ui/ozone/platform/wayland/host/wayland_shm.cc b/ui/ozone/platform/wayland/host/wayland_shm.cc
index 7c6cd40569d74..de97ad1c2b22a 100644
--- a/ui/ozone/platform/wayland/host/wayland_shm.cc
+++ b/ui/ozone/platform/wayland/host/wayland_shm.cc
@@ -10,7 +10,7 @@
 namespace ui {
 
 namespace {
-constexpr uint32_t kMaxShmVersion = 1;
+constexpr uint32_t kMinVersion = 1;
 constexpr uint32_t kShmFormat = WL_SHM_FORMAT_ARGB8888;
 }  // namespace
 
@@ -25,11 +25,12 @@ void WaylandShm::Instantiate(WaylandConnection* connection,
                              uint32_t version) {
   DCHECK_EQ(interface, kInterfaceName);
 
-  if (connection->shm_)
+  if (connection->shm_ ||
+      !wl::CanBind(interface, version, kMinVersion, kMinVersion)) {
     return;
+  }
 
-  auto shm =
-      wl::Bind<wl_shm>(registry, name, std::min(version, kMaxShmVersion));
+  auto shm = wl::Bind<wl_shm>(registry, name, kMinVersion);
   if (!shm) {
     LOG(ERROR) << "Failed to bind to wl_shm global";
     return;
diff --git a/ui/ozone/platform/wayland/host/wayland_zaura_shell.cc b/ui/ozone/platform/wayland/host/wayland_zaura_shell.cc
index b1ae436db08c2..1b5585f7c18de 100644
--- a/ui/ozone/platform/wayland/host/wayland_zaura_shell.cc
+++ b/ui/ozone/platform/wayland/host/wayland_zaura_shell.cc
@@ -19,7 +19,8 @@
 namespace ui {
 
 namespace {
-constexpr uint32_t kMaxAuraShellVersion = 28;
+constexpr uint32_t kMinVersion = 1;
+constexpr uint32_t kMaxVersion = 28;
 }
 
 // static
@@ -33,11 +34,13 @@ void WaylandZAuraShell::Instantiate(WaylandConnection* connection,
                                     uint32_t version) {
   DCHECK_EQ(interface, kInterfaceName);
 
-  if (connection->zaura_shell_)
+  if (connection->zaura_shell_ ||
+      !wl::CanBind(interface, version, kMinVersion, kMaxVersion)) {
     return;
+  }
 
   auto zaura_shell = wl::Bind<struct zaura_shell>(
-      registry, name, std::min(version, kMaxAuraShellVersion));
+      registry, name, std::min(version, kMaxVersion));
   if (!zaura_shell) {
     LOG(ERROR) << "Failed to bind zaura_shell";
     return;
diff --git a/ui/ozone/platform/wayland/host/wayland_zcr_cursor_shapes.cc b/ui/ozone/platform/wayland/host/wayland_zcr_cursor_shapes.cc
index 094a2f98686c6..84d847eea16ae 100644
--- a/ui/ozone/platform/wayland/host/wayland_zcr_cursor_shapes.cc
+++ b/ui/ozone/platform/wayland/host/wayland_zcr_cursor_shapes.cc
@@ -16,7 +16,7 @@
 namespace ui {
 
 namespace {
-constexpr uint32_t kMaxCursorShapesVersion = 1;
+constexpr uint32_t kMinVersion = 1;
 }
 
 using mojom::CursorType;
@@ -32,11 +32,13 @@ void WaylandZcrCursorShapes::Instantiate(WaylandConnection* connection,
                                          uint32_t version) {
   DCHECK_EQ(interface, kInterfaceName);
 
-  if (connection->zcr_cursor_shapes_)
+  if (connection->zcr_cursor_shapes_ ||
+      !wl::CanBind(interface, version, kMinVersion, kMinVersion)) {
     return;
+  }
 
-  auto zcr_cursor_shapes = wl::Bind<zcr_cursor_shapes_v1>(
-      registry, name, std::min(version, kMaxCursorShapesVersion));
+  auto zcr_cursor_shapes =
+      wl::Bind<zcr_cursor_shapes_v1>(registry, name, kMinVersion);
   if (!zcr_cursor_shapes) {
     LOG(ERROR) << "Failed to bind zcr_cursor_shapes_v1";
     return;
diff --git a/ui/ozone/platform/wayland/host/wayland_zwp_linux_dmabuf.cc b/ui/ozone/platform/wayland/host/wayland_zwp_linux_dmabuf.cc
index 7035dc4ed26ff..cee793b9ae808 100644
--- a/ui/ozone/platform/wayland/host/wayland_zwp_linux_dmabuf.cc
+++ b/ui/ozone/platform/wayland/host/wayland_zwp_linux_dmabuf.cc
@@ -14,7 +14,8 @@
 namespace ui {
 
 namespace {
-constexpr uint32_t kMaxLinuxDmabufVersion = 3;
+constexpr uint32_t kMinVersion = 1;
+constexpr uint32_t kMaxVersion = 3;
 }
 
 // static
@@ -28,11 +29,13 @@ void WaylandZwpLinuxDmabuf::Instantiate(WaylandConnection* connection,
                                         uint32_t version) {
   DCHECK_EQ(interface, kInterfaceName);
 
-  if (connection->zwp_dmabuf())
+  if (connection->zwp_dmabuf() ||
+      !wl::CanBind(interface, version, kMinVersion, kMaxVersion)) {
     return;
+  }
 
   auto zwp_linux_dmabuf = wl::Bind<zwp_linux_dmabuf_v1>(
-      registry, name, std::min(version, kMaxLinuxDmabufVersion));
+      registry, name, std::min(version, kMaxVersion));
   if (!zwp_linux_dmabuf) {
     LOG(ERROR) << "Failed to bind zwp_linux_dmabuf_v1";
     return;
diff --git a/ui/ozone/platform/wayland/host/wayland_zwp_pointer_constraints.cc b/ui/ozone/platform/wayland/host/wayland_zwp_pointer_constraints.cc
index 24e4dacc7eeb6..c1aca770ff5be 100644
--- a/ui/ozone/platform/wayland/host/wayland_zwp_pointer_constraints.cc
+++ b/ui/ozone/platform/wayland/host/wayland_zwp_pointer_constraints.cc
@@ -15,7 +15,7 @@
 namespace ui {
 
 namespace {
-constexpr uint32_t kMinZwpPointerConstraintsVersion = 1;
+constexpr uint32_t kMinVersion = 1;
 }
 
 // static
@@ -30,12 +30,12 @@ void WaylandZwpPointerConstraints::Instantiate(WaylandConnection* connection,
   DCHECK_EQ(interface, kInterfaceName);
 
   if (connection->wayland_zwp_pointer_constraints_ ||
-      version < kMinZwpPointerConstraintsVersion) {
+      !wl::CanBind(interface, version, kMinVersion, kMinVersion)) {
     return;
   }
 
   auto zwp_pointer_constraints_v1 =
-      wl::Bind<struct zwp_pointer_constraints_v1>(registry, name, version);
+      wl::Bind<struct zwp_pointer_constraints_v1>(registry, name, kMinVersion);
   if (!zwp_pointer_constraints_v1) {
     LOG(ERROR) << "Failed to bind wp_pointer_constraints_v1";
     return;
diff --git a/ui/ozone/platform/wayland/host/wayland_zwp_pointer_gestures.cc b/ui/ozone/platform/wayland/host/wayland_zwp_pointer_gestures.cc
index 5d96c8923fda1..31bffb726c6ea 100644
--- a/ui/ozone/platform/wayland/host/wayland_zwp_pointer_gestures.cc
+++ b/ui/ozone/platform/wayland/host/wayland_zwp_pointer_gestures.cc
@@ -19,7 +19,7 @@
 namespace ui {
 
 namespace {
-constexpr uint32_t kMinZwpPointerGesturesVersion = 1;
+constexpr uint32_t kMinVersion = 1;
 }
 
 // static
@@ -34,11 +34,12 @@ void WaylandZwpPointerGestures::Instantiate(WaylandConnection* connection,
   DCHECK_EQ(interface, kInterfaceName);
 
   if (connection->wayland_zwp_pointer_gestures_ ||
-      version < kMinZwpPointerGesturesVersion)
+      !wl::CanBind(interface, version, kMinVersion, kMinVersion)) {
     return;
+  }
 
   auto zwp_pointer_gestures_v1 =
-      wl::Bind<struct zwp_pointer_gestures_v1>(registry, name, version);
+      wl::Bind<struct zwp_pointer_gestures_v1>(registry, name, kMinVersion);
   if (!zwp_pointer_gestures_v1) {
     LOG(ERROR) << "Failed to bind wp_pointer_gestures_v1";
     return;
diff --git a/ui/ozone/platform/wayland/host/wayland_zwp_relative_pointer_manager.cc b/ui/ozone/platform/wayland/host/wayland_zwp_relative_pointer_manager.cc
index 3a8ef4c7f9612..c84a891dfe733 100644
--- a/ui/ozone/platform/wayland/host/wayland_zwp_relative_pointer_manager.cc
+++ b/ui/ozone/platform/wayland/host/wayland_zwp_relative_pointer_manager.cc
@@ -14,7 +14,7 @@
 namespace ui {
 
 namespace {
-constexpr uint32_t kMinZwpRelativePointerManagerVersion = 1;
+constexpr uint32_t kMinVersion = 1;
 }
 
 // static
@@ -30,11 +30,13 @@ void WaylandZwpRelativePointerManager::Instantiate(
   DCHECK_EQ(interface, kInterfaceName);
 
   if (connection->wayland_zwp_relative_pointer_manager_ ||
-      version < kMinZwpRelativePointerManagerVersion)
+      !wl::CanBind(interface, version, kMinVersion, kMinVersion)) {
     return;
+  }
 
   auto zwp_relative_pointer_manager_v1 =
-      wl::Bind<struct zwp_relative_pointer_manager_v1>(registry, name, version);
+      wl::Bind<struct zwp_relative_pointer_manager_v1>(registry, name,
+                                                       kMinVersion);
   if (!zwp_relative_pointer_manager_v1) {
     LOG(ERROR) << "Failed to bind zwp_relative_pointer_manager_v1";
     return;
diff --git a/ui/ozone/platform/wayland/host/xdg_foreign_wrapper.cc b/ui/ozone/platform/wayland/host/xdg_foreign_wrapper.cc
index a34b684d12883..2586adf9b857c 100644
--- a/ui/ozone/platform/wayland/host/xdg_foreign_wrapper.cc
+++ b/ui/ozone/platform/wayland/host/xdg_foreign_wrapper.cc
@@ -19,6 +19,8 @@ constexpr char XdgForeignWrapper::kInterfaceNameV1[];
 // static
 constexpr char XdgForeignWrapper::kInterfaceNameV2[];
 
+constexpr uint32_t kMinVersion = 1;
+
 using OnHandleExported = XdgForeignWrapper::OnHandleExported;
 
 namespace {
@@ -185,15 +187,17 @@ void XdgForeignWrapper::Instantiate(WaylandConnection* connection,
                                     uint32_t name,
                                     const std::string& interface,
                                     uint32_t version) {
-  if (connection->xdg_foreign_)
+  if (connection->xdg_foreign_ ||
+      !wl::CanBind(interface, version, kMinVersion, kMinVersion)) {
     return;
+  }
 
   if (interface == kInterfaceNameV1) {
-    connection->xdg_foreign_ =
-        CreateWrapper<zxdg_exporter_v1>(connection, registry, name, version);
+    connection->xdg_foreign_ = CreateWrapper<zxdg_exporter_v1>(
+        connection, registry, name, kMinVersion);
   } else if (interface == kInterfaceNameV2) {
-    connection->xdg_foreign_ =
-        CreateWrapper<zxdg_exporter_v2>(connection, registry, name, version);
+    connection->xdg_foreign_ = CreateWrapper<zxdg_exporter_v2>(
+        connection, registry, name, kMinVersion);
   } else {
     NOTREACHED() << " unexpected interface name: " << interface;
   }
diff --git a/ui/ozone/platform/wayland/host/zwp_idle_inhibit_manager.cc b/ui/ozone/platform/wayland/host/zwp_idle_inhibit_manager.cc
index 47121293acb7a..fc05de68778b9 100644
--- a/ui/ozone/platform/wayland/host/zwp_idle_inhibit_manager.cc
+++ b/ui/ozone/platform/wayland/host/zwp_idle_inhibit_manager.cc
@@ -12,7 +12,7 @@
 namespace ui {
 
 namespace {
-constexpr uint32_t kMaxZwpIdleInhibitManagerVersion = 1;
+constexpr uint32_t kMinVersion = 1;
 }
 
 // static
@@ -26,11 +26,13 @@ void ZwpIdleInhibitManager::Instantiate(WaylandConnection* connection,
                                         uint32_t version) {
   DCHECK_EQ(interface, kInterfaceName);
 
-  if (connection->zwp_idle_inhibit_manager_)
+  if (connection->zwp_idle_inhibit_manager_ ||
+      !wl::CanBind(interface, version, kMinVersion, kMinVersion)) {
     return;
+  }
 
-  auto manager = wl::Bind<zwp_idle_inhibit_manager_v1>(
-      registry, name, std::min(version, kMaxZwpIdleInhibitManagerVersion));
+  auto manager =
+      wl::Bind<zwp_idle_inhibit_manager_v1>(registry, name, kMinVersion);
   if (!manager) {
     LOG(ERROR) << "Failed to bind zwp_idle_inhibit_manager_v1";
     return;
diff --git a/ui/ozone/platform/wayland/host/zwp_primary_selection_device_manager.cc b/ui/ozone/platform/wayland/host/zwp_primary_selection_device_manager.cc
index f6f9fd23c35df..795a09c056576 100644
--- a/ui/ozone/platform/wayland/host/zwp_primary_selection_device_manager.cc
+++ b/ui/ozone/platform/wayland/host/zwp_primary_selection_device_manager.cc
@@ -16,7 +16,7 @@
 namespace ui {
 
 namespace {
-constexpr uint32_t kMaxGtkPrimarySelectionDeviceManagerVersion = 1;
+constexpr uint32_t kMinVersion = 1;
 }  // namespace
 
 // static
@@ -31,12 +31,13 @@ void ZwpPrimarySelectionDeviceManager::Instantiate(
     uint32_t version) {
   DCHECK_EQ(interface, kInterfaceName);
 
-  if (connection->zwp_primary_selection_device_manager_)
+  if (connection->zwp_primary_selection_device_manager_ ||
+      !wl::CanBind(interface, version, kMinVersion, kMinVersion)) {
     return;
+  }
 
   auto manager = wl::Bind<zwp_primary_selection_device_manager_v1>(
-      registry, name,
-      std::min(version, kMaxGtkPrimarySelectionDeviceManagerVersion));
+      registry, name, kMinVersion);
   if (!manager) {
     LOG(ERROR) << "Failed to bind zwp_primary_selection_device_manager_v1";
     return;
