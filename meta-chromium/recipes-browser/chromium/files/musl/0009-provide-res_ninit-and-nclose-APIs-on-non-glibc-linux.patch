From 5d5e89261bb49a5c882891a53fe4b735ef452e94 Mon Sep 17 00:00:00 2001
From: Khem Raj <raj.khem@gmail.com>
Date: Wed, 13 Feb 2019 09:51:14 -0800
Subject: [PATCH] provide res_ninit and nclose APIs on non-glibc linux
 platforms

These APIs are not implemented on musl

Upstream-Status: Pending
Signed-off-by: Khem Raj <raj.khem@gmail.com>
---
--- a/net/dns/dns_reloader.cc
+++ b/net/dns/dns_reloader.cc
@@ -4,8 +4,7 @@
 
 #include "net/dns/dns_reloader.h"
 
-#if defined(OS_POSIX) && !defined(OS_APPLE) && !defined(OS_OPENBSD) && \
-    !defined(OS_ANDROID) && !defined(OS_FUCHSIA)
+#if defined(__GLIBC__)
 
 #include <resolv.h>
 
--- a/net/dns/host_resolver_manager.cc
+++ b/net/dns/host_resolver_manager.cc
@@ -2536,8 +2536,7 @@ HostResolverManager::HostResolverManager
   NetworkChangeNotifier::AddConnectionTypeObserver(this);
   if (system_dns_config_notifier_)
     system_dns_config_notifier_->AddObserver(this);
-#if defined(OS_POSIX) && !defined(OS_APPLE) && !defined(OS_OPENBSD) && \
-    !defined(OS_ANDROID)
+#if defined(__GLIBC__)
   EnsureDnsReloaderInit();
 #endif
 
--- a/net/dns/host_resolver_proc.cc
+++ b/net/dns/host_resolver_proc.cc
@@ -176,8 +176,7 @@ int SystemHostResolverCall(const std::st
   base::ScopedBlockingCall scoped_blocking_call(FROM_HERE,
                                                 base::BlockingType::WILL_BLOCK);
 
-#if defined(OS_POSIX) && !defined(OS_APPLE) && !defined(OS_OPENBSD) && \
-    !defined(OS_ANDROID) && !defined(OS_FUCHSIA)
+#if defined(__GLIBC__)
   DnsReloaderMaybeReload();
 #endif
   absl::optional<AddressInfo> ai;
--- a/net/dns/dns_config_service_linux.cc
+++ b/net/dns/dns_config_service_linux.cc
@@ -486,20 +486,11 @@ class DnsConfigServiceLinux::ConfigReade
 
 std::unique_ptr<struct __res_state>
 DnsConfigServiceLinux::ResolvReader::GetResState() {
-  auto res = std::make_unique<struct __res_state>();
-  memset(res.get(), 0, sizeof(struct __res_state));
-
-  if (res_ninit(res.get()) != 0) {
-    CloseResState(res.get());
-    return nullptr;
-  }
-
-  return res;
+  return nullptr;
 }
 
 void DnsConfigServiceLinux::ResolvReader::CloseResState(
     struct __res_state* res) {
-  res_nclose(res);
 }
 
 DnsConfigServiceLinux::DnsConfigServiceLinux()
