From c39e22626372eef009bac036c3758dc34e7bcdc9 Mon Sep 17 00:00:00 2001
From: Max Ihlenfeldt <max@igalia.com>
Date: Mon, 21 Oct 2024 10:08:17 +0000
Subject: [PATCH] Revert "Allow (and use)
 std::hardware_destructive_interference_size."

libcxx only defines `std::hardware_{con,de}structive_interference_size`
if `__GCC_{CON,DE}STRUCTIVE_SIZE` are defined. clang only defines these
since version 19.1, see
https://github.com/llvm/llvm-project/commit/72c373bf.

As Scarthgap uses clang 18.1, we need to revert
https://crrev.com/c/5767325, which uses
`std::hardware_destructive_interference_size`.

Upstream-Status: Inappropriate [specific to older versions of clang]
Signed-off-by: Max Ihlenfeldt <max@igalia.com>
---
 .../providers/cast/channel/enum_table.h       |  4 +-
 styleguide/c++/c++-features.md                | 54 ++++++++++---------
 2 files changed, 31 insertions(+), 27 deletions(-)

diff --git a/components/media_router/common/providers/cast/channel/enum_table.h b/components/media_router/common/providers/cast/channel/enum_table.h
index 18fd272..20dc7d9 100644
--- a/components/media_router/common/providers/cast/channel/enum_table.h
+++ b/components/media_router/common/providers/cast/channel/enum_table.h
@@ -12,7 +12,6 @@

 #include <cstdint>
 #include <cstring>
-#include <new>
 #include <optional>
 #include <ostream>
 #include <string_view>
@@ -368,7 +367,8 @@ class EnumTable {

  private:
 #ifdef ARCH_CPU_64_BITS
-  alignas(std::hardware_destructive_interference_size)
+  // Align the data on a cache line boundary.
+  alignas(64)
 #endif
       std::initializer_list<Entry> data_;
   bool is_sorted_;
diff --git a/styleguide/c++/c++-features.md b/styleguide/c++/c++-features.md
index bb61898..f4cd91a 100644
--- a/styleguide/c++/c++-features.md
+++ b/styleguide/c++/c++-features.md
@@ -574,6 +574,35 @@ Overlaps with utilities in `base/strings/string_number_conversions.h`, which are
 easier to use correctly.
 ***

+### std::hardware_{con,de}structive_interference_size <sup>[banned]</sup>
+
+```c++
+struct SharedData {
+  ReadOnlyFrequentlyUsed data;
+  alignas(std::hardware_destructive_interference_size) std::atomic<size_t> counter;
+};
+```
+
+**Description:** The `std::hardware_destructive_interference_size` constant is
+useful to avoid false sharing (destructive interference) between variables that
+would otherwise occupy the same cacheline. In contrast,
+`std::hardware_constructive_interference_size` is helpful to promote true
+sharing (constructive interference), e.g. to support better locality for
+non-contended data.
+
+**Documentation:**
+[`std::hardware_destructive_interference_size`](https://en.cppreference.com/w/cpp/thread/hardware_destructive_interference_size),
+[`std::hardware_constructive_interference_size`](https://en.cppreference.com/w/cpp/thread/hardware_destructive_interference_size)
+
+**Notes:**
+*** promo
+Banned for now since these are
+[not supported yet](https://github.com/llvm/llvm-project/issues/60174). Allow
+once supported.
+
+[Discussion thread](https://groups.google.com/a/chromium.org/g/cxx/c/cwktrFxxUY4)
+***
+
 ### std::in_place{_type,_index}[_t] <sup>[banned]</sup>

 ```c++
@@ -1177,31 +1206,6 @@ avoiding the need to use the `erase(remove(...` paradigm.
 [Migration bug](https://crbug.com/1414639)
 ***

-### std::hardware_{con,de}structive_interference_size <sup>[allowed]</sup>
-
-```c++
-struct SharedData {
-  ReadOnlyFrequentlyUsed data;
-  alignas(std::hardware_destructive_interference_size) std::atomic<size_t> counter;
-};
-```
-
-**Description:** The `std::hardware_destructive_interference_size` constant is
-useful to avoid false sharing (destructive interference) between variables that
-would otherwise occupy the same cacheline. In contrast,
-`std::hardware_constructive_interference_size` is helpful to promote true
-sharing (constructive interference), e.g. to support better locality for
-non-contended data.
-
-**Documentation:**
-[`std::hardware_destructive_interference_size`](https://en.cppreference.com/w/cpp/thread/hardware_destructive_interference_size),
-[`std::hardware_constructive_interference_size`](https://en.cppreference.com/w/cpp/thread/hardware_destructive_interference_size)
-
-**Notes:**
-*** promo
-[Discussion thread](https://groups.google.com/a/chromium.org/g/cxx/c/cwktrFxxUY4)
-***
-
 ### std::is_[un]bounded_array <sup>[allowed]</sup>

 ```c++
