From d71a0fc5b00c20492fbfd15a561548c2e40ae2d4 Mon Sep 17 00:00:00 2001
From: Ariel D'Alessandro <ariel.dalessandro@collabora.com>
Date: Thu, 17 Jul 2025 13:11:35 -0300
Subject: [PATCH] Revert "Remove third_party/libavif"

This reverts commit 16708cb7341629a2793a6a06a370e2b846313e56.

In order to disable crabbyavif to fix build errors, re-enable libavif so
it can be used in replacement.

Upstream-Status: Inappropriate [upstream ticket https://crbug.com/357017325]
Signed-off-by: Ariel D'Alessandro <ariel.dalessandro@collabora.com>
---
 DEPS                                         |   7 +
 third_party/libavif/BUILD.gn                 | 172 +++++++++++++++++++
 third_party/libavif/DIR_METADATA             |   6 +
 third_party/libavif/OWNERS                   |   2 +
 third_party/libavif/README.chromium          |  13 ++
 third_party/libavif/avif_apps_shared_stubs.c |  50 ++++++
 third_party/libavif/src                      |   1 +
 7 files changed, 251 insertions(+)
 create mode 100644 third_party/libavif/BUILD.gn
 create mode 100644 third_party/libavif/DIR_METADATA
 create mode 100644 third_party/libavif/OWNERS
 create mode 100644 third_party/libavif/README.chromium
 create mode 100644 third_party/libavif/avif_apps_shared_stubs.c
 create mode 160000 third_party/libavif/src

diff --git a/DEPS b/DEPS
index f527d6b0d4b78..3b31fee5d5d3a 100644
--- a/DEPS
+++ b/DEPS
@@ -445,6 +445,10 @@ vars = {
   # and whatever else without interference from each other.
   'wuffs_revision': 'e3f919ccfe3ef542cfc983a82146070258fb57f8',
   # Three lines of non-changing comments so that
+  # the commit queue can handle CLs rolling libavif
+  # and whatever else without interference from each other.
+  'libavif_revision': 'e7b34a1f5e9f7024d08311c7bae156061b889882',
+  # Three lines of non-changing comments so that
   # the commit queue can handle CLs rolling crabbyavif
   # and whatever else without interference from each other.
   'crabbyavif_revision': '02d0fad2c512380b7270d6e704c86521075d7d54',
@@ -2268,6 +2272,9 @@ deps = {
   'src/third_party/libaom/source/libaom':
     Var('aomedia_git') + '/aom.git' + '@' +  '9680f2b1781fb33b9eeb52409b75c679c8a954be',

+  'src/third_party/libavif/src':
+    Var('chromium_git') + '/external/github.com/AOMediaCodec/libavif.git' + '@' + Var('libavif_revision'),
+
   'src/third_party/crabbyavif/src':
     Var('chromium_git') + '/external/github.com/webmproject/CrabbyAvif.git' + '@' + Var('crabbyavif_revision'),

diff --git a/third_party/libavif/BUILD.gn b/third_party/libavif/BUILD.gn
new file mode 100644
index 0000000000000..c2cc9e2d9fd87
--- /dev/null
+++ b/third_party/libavif/BUILD.gn
@@ -0,0 +1,172 @@
+# Copyright 2020 The Chromium Authors
+# Use of this source code is governed by a BSD-style license that can be
+# found in the LICENSE file.
+
+import("//media/media_options.gni")
+import("//testing/libfuzzer/fuzzer_test.gni")
+
+# Public configuration exported to users of the libavif target.
+config("avif_public_config") {
+  if (is_component_build) {
+    defines = [ "AVIF_DLL" ]
+  }
+}
+
+# Private configuration used in building libavif.
+config("avif_config") {
+  include_dirs = [ "src/include/" ]
+  defines = [ "AVIF_LIBYUV_ENABLED" ]
+  if (is_component_build) {
+    defines += [ "AVIF_BUILDING_SHARED_LIBS" ]
+  }
+
+  if (enable_dav1d_decoder) {
+    include_dirs += [ "../dav1d/libdav1d/include/" ]
+    defines += [ "AVIF_CODEC_DAV1D" ]
+  }
+}
+
+libavif_decoder_sources = [
+  "src/include/avif/internal.h",
+  "src/src/alpha.c",
+  "src/src/avif.c",
+  "src/src/colr.c",
+  "src/src/colrconvert.c",
+  "src/src/diag.c",
+  "src/src/exif.c",
+  "src/src/gainmap.c",
+  "src/src/io.c",
+  "src/src/mem.c",
+  "src/src/obu.c",
+  "src/src/properties.c",
+  "src/src/rawdata.c",
+  "src/src/read.c",
+  "src/src/reformat.c",
+  "src/src/reformat_libsharpyuv.c",
+  "src/src/reformat_libyuv.c",
+  "src/src/scale.c",
+  "src/src/stream.c",
+  "src/src/utils.c",
+]
+
+component("libavif") {
+  public = [ "src/include/avif/avif.h" ]
+  public_configs = [ ":avif_public_config" ]
+
+  sources = libavif_decoder_sources
+
+  configs += [ ":avif_config" ]
+
+  deps = [ "//third_party/libyuv" ]
+
+  if (enable_dav1d_decoder) {
+    sources += [ "src/src/codec_dav1d.c" ]
+    deps += [ "//third_party/dav1d" ]
+  }
+}
+
+# Note only the decoder fuzzers are enabled as only the decoder is being used
+# in Chrome. avif_fuzztest_read_image is not enabled due to libpng not having
+# PNG_READ_iTXt_SUPPORTED enabled.
+config("avif_fuzztest_config") {
+  include_dirs = [
+    "src/include",
+    "src/apps/shared",
+  ]
+}
+
+# This is used to satisfy dependencies in avif_fuzztest_helpers. The encoder
+# functions are not used.
+component("libavif_enc") {
+  public = [ "src/include/avif/avif.h" ]
+  public_configs = [ ":avif_public_config" ]
+
+  sources = libavif_decoder_sources + [
+              "src/src/write.c",
+            ]
+  testonly = true
+
+  configs += [ ":avif_config" ]
+
+  deps = [
+    "//third_party/libwebp:libwebp_sharpyuv",
+    "//third_party/libyuv",
+  ]
+  defines = [ "AVIF_LIBSHARPYUV_ENABLED" ]
+
+  if (enable_dav1d_decoder) {
+    sources += [ "src/src/codec_dav1d.c" ]
+    deps += [ "//third_party/dav1d" ]
+  }
+}
+
+source_set("avif_apps_shared") {
+  sources = [
+    "avif_apps_shared_stubs.c",
+    "src/apps/shared/avifexif.c",
+    "src/apps/shared/avifexif.h",
+    "src/apps/shared/avifjpeg.h",
+    "src/apps/shared/avifpng.h",
+    "src/apps/shared/avifutil.c",
+    "src/apps/shared/avifutil.h",
+    "src/apps/shared/y4m.c",
+    "src/apps/shared/y4m.h",
+  ]
+  testonly = true
+  configs += [ ":avif_fuzztest_config" ]
+  deps = [ ":libavif_enc" ]
+}
+
+source_set("avif_fuzztest_helpers") {
+  sources = [
+    "src/tests/gtest/avif_fuzztest_helpers.cc",
+    "src/tests/gtest/avifincrtest_helpers.cc",
+    "src/tests/gtest/aviftest_helpers.cc",
+  ]
+  testonly = true
+  configs += [ ":avif_fuzztest_config" ]
+  deps = [
+    ":avif_apps_shared",
+    ":libavif_enc",
+    "//testing/gtest",
+    "//third_party/fuzztest:fuzztest",
+  ]
+}
+
+# TODO: b/308013905 - These tests require seeds from
+# third_party/libavif/src/tests/data which
+# aren't available in the fuzzing environment. These targets can be enabled if
+# they are made hermetic.
+#
+# test("avif_fuzztest_dec") {
+#   sources = [ "src/tests/gtest/avif_fuzztest_dec.cc" ]
+#   fuzztests = [ "DecodeAvifTest.Decode" ]
+#   configs += [ ":avif_fuzztest_config" ]
+#   deps = [
+#     ":avif_fuzztest_helpers",
+#     ":libavif_enc",
+#     "//third_party/fuzztest:fuzztest_gtest_main",
+#   ]
+# }
+#
+# test("avif_fuzztest_dec_incr") {
+#   sources = [ "src/tests/gtest/avif_fuzztest_dec_incr.cc" ]
+#   fuzztests = [ "DecodeAvifFuzzTest.DecodeIncr" ]
+#   configs += [ ":avif_fuzztest_config" ]
+#   deps = [
+#     ":avif_fuzztest_helpers",
+#     ":libavif_enc",
+#     "//third_party/fuzztest:fuzztest_gtest_main",
+#   ]
+# }
+
+test("avif_fuzztest_yuvrgb") {
+  sources = [ "src/tests/gtest/avif_fuzztest_yuvrgb.cc" ]
+  fuzztests = [ "YuvRgbFuzzTest.Convert" ]
+  configs += [ ":avif_fuzztest_config" ]
+  deps = [
+    ":avif_fuzztest_helpers",
+    ":libavif_enc",
+    "//third_party/fuzztest:fuzztest_gtest_main",
+  ]
+}
diff --git a/third_party/libavif/DIR_METADATA b/third_party/libavif/DIR_METADATA
new file mode 100644
index 0000000000000..beadfa62dc3ad
--- /dev/null
+++ b/third_party/libavif/DIR_METADATA
@@ -0,0 +1,6 @@
+monorail: {
+  component: "Internals>Images>Codecs"
+}
+buganizer_public: {
+  component_id: 1456316
+}
diff --git a/third_party/libavif/OWNERS b/third_party/libavif/OWNERS
new file mode 100644
index 0000000000000..6946c0b7788b5
--- /dev/null
+++ b/third_party/libavif/OWNERS
@@ -0,0 +1,2 @@
+file://media/OWNERS
+wtc@google.com
diff --git a/third_party/libavif/README.chromium b/third_party/libavif/README.chromium
new file mode 100644
index 0000000000000..81904b69c35c5
--- /dev/null
+++ b/third_party/libavif/README.chromium
@@ -0,0 +1,13 @@
+Name: libavif - Library for encoding and decoding .avif files
+Short Name: libavif
+URL: https://github.com/AOMediaCodec/libavif
+Version: N/A
+Revision: DEPS
+License: BSD-2-Clause, MIT
+License File: src/LICENSE
+Security Critical: yes
+Shipped: yes
+
+Description:
+This contains the source to the AV1 image format demuxer; used for demuxing and
+decoding .avif files in Chromium.
diff --git a/third_party/libavif/avif_apps_shared_stubs.c b/third_party/libavif/avif_apps_shared_stubs.c
new file mode 100644
index 0000000000000..18980cbc5b0b5
--- /dev/null
+++ b/third_party/libavif/avif_apps_shared_stubs.c
@@ -0,0 +1,50 @@
+// Copyright 2024 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+// This file provides functions necessary to link the decoder fuzz tests. The
+// functions are not used by the tests being built, but their dependencies in
+// apps/shared and avif_*_helpers.cc unconditionally reference them.
+
+#include <stdio.h>
+
+#include "src/apps/shared/avifjpeg.h"
+#include "src/apps/shared/avifpng.h"
+
+avifBool avifJPEGRead(const char * inputFilename,
+                      avifImage * avif,
+                      avifPixelFormat requestedFormat,
+                      uint32_t requestedDepth,
+                      avifChromaDownsampling chromaDownsampling,
+                      avifBool ignoreColorProfile,
+                      avifBool ignoreExif,
+                      avifBool ignoreXMP,
+                      avifBool ignoreGainMap,
+                      uint32_t imageSizeLimit) {
+  fprintf(stderr, "The tests were built without JPEG support!\n");
+  return AVIF_FALSE;
+}
+
+avifBool avifPNGRead(const char * inputFilename,
+                     avifImage * avif,
+                     avifPixelFormat requestedFormat,
+                     uint32_t requestedDepth,
+                     avifChromaDownsampling chromaDownsampling,
+                     avifBool ignoreColorProfile,
+                     avifBool ignoreExif,
+                     avifBool ignoreXMP,
+                     avifBool allowChangingCicp,
+                     uint32_t imageSizeLimit,
+                     uint32_t * outPNGDepth) {
+  fprintf(stderr, "The tests were built without PNG support!\n");
+  return AVIF_FALSE;
+}
+
+avifBool avifPNGWrite(const char * outputFilename,
+                      const avifImage * avif,
+                      uint32_t requestedDepth,
+                      avifChromaUpsampling chromaUpsampling,
+                      int compressionLevel) {
+  fprintf(stderr, "The tests were built without PNG support!\n");
+  return AVIF_FALSE;
+}
diff --git a/third_party/libavif/src b/third_party/libavif/src
new file mode 160000
index 0000000000000..e7b34a1f5e9f7
--- /dev/null
+++ b/third_party/libavif/src
@@ -0,0 +1 @@
+Subproject commit e7b34a1f5e9f7024d08311c7bae156061b889882
