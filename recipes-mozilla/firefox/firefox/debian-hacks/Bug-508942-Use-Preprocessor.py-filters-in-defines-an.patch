From: Mike Hommey <mh@glandium.org>
Date: Sat, 21 Apr 2012 12:11:40 +0200
Subject: Bug 508942 - Use Preprocessor.py filters in #defines and #includes

Original patch by Markus Stange.
---
 config/Preprocessor.py            |   11 ++++++++---
 config/tests/unit-Preprocessor.py |    9 +++++++++
 js/src/config/Preprocessor.py     |   11 ++++++++---
 3 files changed, 25 insertions(+), 6 deletions(-)

diff --git a/config/Preprocessor.py b/config/Preprocessor.py
index 752e83f..f238111 100644
--- a/config/Preprocessor.py
+++ b/config/Preprocessor.py
@@ -134,6 +134,11 @@ class Preprocessor:
     rv.out = self.out
     return rv
   
+  def applyFilters(self, aLine):
+    for f in self.filters:
+      aLine = f[1](aLine)
+    return aLine
+  
   def write(self, aLine):
     """
     Internal method for handling output.
@@ -146,8 +151,7 @@ class Preprocessor:
                                                             'file': self.context['FILE'],
                                                             'le': self.LE})
         self.writtenLines = ln
-    for f in self.filters:
-      aLine = f[1](aLine)
+    aLine = self.applyFilters(aLine)
     # ensure our line ending. Only need to handle \n, as we're reading
     # with universal line ending support, at least for files.
     aLine = re.sub('\n', self.LE, aLine)
@@ -242,7 +246,7 @@ class Preprocessor:
       raise Preprocessor.Error(self, 'SYNTAX_DEF', args)
     val = 1
     if m.group('value'):
-      val = m.group('value')
+      val = self.applyFilters(m.group('value'))
       try:
         val = int(val)
       except:
@@ -423,6 +427,7 @@ class Preprocessor:
     if isName:
       try:
         args = str(args)
+        args = self.applyFilters(args)
         if not os.path.isabs(args):
           args = os.path.join(self.context['DIRECTORY'], args)
         args = open(args, 'rU')
diff --git a/config/tests/unit-Preprocessor.py b/config/tests/unit-Preprocessor.py
index d2f95f0..0ae2f88 100644
--- a/config/tests/unit-Preprocessor.py
+++ b/config/tests/unit-Preprocessor.py
@@ -404,6 +404,15 @@ FAIL
     self.pp.do_include(f)
     self.assertEqual(self.pp.out.getvalue(), "first\rsecond\r")
 
+  def test_filterDefine(self):
+    f = NamedIO('filterDefine.in', '''#filter substitution
+#define VAR AS
+#define VAR2 P@VAR@
+@VAR2@S
+''')
+    self.pp.do_include(f)
+    self.assertEqual(self.pp.out.getvalue(), "PASS\n")
+
   def test_number_value_equals(self):
     f = NamedIO("number_value_equals.in", """#define FOO 1000
 #if FOO == 1000
diff --git a/js/src/config/Preprocessor.py b/js/src/config/Preprocessor.py
index 752e83f..f238111 100644
--- a/js/src/config/Preprocessor.py
+++ b/js/src/config/Preprocessor.py
@@ -134,6 +134,11 @@ class Preprocessor:
     rv.out = self.out
     return rv
   
+  def applyFilters(self, aLine):
+    for f in self.filters:
+      aLine = f[1](aLine)
+    return aLine
+  
   def write(self, aLine):
     """
     Internal method for handling output.
@@ -146,8 +151,7 @@ class Preprocessor:
                                                             'file': self.context['FILE'],
                                                             'le': self.LE})
         self.writtenLines = ln
-    for f in self.filters:
-      aLine = f[1](aLine)
+    aLine = self.applyFilters(aLine)
     # ensure our line ending. Only need to handle \n, as we're reading
     # with universal line ending support, at least for files.
     aLine = re.sub('\n', self.LE, aLine)
@@ -242,7 +246,7 @@ class Preprocessor:
       raise Preprocessor.Error(self, 'SYNTAX_DEF', args)
     val = 1
     if m.group('value'):
-      val = m.group('value')
+      val = self.applyFilters(m.group('value'))
       try:
         val = int(val)
       except:
@@ -423,6 +427,7 @@ class Preprocessor:
     if isName:
       try:
         args = str(args)
+        args = self.applyFilters(args)
         if not os.path.isabs(args):
           args = os.path.join(self.context['DIRECTORY'], args)
         args = open(args, 'rU')
