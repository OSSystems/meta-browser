From b4f8520c6d6f34365d479faaa9a91fcf7a552f3c Mon Sep 17 00:00:00 2001
From: Martin Jansa <Martin.Jansa@gmail.com>
Date: Wed, 27 May 2020 18:59:24 +0200
Subject: [PATCH] rust-1.39: Bug 1587913 - Fix rust target detection for rustc
 1.38. r=firefox-build-system-reviewers,glandium, a=jcristau

 # HG changeset patch
 # User Chris Manchester <cmanchester@mozilla.com>
 # Date 1571264173 0
 # Node ID e422e27f3e927e7f3d0ea274c6904fbc7da0f77a
 # Parent  ff374d37b61a3ce19841496a6ee59a23ebc56bc0

Differential Revision: https://phabricator.services.mozilla.com/D48996

Upstream-Status: Backport [https://hg.mozilla.org/releases/mozilla-esr68/rev/e422e27f3e927e7f3d0ea274c6904fbc7da0f77a]

Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
---
 build/moz.configure/init.configure            | 10 ++++---
 build/moz.configure/rust.configure            | 14 +++++++++
 .../configure/test_toolchain_configure.py     | 30 +++++++++++++++++--
 3 files changed, 48 insertions(+), 6 deletions(-)

diff --git a/build/moz.configure/init.configure b/build/moz.configure/init.configure
index 7573e6b5b6..f8e7a76bd6 100644
--- a/build/moz.configure/init.configure
+++ b/build/moz.configure/init.configure
@@ -630,16 +630,17 @@ option('--target', nargs=1,
 @imports(_from='__builtin__', _import='ValueError')
 def split_triplet(triplet, allow_unknown=False):
     # The standard triplet is defined as
-    #   CPU_TYPE-MANUFACTURER-OPERATING_SYSTEM
+    #   CPU_TYPE-VENDOR-OPERATING_SYSTEM
     # There is also a quartet form:
-    #   CPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM
+    #   CPU_TYPE-VENDOR-KERNEL-OPERATING_SYSTEM
     # But we can consider the "KERNEL-OPERATING_SYSTEM" as one.
-    # Additionally, some may omit "unknown" when the manufacturer
+    # Additionally, some may omit "unknown" when the vendor
     # is not specified and emit
     #   CPU_TYPE-OPERATING_SYSTEM
+    vendor = 'unknown'
     parts = triplet.split('-', 2)
     if len(parts) == 3:
-        cpu, _, os = parts
+        cpu, vendor, os = parts
     elif len(parts) == 2:
         cpu, os = parts
     else:
@@ -762,6 +763,7 @@ def split_triplet(triplet, allow_unknown=False):
         # Toolchains, most notably for cross compilation may use cpu-os
         # prefixes.
         toolchain='%s-%s' % (cpu, os),
+        vendor=vendor,
     )
 
 
diff --git a/build/moz.configure/rust.configure b/build/moz.configure/rust.configure
index 9b0a29a513..d62ce70533 100644
--- a/build/moz.configure/rust.configure
+++ b/build/moz.configure/rust.configure
@@ -292,6 +292,12 @@ def rust_triple_alias(host_or_target):
                 elif narrowed:
                     candidates = narrowed
 
+                vendor_aliases = {'pc': 'w64'}
+                narrowed = [c for c in candidates
+                            if vendor_aliases.get(c.target.vendor) == host_or_target.vendor]
+                if len(narrowed) == 1:
+                    return narrowed[0].rust_target
+
             # - For arm targets, correlate with arm_target
             #   we could be more thorough with the supported rust targets, but they
             #   don't support OSes that are supported to build Gecko anyways.
@@ -356,6 +362,14 @@ def rust_triple_alias(host_or_target):
             if len(narrowed) == 1:
                 return narrowed[0].rust_target
 
+            # Finally, see if the vendor can be used to disambiguate.
+            narrowed = [
+                c for c in candidates
+                if c.target.vendor == host_or_target.vendor
+            ]
+            if len(narrowed) == 1:
+                return narrowed[0].rust_target
+
             return None
 
         rustc_target = find_candidate(candidates)
diff --git a/python/mozbuild/mozbuild/test/configure/test_toolchain_configure.py b/python/mozbuild/mozbuild/test/configure/test_toolchain_configure.py
index e789478c12..95d6629930 100755
--- a/python/mozbuild/mozbuild/test/configure/test_toolchain_configure.py
+++ b/python/mozbuild/mozbuild/test/configure/test_toolchain_configure.py
@@ -1554,6 +1554,30 @@ def gen_invoke_rustc(version, rustup_wrapper=False):
                 ]
                 rust_targets.remove('wasm32-unknown-wasi')
                 rust_targets.remove('x86_64-unknown-bitrig')
+            # Additional targets from 1.37
+            if Version(version) >= '1.37.0':
+                rust_targets += [
+                    'x86_64-pc-solaris',
+                ]
+            # Additional targets from 1.38
+            if Version(version) >= '1.38.0':
+                rust_targets += [
+                    'aarch64-unknown-redox',
+                    'aarch64-wrs-vxworks',
+                    'armv7-unknown-linux-gnueabi',
+                    'armv7-unknown-linux-musleabi',
+                    'armv7-wrs-vxworks',
+                    'hexagon-unknown-linux-musl',
+                    'i586-wrs-vxworks',
+                    'i686-uwp-windows-gnu',
+                    'i686-wrs-vxworks',
+                    'powerpc-wrs-vxworks',
+                    'powerpc-wrs-vxworks-spe',
+                    'powerpc64-wrs-vxworks',
+                    'riscv32i-unknown-none-elf',
+                    'x86_64-uwp-windows-gnu',
+                    'x86_64-wrs-vxworks',
+                ]
             return 0, '\n'.join(sorted(rust_targets)), ''
         if (len(args) == 6 and args[:2] == ('--crate-type', 'staticlib') and
             args[2].startswith('--target=') and args[3] == '-o'):
@@ -1565,7 +1589,7 @@ def gen_invoke_rustc(version, rustup_wrapper=False):
 
 
 class RustTest(BaseConfigureTest):
-    def get_rust_target(self, target, compiler_type='gcc', version='1.36.0',
+    def get_rust_target(self, target, compiler_type='gcc', version='1.38.0',
                         arm_target=None):
         environ = {
             'PATH': os.pathsep.join(
@@ -1607,7 +1631,6 @@ class RustTest(BaseConfigureTest):
             'i686-unknown-openbsd',
             'x86_64-unknown-openbsd',
             'aarch64-unknown-linux-gnu',
-            'armv7-unknown-linux-gnueabihf',
             'sparc64-unknown-linux-gnu',
             'i686-unknown-linux-gnu',
             'i686-apple-darwin',
@@ -1632,6 +1655,7 @@ class RustTest(BaseConfigureTest):
             ('armv7-unknown-linux-androideabi', 'armv7-linux-androideabi'),
             ('i386-unknown-linux-android', 'i686-linux-android'),
             ('i686-unknown-linux-android', 'i686-linux-android'),
+            ('i686-pc-linux-gnu', 'i686-unknown-linux-gnu'),
             ('x86_64-unknown-linux-android', 'x86_64-linux-android'),
             ('x86_64-pc-linux-gnu', 'x86_64-unknown-linux-gnu'),
             ('sparcv9-sun-solaris2', 'sparcv9-sun-solaris'),
@@ -1647,6 +1671,8 @@ class RustTest(BaseConfigureTest):
             ('x86_64-pc-mingw32', 'gcc', 'x86_64-pc-windows-gnu'),
             ('i686-pc-mingw32', 'clang', 'i686-pc-windows-gnu'),
             ('x86_64-pc-mingw32', 'clang', 'x86_64-pc-windows-gnu'),
+            ('i686-w64-mingw32', 'clang', 'i686-pc-windows-gnu'),
+            ('x86_64-w64-mingw32', 'clang', 'x86_64-pc-windows-gnu'),
         ):
             self.assertEqual(self.get_rust_target(autoconf, building_with_gcc), rust)
 
