diff --git a/widget/gtk/mozcontainer.cpp b/widget/gtk/mozcontainer.cpp
--- a/widget/gtk/mozcontainer.cpp
+++ b/widget/gtk/mozcontainer.cpp
@@ -207,16 +207,17 @@ moz_container_init (MozContainer *contai
     gtk_widget_set_redraw_on_allocate(GTK_WIDGET(container), FALSE);
 
 #if defined(MOZ_WAYLAND)
     {
       container->subcompositor = nullptr;
       container->surface = nullptr;
       container->subsurface = nullptr;
       container->eglwindow = nullptr;
+      container->committed = FALSE;
 
       GdkDisplay *gdk_display = gtk_widget_get_display(GTK_WIDGET(container));
       if (GDK_IS_WAYLAND_DISPLAY (gdk_display)) {
           // Available as of GTK 3.8+
           static auto sGdkWaylandDisplayGetWlDisplay =
               (wl_display *(*)(GdkDisplay *))
               dlsym(RTLD_DEFAULT, "gdk_wayland_display_get_wl_display");
 
@@ -233,16 +234,29 @@ moz_container_init (MozContainer *contai
 #if defined(MOZ_WAYLAND)
 /* We want to draw to GdkWindow owned by mContainer from Compositor thread but
  * Gtk+ can be used in main thread only. So we create wayland wl_surface
  * and attach it as an overlay to GdkWindow.
  *
  * see gtk_clutter_embed_ensure_subsurface() at gtk-clutter-embed.c
 *  for reference.
  */
+
+static void
+on_after_paint(GdkFrameClock *clock, MozContainer *container)
+{
+    // wl_surface_commit() is called at this signal.
+    // https://github.com/GNOME/gtk/blob/7e0b9704ed59e2886321594e7b26afdd0515a520/gdk/wayland/gdkwindow-wayland.c#L626
+    container->committed = TRUE;
+    g_signal_handlers_disconnect_by_func
+        (clock,
+         reinterpret_cast<gpointer>(on_after_paint),
+         container);
+}
+
 static gboolean
 moz_container_map_surface(MozContainer *container)
 {
     // Available as of GTK 3.8+
     static auto sGdkWaylandDisplayGetWlCompositor =
         (wl_compositor *(*)(GdkDisplay *))
         dlsym(RTLD_DEFAULT, "gdk_wayland_display_get_wl_compositor");
     static auto sGdkWaylandWindowGetWlSurface =
@@ -266,16 +280,19 @@ moz_container_map_surface(MozContainer *
         GdkWindow* window = gtk_widget_get_window(GTK_WIDGET(container));
         wl_surface* gtk_surface = sGdkWaylandWindowGetWlSurface(window);
         if (!gtk_surface) {
           // We requested the underlying wl_surface too early when container
           // is not realized yet. We'll try again before first rendering
           // to mContainer.
           return false;
         }
+        GdkFrameClock *clock = gdk_window_get_frame_clock (window);
+        g_signal_connect_after(clock, "after-paint",
+                               G_CALLBACK (on_after_paint), container);
 
         container->subsurface =
           wl_subcompositor_get_subsurface (container->subcompositor,
                                            container->surface,
                                            gtk_surface);
         gint x, y;
         gdk_window_get_position(window, &x, &y);
         wl_subsurface_set_position(container->subsurface, x, y);
@@ -290,16 +307,17 @@ moz_container_map_surface(MozContainer *
         wl_region_destroy(region);
     }
     return true;
 }
 
 static void
 moz_container_unmap_surface(MozContainer *container)
 {
+    container->committed = FALSE;
     g_clear_pointer(&container->eglwindow, wl_egl_window_destroy);
     g_clear_pointer(&container->subsurface, wl_subsurface_destroy);
     g_clear_pointer(&container->surface, wl_surface_destroy);
 }
 
 #endif
 
 void
@@ -589,9 +607,15 @@ moz_container_get_wl_egl_window(MozConta
     return container->eglwindow;
 }
 
 gboolean
 moz_container_has_wl_egl_window(MozContainer *container)
 {
     return container->eglwindow ? true : false;
 }
+
+gboolean
+moz_container_is_committed(MozContainer *container)
+{
+    return container->committed;
+}
 #endif
diff --git a/widget/gtk/mozcontainer.h b/widget/gtk/mozcontainer.h
--- a/widget/gtk/mozcontainer.h
+++ b/widget/gtk/mozcontainer.h
@@ -68,16 +68,17 @@ struct _MozContainer
     GtkContainer   container;
     GList         *children;
 
 #ifdef MOZ_WAYLAND
     struct wl_subcompositor *subcompositor;
     struct wl_surface       *surface;
     struct wl_subsurface    *subsurface;
     struct wl_egl_window    *eglwindow;
+    gboolean committed;
 #endif
 };
 
 struct _MozContainerClass
 {
     GtkContainerClass parent_class;
 };
 
@@ -93,11 +94,12 @@ void       moz_container_move          (
                                         gint          y,
                                         gint          width,
                                         gint          height);
 
 #ifdef MOZ_WAYLAND
 struct wl_surface* moz_container_get_wl_surface(MozContainer *container);
 struct wl_egl_window* moz_container_get_wl_egl_window(MozContainer *container);
 gboolean moz_container_has_wl_egl_window(MozContainer *container);
+gboolean moz_container_is_committed(MozContainer *container);
 #endif
 
 #endif /* __MOZ_CONTAINER_H__ */
diff --git a/widget/gtk/mozgtk/mozgtk.c b/widget/gtk/mozgtk/mozgtk.c
--- a/widget/gtk/mozgtk/mozgtk.c
+++ b/widget/gtk/mozgtk/mozgtk.c
@@ -529,16 +529,17 @@ STUB(gdk_device_manager_get_client_point
 STUB(gdk_disable_multidevice)
 STUB(gdk_device_manager_list_devices)
 STUB(gdk_display_get_device_manager)
 STUB(gdk_display_manager_open_display)
 STUB(gdk_error_trap_pop_ignored)
 STUB(gdk_event_get_source_device)
 STUB(gdk_screen_get_monitor_workarea)
 STUB(gdk_window_get_type)
+STUB(gdk_window_get_frame_clock)
 STUB(gdk_x11_window_get_xid)
 STUB(gdk_x11_display_get_type)
 STUB(gdk_wayland_display_get_type)
 STUB(gtk_box_new)
 STUB(gtk_cairo_should_draw_window)
 STUB(gtk_cairo_transform_to_window)
 STUB(gtk_combo_box_text_append)
 STUB(gtk_drag_set_icon_surface)
diff --git a/widget/gtk/nsWindow.cpp b/widget/gtk/nsWindow.cpp
--- a/widget/gtk/nsWindow.cpp
+++ b/widget/gtk/nsWindow.cpp
@@ -2156,16 +2156,24 @@ nsWindow::OnExposeEvent(cairo_t *cr)
 
     if (region.IsEmpty()) {
         return TRUE;
     }
 
     // If this widget uses OMTC...
     if (GetLayerManager()->GetBackendType() == LayersBackend::LAYERS_CLIENT ||
         GetLayerManager()->GetBackendType() == LayersBackend::LAYERS_WR) {
+
+#ifdef MOZ_WAYLAND
+        if (mContainer && !moz_container_is_committed(mContainer)) {
+            // The wl_surface isn't ready to draw yet.
+            return TRUE;
+        }
+#endif
+
         listener->PaintWindow(this, region);
 
         // Re-get the listener since the will paint notification might have
         // killed it.
         listener = GetListener();
         if (!listener)
             return TRUE;
 
