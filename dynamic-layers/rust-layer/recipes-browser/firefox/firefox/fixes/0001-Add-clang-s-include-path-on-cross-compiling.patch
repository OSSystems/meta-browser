From 7577dd947f9a3d6f6cd81974ef9a6c86cfcd7379 Mon Sep 17 00:00:00 2001
From: Takuro Ashie <ashie@clear-code.com>
Date: Tue, 20 Nov 2018 09:35:37 +0900
Subject: [PATCH] Add clang's include path on cross compiling

It seems that clang doesn't include the path of its headers on
cross compiling at least on Ubuntu-16.04. This patch ensure to
add it.

Upstream-Status: Pending

Signed-off-by: Takuro Ashie <ashie@clear-code.com>
---
 build/moz.configure/llvm-config.configure | 56 ++++++++++++++++++++++
 build/moz.configure/toolchain.configure   | 16 +++++--
 toolkit/moz.configure                     | 57 -----------------------
 3 files changed, 69 insertions(+), 60 deletions(-)
 create mode 100644 build/moz.configure/llvm-config.configure

diff --git a/build/moz.configure/llvm-config.configure b/build/moz.configure/llvm-config.configure
new file mode 100644
index 000000000000..fb80d420f2d5
--- /dev/null
+++ b/build/moz.configure/llvm-config.configure
@@ -0,0 +1,56 @@
+# We support setting up the appropriate options for Stylo's build-time
+# bindings generation via setting LLVM_CONFIG or by providing explicit
+# configure options.  The Windows installer of LLVM/Clang doesn't provide
+# llvm-config, so we need both methods to support all of our tier-1
+# platforms.
+@depends(host)
+@imports('which')
+@imports('os')
+@imports('subprocess')
+def llvm_config_paths(host):
+    llvm_supported_versions = ['6.0', '5.0', '4.0', '3.9']
+    llvm_config_progs = []
+    for version in llvm_supported_versions:
+        llvm_config_progs += [
+            'llvm-config-%s' % version,
+            'llvm-config-mp-%s' % version,    # MacPorts' chosen naming scheme.
+            'llvm-config%s' % version.replace('.', ''),
+        ]
+    llvm_config_progs.append('llvm-config')
+
+    # Homebrew on macOS doesn't make clang available on PATH, so we have to
+    # look for it in non-standard places.
+    if host.kernel == 'Darwin':
+        try:
+            brew = which.which('brew')
+            brew_config = subprocess.check_output([brew, 'config']).strip()
+
+            for line in brew_config.splitlines():
+                if line.startswith('HOMEBREW_PREFIX'):
+                    fields = line.split(None, 2)
+                    prefix = fields[1] if len(fields) == 2 else ''
+                    path = ['opt', 'llvm', 'bin', 'llvm-config']
+                    llvm_config_progs.append(os.path.join(prefix, *path))
+                    break
+        except which.WhichError:
+            # Homebrew not installed, which is fine.
+            pass
+
+    # Also add in the location to which `mach bootstrap` or
+    # `mach artifact toolchain` installs clang.
+    mozbuild_state_dir = os.environ.get('MOZBUILD_STATE_PATH',
+                                        os.path.expanduser(os.path.join('~', '.mozbuild')))
+    bootstrap_llvm_config = os.path.join(mozbuild_state_dir, 'clang', 'bin', 'llvm-config')
+
+    llvm_config_progs.append(bootstrap_llvm_config)
+
+    return llvm_config_progs
+
+llvm_config = check_prog('LLVM_CONFIG', llvm_config_paths,
+                         what='llvm-config', allow_missing=True)
+
+def invoke_llvm_config(llvm_config, *options):
+    '''Invoke llvm_config with the given options and return the first line of
+    output.'''
+    lines = check_cmd_output(llvm_config, *options).splitlines()
+    return lines[0]
diff --git a/build/moz.configure/toolchain.configure b/build/moz.configure/toolchain.configure
index 67007c8dcf7c..4b2fd146893a 100755
--- a/build/moz.configure/toolchain.configure
+++ b/build/moz.configure/toolchain.configure
@@ -1086,11 +1086,21 @@ option(env='BINDGEN_CFLAGS',
        help='Options bindgen should pass to the C/C++ parser')
 
 
-@depends('BINDGEN_CFLAGS')
+include('llvm-config.configure')
+
+
+@depends('BINDGEN_CFLAGS', llvm_config, cross_compiling)
 @checking('bindgen cflags', lambda s: s if s else 'no')
-def bindgen_cflags(value):
+def bindgen_cflags(value, llvm_config, cross_compiling):
+    flags = []
     if value and len(value):
-        return value[0].split()
+        flags.append(value[0])
+    if llvm_config and cross_compiling:
+        llvm_base = invoke_llvm_config(llvm_config, '--libdir')
+        llvm_version = invoke_llvm_config(llvm_config, '--version')
+        flags.append("-I%s/clang/%s/include" % (llvm_base, llvm_version))
+    if len(flags):
+        return ' '.join(flags)
 
 
 add_old_configure_assignment('_BINDGEN_CFLAGS', bindgen_cflags)
diff --git a/toolkit/moz.configure b/toolkit/moz.configure
index 4134ba2d042a..d09a00705a79 100644
--- a/toolkit/moz.configure
+++ b/toolkit/moz.configure
@@ -598,57 +598,6 @@ def building_stylo_bindgen(stylo_config, bindgen_enabled, compile_environment):
         return False
     return stylo_config.build
 
-# We support setting up the appropriate options for Stylo's build-time
-# bindings generation via setting LLVM_CONFIG or by providing explicit
-# configure options.  The Windows installer of LLVM/Clang doesn't provide
-# llvm-config, so we need both methods to support all of our tier-1
-# platforms.
-@depends(host)
-@imports('which')
-@imports('os')
-@imports('subprocess')
-def llvm_config_paths(host):
-    llvm_supported_versions = ['6.0', '5.0', '4.0', '3.9']
-    llvm_config_progs = []
-    for version in llvm_supported_versions:
-        llvm_config_progs += [
-            'llvm-config-%s' % version,
-            'llvm-config-mp-%s' % version,    # MacPorts' chosen naming scheme.
-            'llvm-config%s' % version.replace('.', ''),
-        ]
-    llvm_config_progs.append('llvm-config')
-
-    # Homebrew on macOS doesn't make clang available on PATH, so we have to
-    # look for it in non-standard places.
-    if host.kernel == 'Darwin':
-        try:
-            brew = which.which('brew')
-            brew_config = subprocess.check_output([brew, 'config']).strip()
-
-            for line in brew_config.splitlines():
-                if line.startswith('HOMEBREW_PREFIX'):
-                    fields = line.split(None, 2)
-                    prefix = fields[1] if len(fields) == 2 else ''
-                    path = ['opt', 'llvm', 'bin', 'llvm-config']
-                    llvm_config_progs.append(os.path.join(prefix, *path))
-                    break
-        except which.WhichError:
-            # Homebrew not installed, which is fine.
-            pass
-
-    # Also add in the location to which `mach bootstrap` or
-    # `mach artifact toolchain` installs clang.
-    mozbuild_state_dir = os.environ.get('MOZBUILD_STATE_PATH',
-                                        os.path.expanduser(os.path.join('~', '.mozbuild')))
-    bootstrap_llvm_config = os.path.join(mozbuild_state_dir, 'clang', 'bin', 'llvm-config')
-
-    llvm_config_progs.append(bootstrap_llvm_config)
-
-    return llvm_config_progs
-
-llvm_config = check_prog('LLVM_CONFIG', llvm_config_paths,
-                         when=building_stylo_bindgen,
-                         what='llvm-config', allow_missing=True)
 
 with only_when(building_stylo_bindgen):
     option('--with-libclang-path', nargs=1,
@@ -656,12 +605,6 @@ with only_when(building_stylo_bindgen):
     option('--with-clang-path', nargs=1,
            help='Absolute path to a Clang binary for Stylo bindgen (version 3.9.x or above)')
 
-    def invoke_llvm_config(llvm_config, *options):
-        '''Invoke llvm_config with the given options and return the first line of
-        output.'''
-        lines = check_cmd_output(llvm_config, *options).splitlines()
-        return lines[0]
-
     @imports(_from='textwrap', _import='dedent')
     def check_minimum_llvm_config_version(llvm_config):
         version = Version(invoke_llvm_config(llvm_config, '--version'))
-- 
2.17.1

