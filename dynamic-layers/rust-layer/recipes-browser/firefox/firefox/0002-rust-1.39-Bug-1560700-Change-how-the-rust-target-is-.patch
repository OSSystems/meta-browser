From 953e1b65c4fd8a4de54e222c3bf2b09a9c2e5e14 Mon Sep 17 00:00:00 2001
From: Martin Jansa <Martin.Jansa@gmail.com>
Date: Wed, 27 May 2020 18:58:17 +0200
Subject: [PATCH] rust-1.39: Bug 1560700 - Change how the rust target is
 derived from the build system target. r=froydnj, a=jcristau

 # HG changeset patch
 # User Mike Hommey <mh+mozilla@glandium.org>
 # Date 1566429744 0
 # Node ID ff374d37b61a3ce19841496a6ee59a23ebc56bc0
 # Parent  3edcf381faf75d85bf9d20648e83b978bed85bfe

There are a few problems with the strategy currently used to find the
rust target. For example, we don't find a target for arm freebsd, and we
pick the wrong target for armel linux. Both are related to how things
currently work when multiple targets have the same (cpu, endianness,
os).

So, to derive the rust target, we now use a more fine-grained approach.

Differential Revision: https://phabricator.services.mozilla.com/D41481

Upstream-Status: Backport [https://hg.mozilla.org/releases/mozilla-esr68/rev/ff374d37b61a3ce19841496a6ee59a23ebc56bc0u

Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>

---
 build/moz.configure/rust.configure            | 169 ++++++++++++------
 .../configure/test_toolchain_configure.py     |  65 +++++--
 2 files changed, 167 insertions(+), 67 deletions(-)

diff --git a/build/moz.configure/rust.configure b/build/moz.configure/rust.configure
index 5aed73fb26..9b0a29a513 100644
--- a/build/moz.configure/rust.configure
+++ b/build/moz.configure/rust.configure
@@ -185,38 +185,30 @@ def rust_compiler(rustc_info, cargo_info, build_project):
 
 
 @depends(rustc, when=rust_compiler)
+@imports(_from='__builtin__', _import='ValueError')
 def rust_supported_targets(rustc):
     out = check_cmd_output(rustc, '--print', 'target-list').splitlines()
-    # The os in the triplets used by rust may match the same OSes, in which
-    # case we need to check the raw_os instead.
-    per_os = {}
-    ambiguous = set()
-    per_raw_os = {}
+    data = {}
     for t in out:
-        t = split_triplet(t, allow_unknown=True)
-        endianness = t.endianness
-        if t.cpu.startswith('thumb') and endianness not in ('big', 'little'):
-            endianness = 'little'
-        key = (t.cpu, endianness, t.os)
-        if key in per_os:
-            previous = per_os[key]
-            per_raw_os[(previous.cpu, previous.endianness,
-                        previous.raw_os)] = previous
-            del per_os[key]
-            ambiguous.add(key)
-        if key in ambiguous:
-            raw_os = t.raw_os
-            # split_triplet will return a raw_os of 'androideabi' for
-            # rust targets in the form cpu-linux-androideabi, but what
-            # we get from the build system is linux-androideabi, so
-            # normalize.
-            if raw_os == 'androideabi':
-                raw_os = 'linux-androideabi'
-            per_raw_os[(t.cpu, endianness, raw_os)] = t
-        else:
-            per_os[key] = t
-    return namespace(per_os=per_os, per_raw_os=per_raw_os)
-
+        try:
+            info = split_triplet(t)
+        except ValueError:
+            if t.startswith('thumb'):
+                cpu, rest = t.split('-', 1)
+                retry = '-'.join(('arm', rest))
+            elif t.endswith('-windows-msvc'):
+                retry = t[:-len('windows-msvc')] + 'mingw32'
+            elif t.endswith('-windows-gnu'):
+                retry = t[:-len('windows-gnu')] + 'mingw32'
+            else:
+                continue
+            try:
+                info = split_triplet(retry)
+            except ValueError:
+                continue
+        key = (info.cpu, info.endianness, info.os)
+        data.setdefault(key, []).append(namespace(rust_target=t, target=info))
+    return data
 
 option(env='RUST_HOST',
        nargs=1,
@@ -277,33 +269,96 @@ def rust_triple_alias(host_or_target):
         # munging to get the correct option to rustc.
         # We correlate the autoconf-derived targets with the list of targets
         # rustc gives us with --print target-list.
-        if host_or_target.kernel == 'WINNT':
-            if compiler_info.type in ('gcc', 'clang'):
-                host_or_target_os = 'windows-gnu'
-            else:
-                host_or_target_os = 'windows-msvc'
-            host_or_target_raw_os = host_or_target_os
-        else:
-            host_or_target_os = host_or_target.os
-            host_or_target_raw_os = host_or_target.raw_os
-
-        if host_or_target.cpu == 'arm' and arm_target.arm_arch == 7 and \
-                arm_target.fpu == 'neon' and arm_target.thumb2:
-            host_or_target_cpus = ('thumbv7neon', host_or_target.cpu)
-        else:
-            host_or_target_cpus = (host_or_target.cpu,)
+        candidates = rust_supported_targets.get(
+            (host_or_target.cpu, host_or_target.endianness, host_or_target.os), [])
+
+        def find_candidate(candidates):
+            if len(candidates) == 1:
+                return candidates[0].rust_target
+            elif not candidates:
+                return None
+
+            # We have multiple candidates. There are two cases where we can try to
+            # narrow further down using extra information from the build system.
+            # - For windows targets, correlate with the C compiler type
+            if host_or_target.kernel == 'WINNT':
+                if compiler_info.type in ('gcc', 'clang'):
+                    suffix = 'windows-gnu'
+                else:
+                    suffix = 'windows-msvc'
+                narrowed = [c for c in candidates if c.rust_target.endswith('-{}'.format(suffix))]
+                if len(narrowed) == 1:
+                    return narrowed[0].rust_target
+                elif narrowed:
+                    candidates = narrowed
+
+            # - For arm targets, correlate with arm_target
+            #   we could be more thorough with the supported rust targets, but they
+            #   don't support OSes that are supported to build Gecko anyways.
+            #   Also, sadly, the only interface to check the rust target cpu features
+            #   is --print target-spec-json, and it's unstable, so we have to rely on
+            #   our own knowledge of what each arm target means.
+            if host_or_target.cpu == 'arm' and host_or_target.endianness == 'little':
+                prefixes = []
+                if arm_target.arm_arch >= 7:
+                    if arm_target.thumb2 and arm_target.fpu == 'neon':
+                        prefixes.append('thumbv7neon')
+                    if arm_target.thumb2:
+                        prefixes.append('thumbv7a')
+                    prefixes.append('armv7')
+                if arm_target.arm_arch >= 6:
+                    prefixes.append('armv6')
+                    if host_or_target.os != 'Android':
+                        # arm-* rust targets are armv6... except arm-linux-androideabi
+                        prefixes.append('arm')
+                if arm_target.arm_arch >= 5:
+                    prefixes.append('armv5te')
+                    if host_or_target.os == 'Android':
+                        # arm-* rust targets are armv6... except arm-linux-androideabi
+                        prefixes.append('arm')
+                if arm_target.arm_arch >= 4:
+                    prefixes.append('armv4t')
+                # rust freebsd targets are the only ones that don't have a 'hf' suffix
+                # for hard-float. Technically, that means if the float abi ever is not
+                # hard-float, this will pick a wrong target, but since rust only
+                # supports hard-float, let's assume that means freebsd only support
+                # hard-float.
+                if arm_target.float_abi == 'hard' and host_or_target.os != 'FreeBSD':
+                    suffix = 'hf'
+                else:
+                    suffix = ''
+                for p in prefixes:
+                    for c in candidates:
+                        if c.rust_target.startswith('{}-'.format(p)) and \
+                                c.rust_target.endswith(suffix):
+                            return c.rust_target
+
+            # See if we can narrow down on the exact alias
+            narrowed = [c for c in candidates if c.target.alias == host_or_target.alias]
+            if len(narrowed) == 1:
+                return narrowed[0].rust_target
+            elif narrowed:
+                candidates = narrowed
+
+            # See if we can narrow down with the raw OS
+            narrowed = [c for c in candidates if c.target.raw_os == host_or_target.raw_os]
+            if len(narrowed) == 1:
+                return narrowed[0].rust_target
+            elif narrowed:
+                candidates = narrowed
+
+            # See if we can narrow down with the raw OS and raw CPU
+            narrowed = [
+                c for c in candidates
+                if c.target.raw_os == host_or_target.raw_os and
+                   c.target.raw_cpu == host_or_target.raw_cpu
+            ]
+            if len(narrowed) == 1:
+                return narrowed[0].rust_target
 
-        for host_or_target_cpu in host_or_target_cpus:
-            rustc_target = rust_supported_targets.per_os.get(
-                (host_or_target_cpu, host_or_target.endianness, host_or_target_os))
-            if rustc_target:
-                break
+            return None
 
-            rustc_target = rust_supported_targets.per_raw_os.get(
-                (host_or_target_cpu, host_or_target.endianness,
-                 host_or_target_raw_os))
-            if rustc_target:
-                break
+        rustc_target = find_candidate(candidates)
 
         if rustc_target is None:
             die("Don't know how to translate {} for rustc".format(
@@ -311,7 +366,7 @@ def rust_triple_alias(host_or_target):
 
         # Check to see whether our rustc has a reasonably functional stdlib
         # for our chosen target.
-        target_arg = '--target=' + rustc_target.alias
+        target_arg = '--target=' + rustc_target
         in_fd, in_path = mkstemp(prefix='conftest', suffix='.rs')
         out_fd, out_path = mkstemp(prefix='conftest', suffix='.rlib')
         os.close(out_fd)
@@ -339,7 +394,7 @@ def rust_triple_alias(host_or_target):
                 a rust std library for that target installed. Try:
 
                   rustup target add {}
-                '''.format(host_or_target.alias, rustc, rustc_target.alias)))
+                '''.format(host_or_target.alias, rustc, rustc_target)))
             check_cmd_output(*cmd, onerror=failed)
             if not os.path.exists(out_path) or os.path.getsize(out_path) == 0:
                 failed()
@@ -348,7 +403,7 @@ def rust_triple_alias(host_or_target):
             os.remove(out_path)
 
         # This target is usable.
-        return rustc_target.alias
+        return rustc_target
 
     return rust_target
 
diff --git a/python/mozbuild/mozbuild/test/configure/test_toolchain_configure.py b/python/mozbuild/mozbuild/test/configure/test_toolchain_configure.py
index b40240658d..5b9604808f 100755
--- a/python/mozbuild/mozbuild/test/configure/test_toolchain_configure.py
+++ b/python/mozbuild/mozbuild/test/configure/test_toolchain_configure.py
@@ -1531,6 +1531,32 @@ def gen_invoke_rustc(version, rustup_wrapper=False):
                     'thumbv8m.main-none-eabi',
                     'thumbv8m.main-none-eabihf',
                 ]
+            # Additional targets from 1.34
+            if Version(version) >= '1.34.0':
+                rust_targets += [
+                    'nvptx64-nvidia-cuda',
+                    'powerpc64-unknown-freebsd',
+                    'riscv64gc-unknown-none-elf',
+                    'riscv64imac-unknown-none-elf',
+                ]
+            # Additional targets from 1.35
+            if Version(version) >= '1.35.0':
+                rust_targets += [
+                    'armv6-unknown-freebsd',
+                    'armv7-unknown-freebsd',
+                    'mipsisa32r6-unknown-linux-gnu',
+                    'mipsisa32r6el-unknown-linux-gnu',
+                    'mipsisa64r6-unknown-linux-gnuabi64',
+                    'mipsisa64r6el-unknown-linux-gnuabi64',
+                    'wasm32-unknown-wasi',
+                ]
+            # Additional targets from 1.36
+            if Version(version) >= '1.36.0':
+                rust_targets += [
+                    'wasm32-wasi',
+                ]
+                rust_targets.remove('wasm32-unknown-wasi')
+                rust_targets.remove('x86_64-unknown-bitrig')
             return 0, '\n'.join(sorted(rust_targets)), ''
         if (len(args) == 6 and args[:2] == ('--crate-type', 'staticlib') and
             args[2].startswith('--target=') and args[3] == '-o'):
@@ -1542,7 +1568,7 @@ def gen_invoke_rustc(version, rustup_wrapper=False):
 
 
 class RustTest(BaseConfigureTest):
-    def get_rust_target(self, target, compiler_type='gcc', version='1.33.0',
+    def get_rust_target(self, target, compiler_type='gcc', version='1.36.0',
                         arm_target=None):
         environ = {
             'PATH': os.pathsep.join(
@@ -1567,7 +1593,8 @@ class RustTest(BaseConfigureTest):
         # Same for the arm_target checks.
         dep = sandbox._depends[sandbox['arm_target']]
         getattr(sandbox, '__value_for_depends')[(dep,)] = \
-            arm_target or ReadOnlyNamespace(arm_arch=7, thumb2=False, fpu='vfpv2')
+            arm_target or ReadOnlyNamespace(arm_arch=7, thumb2=False,
+                                            fpu='vfpv2', float_abi='softfp')
         return sandbox._value_for(sandbox['rust_target_triple'])
 
     def test_rust_target(self):
@@ -1630,53 +1657,71 @@ class RustTest(BaseConfigureTest):
         self.assertEqual(
             self.get_rust_target('arm-unknown-linux-androideabi',
                                  arm_target=ReadOnlyNamespace(
-                                     arm_arch=7, fpu='neon', thumb2=True)),
+                                     arm_arch=7, fpu='neon', thumb2=True, float_abi='softfp')),
             'thumbv7neon-linux-androideabi')
 
         self.assertEqual(
             self.get_rust_target('arm-unknown-linux-androideabi',
                                  version='1.32.0',
                                  arm_target=ReadOnlyNamespace(
-                                     arm_arch=7, fpu='neon', thumb2=True)),
+                                     arm_arch=7, fpu='neon', thumb2=True, float_abi='softfp')),
             'armv7-linux-androideabi')
 
         self.assertEqual(
             self.get_rust_target('arm-unknown-linux-androideabi',
                                  arm_target=ReadOnlyNamespace(
-                                     arm_arch=7, fpu='neon', thumb2=False)),
+                                     arm_arch=7, fpu='neon', thumb2=False, float_abi='softfp')),
             'armv7-linux-androideabi')
 
         self.assertEqual(
             self.get_rust_target('arm-unknown-linux-androideabi',
                                  arm_target=ReadOnlyNamespace(
-                                     arm_arch=7, fpu='vfpv2', thumb2=True)),
+                                     arm_arch=7, fpu='vfpv2', thumb2=True, float_abi='softfp')),
             'armv7-linux-androideabi')
 
         self.assertEqual(
             self.get_rust_target('armv7-unknown-linux-gnueabihf',
                                  arm_target=ReadOnlyNamespace(
-                                     arm_arch=7, fpu='neon', thumb2=True)),
+                                     arm_arch=7, fpu='neon', thumb2=True, float_abi='hard')),
             'thumbv7neon-unknown-linux-gnueabihf')
 
         self.assertEqual(
             self.get_rust_target('armv7-unknown-linux-gnueabihf',
                                  version='1.32.0',
                                  arm_target=ReadOnlyNamespace(
-                                     arm_arch=7, fpu='neon', thumb2=True)),
+                                     arm_arch=7, fpu='neon', thumb2=True, float_abi='hard')),
             'armv7-unknown-linux-gnueabihf')
 
         self.assertEqual(
             self.get_rust_target('armv7-unknown-linux-gnueabihf',
                                  arm_target=ReadOnlyNamespace(
-                                     arm_arch=7, fpu='neon', thumb2=False)),
+                                     arm_arch=7, fpu='neon', thumb2=False, float_abi='hard')),
             'armv7-unknown-linux-gnueabihf')
 
         self.assertEqual(
             self.get_rust_target('armv7-unknown-linux-gnueabihf',
                                  arm_target=ReadOnlyNamespace(
-                                     arm_arch=7, fpu='vfpv2', thumb2=True)),
+                                     arm_arch=7, fpu='vfpv2', thumb2=True, float_abi='hard')),
             'armv7-unknown-linux-gnueabihf')
 
+        self.assertEqual(
+            self.get_rust_target('arm-unknown-freebsd13.0-gnueabihf',
+                                 arm_target=ReadOnlyNamespace(
+                                     arm_arch=7, fpu='vfpv2', thumb2=True, float_abi='hard')),
+            'armv7-unknown-freebsd')
+
+        self.assertEqual(
+            self.get_rust_target('arm-unknown-freebsd13.0-gnueabihf',
+                                 arm_target=ReadOnlyNamespace(
+                                     arm_arch=6, fpu=None, thumb2=False, float_abi='hard')),
+            'armv6-unknown-freebsd')
+
+        self.assertEqual(
+            self.get_rust_target('arm-unknown-linux-gnueabi',
+                                 arm_target=ReadOnlyNamespace(
+                                     arm_arch=4, fpu=None, thumb2=False, float_abi='softfp')),
+            'armv4t-unknown-linux-gnueabi')
+
 
 if __name__ == '__main__':
     main()
