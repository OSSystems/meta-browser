# HG changeset patch
# User Takuro Ashie <ashie@clear-code.com>
# Date 1529887343 -32400
#      Mon Jun 25 09:42:23 2018 +0900
# Node ID beeca3210b36e9b6f108031b8c30ec60b34ca3b8
# Parent  681eb7dfa324dd50403c382888929ea8b8b11b00
Enable to suppress to create multiple compositors

Because embedded devices might not support multiple EGL windows.

diff --git a/widget/nsBaseWidget.cpp b/widget/nsBaseWidget.cpp
--- a/widget/nsBaseWidget.cpp
+++ b/widget/nsBaseWidget.cpp
@@ -126,16 +126,18 @@ int32_t nsIWidget::sPointerIdCounter = 0
 /*static*/ uint64_t AutoObserverNotifier::sObserverId = 0;
 /*static*/ nsDataHashtable<nsUint64HashKey, nsCOMPtr<nsIObserver>> AutoObserverNotifier::sSavedObservers;
 
 // The maximum amount of time to let the EnableDragDrop runnable wait in the
 // idle queue before timing out and moving it to the regular queue. Value is in
 // milliseconds.
 const uint32_t kAsyncDragDropTimeout = 1000;
 
+static nsBaseWidget *sSingleCompositorWidget = nullptr;
+
 namespace mozilla {
 namespace widget {
 
 void
 IMENotification::SelectionChangeDataBase::SetWritingMode(
                                         const WritingMode& aWritingMode)
 {
   mWritingMode = aWritingMode.mWritingMode;
@@ -290,16 +292,19 @@ void nsBaseWidget::DestroyCompositor()
     SetCompositorWidgetDelegate(nullptr);
     mCompositorBridgeChild = nullptr;
 
     // XXX CompositorBridgeChild and CompositorBridgeParent might be re-created in
     // ClientLayerManager destructor. See bug 1133426.
     RefPtr<CompositorSession> session = mCompositorSession.forget();
     session->Shutdown();
   }
+
+  if (sSingleCompositorWidget == this)
+    sSingleCompositorWidget = nullptr;
 }
 
 // This prevents the layer manager from starting a new transaction during
 // shutdown.
 void
 nsBaseWidget::RevokeTransactionIdAllocator()
 {
   if (!mLayerManager) {
@@ -1473,26 +1478,36 @@ void nsBaseWidget::CreateCompositor(int 
   bool getCompositorFromThisWindow = true;
 #else
   bool getCompositorFromThisWindow = (mWindowType == eWindowType_toplevel);
 #endif
 
   if (getCompositorFromThisWindow) {
     gfxPlatform::GetPlatform()->NotifyCompositorCreated(mLayerManager->GetCompositorBackendType());
   }
+
+  sSingleCompositorWidget = this;
 }
 
 void nsBaseWidget::NotifyCompositorSessionLost(CompositorSession* aSession)
 {
   MOZ_ASSERT(aSession == mCompositorSession);
   DestroyLayerManager();
 }
 
 bool nsBaseWidget::ShouldUseOffMainThreadCompositing()
 {
+  bool toplevelOnly = Preferences::GetBool("layers.acceleration.toplevel-only", false);
+  if (toplevelOnly && mWindowType != eWindowType_toplevel)
+    return false;
+
+  bool suppressMultiple = Preferences::GetBool("layers.acceleration.suppress-multiple", false);
+  if (suppressMultiple && sSingleCompositorWidget)
+    return false;
+
   return gfxPlatform::UsesOffMainThreadCompositing();
 }
 
 LayerManager* nsBaseWidget::GetLayerManager(PLayerTransactionChild* aShadowManager,
                                             LayersBackend aBackendHint,
                                             LayerManagerPersistence aPersistence)
 {
   if (!mLayerManager) {
