Upstream-Status: Backport

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From 269ff8eee4f91184683b0a1968216bb9fd92f693 Mon Sep 17 00:00:00 2001
From: Maksim Sisov <msisov@igalia.com>
Date: Mon, 25 Mar 2019 15:27:26 +0000
Subject: [PATCH 14/27] [ozone/wayland] Change the order when the opaque region
 is updated.

The Wayland compositor may skip opaque region updates if a client
has not acked changed size of its surface or has not completed
the initialization.

This patch changes the order when the opaque region is set:
1) The region is updated only after SetWindowGeometry() and
AckConfigure() are sent.
2) The region is updated after the entire initialization
step is completed (a window is created first time).

Bug: 942996
Change-Id: I0ad3f4c7804a3292dedc845c352a89ea35765bea
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/1527524
Reviewed-by: Michael Spang <spang@chromium.org>
Commit-Queue: Maksim Sisov <msisov@igalia.com>
Cr-Commit-Position: refs/heads/master@{#643847}
---
 ui/ozone/platform/wayland/wayland_window.cc   | 11 +++----
 .../wayland/wayland_window_unittest.cc        | 33 ++++++++-----------
 2 files changed, 18 insertions(+), 26 deletions(-)

diff --git a/ui/ozone/platform/wayland/wayland_window.cc b/ui/ozone/platform/wayland/wayland_window.cc
index f0ae1a0b1a80..98fe563504b4 100644
--- a/ui/ozone/platform/wayland/wayland_window.cc
+++ b/ui/ozone/platform/wayland/wayland_window.cc
@@ -132,7 +132,6 @@ bool WaylandWindow::Initialize(PlatformWindowInitProperties properties) {
   }
   wl_surface_set_user_data(surface_.get(), this);
   AddSurfaceListener();
-  MaybeUpdateOpaqueRegion();
 
   ui::PlatformWindowType ui_window_type = properties.type;
   switch (ui_window_type) {
@@ -160,6 +159,7 @@ bool WaylandWindow::Initialize(PlatformWindowInitProperties properties) {
   PlatformEventSource::GetInstance()->AddPlatformEventDispatcher(this);
   delegate_->OnAcceleratedWidgetAvailable(GetWidget());
 
+  MaybeUpdateOpaqueRegion();
   return true;
 }
 
@@ -250,6 +250,10 @@ void WaylandWindow::ApplyPendingBounds() {
   xdg_surface_->AckConfigure();
   pending_bounds_ = gfx::Rect();
   connection_->ScheduleFlush();
+
+  // Opaque region is based on the size of the window. Thus, update the region
+  // on each update.
+  MaybeUpdateOpaqueRegion();
 }
 
 void WaylandWindow::DispatchHostWindowDragMovement(
@@ -324,11 +328,6 @@ void WaylandWindow::SetBounds(const gfx::Rect& bounds) {
   if (bounds == bounds_)
     return;
   bounds_ = bounds;
-
-  // Opaque region is based on the size of the window. Thus, update the region
-  // on each update.
-  MaybeUpdateOpaqueRegion();
-
   delegate_->OnBoundsChanged(bounds);
 }
 
diff --git a/ui/ozone/platform/wayland/wayland_window_unittest.cc b/ui/ozone/platform/wayland/wayland_window_unittest.cc
index 1c94f168d9fd..fcad7555ccb2 100644
--- a/ui/ozone/platform/wayland/wayland_window_unittest.cc
+++ b/ui/ozone/platform/wayland/wayland_window_unittest.cc
@@ -1105,35 +1105,28 @@ ACTION_P(VerifyRegion, ptr) {
 }
 
 TEST_P(WaylandWindowTest, SetOpaqueRegion) {
-  MockPlatformWindowDelegate delegate;
-
-  PlatformWindowInitProperties properties;
-  properties.bounds = gfx::Rect(0, 0, 700, 600);
-  properties.type = ui::PlatformWindowType::kWindow;
-  properties.opacity = ui::PlatformWindowOpacity::kOpaqueWindow;
-
-  std::unique_ptr<WaylandWindow> window =
-      std::make_unique<WaylandWindow>(&delegate, connection_.get());
-
-  EXPECT_TRUE(window->Initialize(std::move(properties)));
+  wl::MockSurface* mock_surface =
+      server_.GetObject<wl::MockSurface>(window_->GetWidget());
 
-  Sync();
+  gfx::Rect new_bounds(0, 0, 500, 600);
+  auto state_array = MakeStateArray({XDG_SURFACE_STATE_ACTIVATED});
+  SendConfigureEvent(new_bounds.width(), new_bounds.height(), 1,
+                     state_array.get());
 
-  wl::MockSurface* mock_surface =
-      server_.GetObject<wl::MockSurface>(window->GetWidget());
-  SkIRect rect = SkIRect::MakeXYWH(0, 0, 500, 400);
+  SkIRect rect =
+      SkIRect::MakeXYWH(0, 0, new_bounds.width(), new_bounds.height());
   EXPECT_CALL(*mock_surface, SetOpaqueRegion(_)).WillOnce(VerifyRegion(&rect));
 
-  window->SetBounds({0, 0, 500, 400});
-
   Sync();
 
   VerifyAndClearExpectations();
 
-  rect = SkIRect::MakeXYWH(0, 0, 1000, 534);
-  EXPECT_CALL(*mock_surface, SetOpaqueRegion(_)).WillOnce(VerifyRegion(&rect));
+  new_bounds.set_size(gfx::Size(1000, 534));
+  SendConfigureEvent(new_bounds.width(), new_bounds.height(), 2,
+                     state_array.get());
 
-  window->SetBounds({0, 0, 1000, 534});
+  rect = SkIRect::MakeXYWH(0, 0, new_bounds.width(), new_bounds.height());
+  EXPECT_CALL(*mock_surface, SetOpaqueRegion(_)).WillOnce(VerifyRegion(&rect));
 
   Sync();
 
-- 
2.20.1

