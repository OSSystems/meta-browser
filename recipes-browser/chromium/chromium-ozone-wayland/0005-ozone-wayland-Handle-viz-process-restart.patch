Upstream-Status: Backport

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From 462e30f4f215bd9be321f297309673f36b14f211 Mon Sep 17 00:00:00 2001
From: Maksim Sisov <msisov@igalia.com>
Date: Wed, 27 Mar 2019 18:58:35 +0000
Subject: [PATCH 05/11] [ozone/wayland] Handle viz process restart.

The viz aka gpu process can unexpectedly fail and be restarted.
This requires clearing the state of the WaylandBufferManager and
unbinding the WaylandConnection interface.

After this change, restart works as expected.

TEST: about://gpucrash => the viz/gpu process restarts and the
buffer management flow continues normally.

Bug: 946374
Change-Id: I3133f242f2ef403cc9a230dfdaa4437be20ad611
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/1539737
Reviewed-by: Robert Kroeger <rjkroege@chromium.org>
Commit-Queue: Maksim Sisov <msisov@igalia.com>
Cr-Commit-Position: refs/heads/master@{#644917}
---
 ui/ozone/platform/wayland/wayland_connection.cc          | 9 +++++++--
 ui/ozone/platform/wayland/wayland_connection.h           | 5 +++++
 .../platform/wayland/wayland_connection_connector.cc     | 3 +--
 3 files changed, 13 insertions(+), 4 deletions(-)

diff --git a/ui/ozone/platform/wayland/wayland_connection.cc b/ui/ozone/platform/wayland/wayland_connection.cc
index 142e9dece09f..4bb0b0bcbe8a 100644
--- a/ui/ozone/platform/wayland/wayland_connection.cc
+++ b/ui/ozone/platform/wayland/wayland_connection.cc
@@ -292,6 +292,12 @@ ozone::mojom::WaylandConnectionPtr WaylandConnection::BindInterface() {
   return ptr;
 }
 
+void WaylandConnection::OnChannelDestroyed() {
+  binding_.Unbind();
+  if (buffer_manager_)
+    buffer_manager_->ClearState();
+}
+
 std::vector<gfx::BufferFormat> WaylandConnection::GetSupportedBufferFormats() {
   if (zwp_dmabuf_)
     return zwp_dmabuf_->supported_buffer_formats();
@@ -395,8 +401,7 @@ void WaylandConnection::OnFileCanWriteWithoutBlocking(int fd) {}
 
 void WaylandConnection::TerminateGpuProcess(std::string reason) {
   std::move(terminate_gpu_cb_).Run(std::move(reason));
-  binding_.Unbind();
-  buffer_manager_->ClearState();
+  // The GPU process' failure results in calling ::OnChannelDestroyed.
 }
 
 void WaylandConnection::EnsureDataDevice() {
diff --git a/ui/ozone/platform/wayland/wayland_connection.h b/ui/ozone/platform/wayland/wayland_connection.h
index 624f1cdf1eee..9a4a4a38313c 100644
--- a/ui/ozone/platform/wayland/wayland_connection.h
+++ b/ui/ozone/platform/wayland/wayland_connection.h
@@ -158,6 +158,11 @@ class WaylandConnection : public PlatformEventSource,
   // Returns bound pointer to own mojo interface.
   ozone::mojom::WaylandConnectionPtr BindInterface();
 
+  // Unbinds the interface and clears the state of the |buffer_manager_|. Used
+  // only when the GPU channel, which uses the mojo pipe to this interface, is
+  // destroyed.
+  void OnChannelDestroyed();
+
   std::vector<gfx::BufferFormat> GetSupportedBufferFormats();
 
   void SetTerminateGpuCallback(
diff --git a/ui/ozone/platform/wayland/wayland_connection_connector.cc b/ui/ozone/platform/wayland/wayland_connection_connector.cc
index ca323862d9b8..812fb15e97ba 100644
--- a/ui/ozone/platform/wayland/wayland_connection_connector.cc
+++ b/ui/ozone/platform/wayland/wayland_connection_connector.cc
@@ -44,8 +44,7 @@ void WaylandConnectionConnector::OnGpuProcessLaunched(
     const base::RepeatingCallback<void(IPC::Message*)>& send_callback) {}
 
 void WaylandConnectionConnector::OnChannelDestroyed(int host_id) {
-  // TODO(msisov): Handle restarting.
-  NOTIMPLEMENTED();
+  connection_->OnChannelDestroyed();
 }
 
 void WaylandConnectionConnector::OnMessageReceived(
-- 
2.17.1

