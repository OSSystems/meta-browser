Upstream-Status: Backport

* Backported from the ToT: https://crrev.com/c/1238154

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From 3ea6e2d7cd2a3529fee13b4f56cb211f109df9f4 Mon Sep 17 00:00:00 2001
From: Maksim Sisov <msisov@igalia.com>
Date: Sun, 28 Oct 2018 17:13:20 +0000
Subject: [PATCH 08/17] [ozone/wayland] Enable native gpu memory
 buffers support

This patch enables native gpu memory buffers support by fixing compile
time assumptions in client_native_pixmap_factory_dmabuf.cc.

Now, the supports_import_from_dmabuf_ field is added to the
client_native_pixmap_factory_dmabuf.h class, and it is used to identify
whether *cpu_read_write buffer usages can be supported.

Bug: 864914
Cq-Include-Trybots: luci.chromium.try:android_optional_gpu_tests_rel
Change-Id: Ifd7d3c6d3906990a79521867ee4e6a826ce4c618
Reviewed-on: https://chromium-review.googlesource.com/c/1238154
Commit-Queue: Maksim Sisov <msisov@igalia.com>
Reviewed-by: Michael Spang <spang@chromium.org>
Reviewed-by: Daniele Castagna <dcastagna@chromium.org>
Reviewed-by: Robert Kroeger <rjkroege@chromium.org>
Cr-Commit-Position: refs/heads/master@{#603384}
---
 .../client_native_pixmap_factory_dmabuf.cc    | 69 +++++++++++--------
 .../client_native_pixmap_factory_dmabuf.h     |  3 +-
 .../client_native_pixmap_factory_wayland.cc   |  3 +-
 .../wayland/gpu/gbm_pixmap_wayland.cc         |  8 +--
 .../wayland/wayland_buffer_manager.cc         |  7 +-
 5 files changed, 52 insertions(+), 38 deletions(-)

diff --git a/ui/gfx/linux/client_native_pixmap_factory_dmabuf.cc b/ui/gfx/linux/client_native_pixmap_factory_dmabuf.cc
index 0fdb9cb3f87e..70c287b302f4 100644
--- a/ui/gfx/linux/client_native_pixmap_factory_dmabuf.cc
+++ b/ui/gfx/linux/client_native_pixmap_factory_dmabuf.cc
@@ -12,12 +12,10 @@
 #include "build/build_config.h"
 #include "ui/gfx/native_pixmap_handle.h"
 
-#if defined(OS_CHROMEOS)
-// This can be enabled on all linux but it is not a requirement to support
-// glCreateImageChromium+Dmabuf since it uses gfx::BufferUsage::SCANOUT and
-// the pixmap does not need to be mappable on the client side.
+// Although, it's compiled for all linux platforms, it does not mean dmabuf
+// will work there. Check the comment below in the
+// ClientNativePixmapFactoryDmabuf for more details.
 #include "ui/gfx/linux/client_native_pixmap_dmabuf.h"
-#endif
 
 namespace gfx {
 
@@ -47,7 +45,10 @@ class ClientNativePixmapOpaque : public ClientNativePixmap {
 
 class ClientNativePixmapFactoryDmabuf : public ClientNativePixmapFactory {
  public:
-  ClientNativePixmapFactoryDmabuf() {}
+  explicit ClientNativePixmapFactoryDmabuf(
+      bool supports_native_pixmap_import_from_dmabuf)
+      : supports_native_pixmap_import_from_dmabuf_(
+            supports_native_pixmap_import_from_dmabuf) {}
   ~ClientNativePixmapFactoryDmabuf() override {}
 
   // ClientNativePixmapFactory:
@@ -85,39 +86,34 @@ class ClientNativePixmapFactoryDmabuf : public ClientNativePixmapFactory {
         return false;
       case gfx::BufferUsage::GPU_READ_CPU_READ_WRITE:
       case gfx::BufferUsage::GPU_READ_CPU_READ_WRITE_PERSISTENT: {
-#if defined(OS_CHROMEOS)
+        if (!supports_native_pixmap_import_from_dmabuf_)
+          return false;
         return
 #if defined(ARCH_CPU_X86_FAMILY)
-            // Currently only Intel driver (i.e. minigbm and Mesa) supports R_8
-            // RG_88 and NV12. https://crbug.com/356871
+            // Currently only Intel driver (i.e. minigbm and
+            // Mesa) supports R_8 RG_88 and NV12.
+            // https://crbug.com/356871
             format == gfx::BufferFormat::R_8 ||
             format == gfx::BufferFormat::RG_88 ||
             format == gfx::BufferFormat::YUV_420_BIPLANAR ||
 #endif
             format == gfx::BufferFormat::BGRA_8888;
-#else
-        return false;
-#endif
       }
       case gfx::BufferUsage::SCANOUT_CAMERA_READ_WRITE: {
-#if defined(OS_CHROMEOS)
+        if (!supports_native_pixmap_import_from_dmabuf_)
+          return false;
         // Each platform only supports one camera buffer type. We list the
         // supported buffer formats on all platforms here. When allocating a
         // camera buffer the caller is responsible for making sure a buffer is
         // successfully allocated. For example, allocating YUV420_BIPLANAR
         // for SCANOUT_CAMERA_READ_WRITE may only work on Intel boards.
         return format == gfx::BufferFormat::YUV_420_BIPLANAR;
-#else
-        return false;
-#endif
       }
       case gfx::BufferUsage::CAMERA_AND_CPU_READ_WRITE: {
-#if defined(OS_CHROMEOS)
+        if (!supports_native_pixmap_import_from_dmabuf_)
+          return false;
         // R_8 is used as the underlying pixel format for BLOB buffers.
         return format == gfx::BufferFormat::R_8;
-#else
-        return false;
-#endif
       }
     }
     NOTREACHED();
@@ -134,12 +130,11 @@ class ClientNativePixmapFactoryDmabuf : public ClientNativePixmapFactory {
       case gfx::BufferUsage::GPU_READ_CPU_READ_WRITE_PERSISTENT:
       case gfx::BufferUsage::SCANOUT_CAMERA_READ_WRITE:
       case gfx::BufferUsage::CAMERA_AND_CPU_READ_WRITE:
-#if defined(OS_CHROMEOS)
-        return ClientNativePixmapDmaBuf::ImportFromDmabuf(handle, size);
-#else
-        NOTREACHED();
+        if (supports_native_pixmap_import_from_dmabuf_)
+          return ClientNativePixmapDmaBuf::ImportFromDmabuf(handle, size);
+        NOTREACHED()
+            << "Native GpuMemoryBuffers are not supported on this platform";
         return nullptr;
-#endif
       case gfx::BufferUsage::GPU_READ:
       case gfx::BufferUsage::SCANOUT:
       case gfx::BufferUsage::SCANOUT_VDA_WRITE:
@@ -152,11 +147,31 @@ class ClientNativePixmapFactoryDmabuf : public ClientNativePixmapFactory {
     return nullptr;
   }
 
+ private:
+  // Says if ClientNativePixmapDmaBuf can be used to import handle from dmabuf.
+  const bool supports_native_pixmap_import_from_dmabuf_ = false;
+
   DISALLOW_COPY_AND_ASSIGN(ClientNativePixmapFactoryDmabuf);
 };
 
-ClientNativePixmapFactory* CreateClientNativePixmapFactoryDmabuf() {
-  return new ClientNativePixmapFactoryDmabuf();
+ClientNativePixmapFactory* CreateClientNativePixmapFactoryDmabuf(
+    bool supports_native_pixmap_import_from_dmabuf) {
+// |supports_native_pixmap_import_from_dmabuf| can be enabled on all linux but
+// it is not a requirement to support glCreateImageChromium+Dmabuf since it uses
+// gfx::BufferUsage::SCANOUT and the pixmap does not need to be mappable on the
+// client side.
+//
+// At the moment, only Ozone/Wayland platform running on Linux is able to import
+// handle from dmabuf in addition to the ChromeOS. This is set in the ozone
+// level in the ClientNativePixmapFactoryWayland class.
+//
+// This is not ideal. The ozone platform should probably set this.
+// TODO(rjkroege): do something better here.
+#if defined(OS_CHROMEOS)
+  supports_native_pixmap_import_from_dmabuf = true;
+#endif
+  return new ClientNativePixmapFactoryDmabuf(
+      supports_native_pixmap_import_from_dmabuf);
 }
 
 }  // namespace gfx
diff --git a/ui/gfx/linux/client_native_pixmap_factory_dmabuf.h b/ui/gfx/linux/client_native_pixmap_factory_dmabuf.h
index 7f802a64a01f..730b28debcc3 100644
--- a/ui/gfx/linux/client_native_pixmap_factory_dmabuf.h
+++ b/ui/gfx/linux/client_native_pixmap_factory_dmabuf.h
@@ -10,7 +10,8 @@
 
 namespace gfx {
 
-GFX_EXPORT ClientNativePixmapFactory* CreateClientNativePixmapFactoryDmabuf();
+GFX_EXPORT ClientNativePixmapFactory* CreateClientNativePixmapFactoryDmabuf(
+    bool supports_import_from_dmabuf = false);
 
 }  // namespace gfx
 
diff --git a/ui/ozone/platform/wayland/client_native_pixmap_factory_wayland.cc b/ui/ozone/platform/wayland/client_native_pixmap_factory_wayland.cc
index 110dc9f3ab2d..a57bfb8ac16a 100644
--- a/ui/ozone/platform/wayland/client_native_pixmap_factory_wayland.cc
+++ b/ui/ozone/platform/wayland/client_native_pixmap_factory_wayland.cc
@@ -16,7 +16,8 @@ namespace ui {
 class ClientNativePixmapFactoryWayland : public gfx::ClientNativePixmapFactory {
  public:
   ClientNativePixmapFactoryWayland() {
-    dmabuf_factory_.reset(gfx::CreateClientNativePixmapFactoryDmabuf());
+    dmabuf_factory_.reset(gfx::CreateClientNativePixmapFactoryDmabuf(
+        true /* supports_native_pixmap_import_from_dmabuf */));
   }
   ~ClientNativePixmapFactoryWayland() override {}
 
diff --git a/ui/ozone/platform/wayland/gpu/gbm_pixmap_wayland.cc b/ui/ozone/platform/wayland/gpu/gbm_pixmap_wayland.cc
index c08798ab0f57..62d42fcc06f2 100644
--- a/ui/ozone/platform/wayland/gpu/gbm_pixmap_wayland.cc
+++ b/ui/ozone/platform/wayland/gpu/gbm_pixmap_wayland.cc
@@ -58,13 +58,7 @@ bool GbmPixmapWayland::InitializeBuffer(gfx::Size size,
       break;
     case gfx::BufferUsage::GPU_READ_CPU_READ_WRITE:
     case gfx::BufferUsage::GPU_READ_CPU_READ_WRITE_PERSISTENT:
-      // mmap cannot be used with gbm buffers on a different process. That is,
-      // Linux disallows this and "permission denied" is returned. To overcome
-      // this and make software rasterization working, buffers must be created
-      // on the browser process and gbm_bo_map must be used.
-      // TODO(msisov): add support fir these two buffer usage cases.
-      // https://crbug.com/864914
-      LOG(FATAL) << "This scenario is not supported in Wayland now";
+      flags = GBM_BO_USE_LINEAR;
       break;
     default:
       NOTREACHED() << "Not supported buffer format";
diff --git a/ui/ozone/platform/wayland/wayland_buffer_manager.cc b/ui/ozone/platform/wayland/wayland_buffer_manager.cc
index e322f428d512..393336d13714 100644
--- a/ui/ozone/platform/wayland/wayland_buffer_manager.cc
+++ b/ui/ozone/platform/wayland/wayland_buffer_manager.cc
@@ -313,7 +313,11 @@ void WaylandBufferManager::CreateSucceededInternal(
     }
   }
 
-  DCHECK(buffer);
+  // It can happen that buffer was destroyed by a client while the Wayland
+  // compositor was processing a request to create a wl_buffer.
+  if (!buffer)
+    return;
+
   buffer->wl_buffer.reset(new_buffer);
   buffer->params = nullptr;
   zwp_linux_buffer_params_v1_destroy(params);
@@ -370,7 +374,6 @@ void WaylandBufferManager::CreateSucceeded(
     struct zwp_linux_buffer_params_v1* params,
     struct wl_buffer* new_buffer) {
   WaylandBufferManager* self = static_cast<WaylandBufferManager*>(data);
-
   DCHECK(self);
   self->CreateSucceededInternal(params, new_buffer);
 }
-- 
2.17.1

