Upstream-Status: Backport

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From d13527ad82dabdef05c83cb8ff23d4a98f2404e0 Mon Sep 17 00:00:00 2001
From: Nick Diego Yamane <nickdiego@igalia.com>
Date: Thu, 21 Mar 2019 11:27:04 +0000
Subject: [PATCH 11/27] ozone/wayland: Fix crash when trying to read clipboard
 data

When ClipboardOzone::ReadData function is called before any data
offer is set at WaylandDataDevice object, it tries to do an illegal
memory access, resulting in crashes. This has been observed when
one tries to right-click within the Bookmarks Bar, which tries to
read clipboard data to determine 'Paste' button state.

This change fixes it and adds an unit test to make it possible to
detect future regressions.

Bug: 944297
Change-Id: I22435a615d1f0f2ae6cf3c549bf993286c9920b1
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/1533124
Reviewed-by: Antonio Gomes <tonikitoo@igalia.com>
Commit-Queue: Nick Yamane <nickdiego@igalia.com>
Cr-Commit-Position: refs/heads/master@{#642877}
---
 ui/ozone/platform/wayland/wayland_connection.cc    |  3 ++-
 ui/ozone/platform/wayland/wayland_data_device.cc   |  8 ++++++--
 ui/ozone/platform/wayland/wayland_data_device.h    |  2 +-
 .../wayland/wayland_data_device_unittest.cc        | 14 +++++++++++++-
 4 files changed, 22 insertions(+), 5 deletions(-)

diff --git a/ui/ozone/platform/wayland/wayland_connection.cc b/ui/ozone/platform/wayland/wayland_connection.cc
index 2044e47791f0..c4ea023944a8 100644
--- a/ui/ozone/platform/wayland/wayland_connection.cc
+++ b/ui/ozone/platform/wayland/wayland_connection.cc
@@ -270,7 +270,8 @@ void WaylandConnection::RequestClipboardData(
 
   DCHECK(data_map);
   data_map_ = data_map;
-  data_device_->RequestSelectionData(mime_type);
+  if (!data_device_->RequestSelectionData(mime_type))
+    SetClipboardData({}, mime_type);
 }
 
 bool WaylandConnection::IsSelectionOwner() {
diff --git a/ui/ozone/platform/wayland/wayland_data_device.cc b/ui/ozone/platform/wayland/wayland_data_device.cc
index 2c0143eb2e36..ff6b0d5d7b7f 100644
--- a/ui/ozone/platform/wayland/wayland_data_device.cc
+++ b/ui/ozone/platform/wayland/wayland_data_device.cc
@@ -87,11 +87,14 @@ WaylandDataDevice::~WaylandDataDevice() {
   shared_memory_->Close();
 }
 
-void WaylandDataDevice::RequestSelectionData(const std::string& mime_type) {
+bool WaylandDataDevice::RequestSelectionData(const std::string& mime_type) {
+  if (!selection_offer_)
+    return false;
+
   base::ScopedFD fd = selection_offer_->Receive(mime_type);
   if (!fd.is_valid()) {
     LOG(ERROR) << "Failed to open file descriptor.";
-    return;
+    return false;
   }
 
   // Ensure there is not pending operation to be performed by the compositor,
@@ -100,6 +103,7 @@ void WaylandDataDevice::RequestSelectionData(const std::string& mime_type) {
       base::BindOnce(&WaylandDataDevice::ReadClipboardDataFromFD,
                      base::Unretained(this), std::move(fd), mime_type);
   RegisterDeferredReadCallback();
+  return true;
 }
 
 void WaylandDataDevice::RequestDragData(
diff --git a/ui/ozone/platform/wayland/wayland_data_device.h b/ui/ozone/platform/wayland/wayland_data_device.h
index 7a0f36ac018a..e623f2eaf37e 100644
--- a/ui/ozone/platform/wayland/wayland_data_device.h
+++ b/ui/ozone/platform/wayland/wayland_data_device.h
@@ -39,7 +39,7 @@ class WaylandDataDevice {
   WaylandDataDevice(WaylandConnection* connection, wl_data_device* data_device);
   ~WaylandDataDevice();
 
-  void RequestSelectionData(const std::string& mime_type);
+  bool RequestSelectionData(const std::string& mime_type);
 
   // Requests the data to the platform when Chromium gets drag-and-drop started
   // by others. Once reading the data from platform is done, |callback| should
diff --git a/ui/ozone/platform/wayland/wayland_data_device_unittest.cc b/ui/ozone/platform/wayland/wayland_data_device_unittest.cc
index 54c590570702..b09b8cb10ffa 100644
--- a/ui/ozone/platform/wayland/wayland_data_device_unittest.cc
+++ b/ui/ozone/platform/wayland/wayland_data_device_unittest.cc
@@ -110,7 +110,7 @@ TEST_P(WaylandDataDeviceManagerTest, WriteToClipboard) {
   run_loop.Run();
 }
 
-TEST_P(WaylandDataDeviceManagerTest, ReadFromClibpard) {
+TEST_P(WaylandDataDeviceManagerTest, ReadFromClipboard) {
   // TODO(nickdiego): implement this in terms of an actual wl_surface that
   // gets focused and compositor sends data_device data to it.
   auto* data_offer = data_device_manager_->data_device()->OnDataOffer();
@@ -130,6 +130,18 @@ TEST_P(WaylandDataDeviceManagerTest, ReadFromClibpard) {
   Sync();
 }
 
+TEST_P(WaylandDataDeviceManagerTest, ReadFromClipboardWithoutOffer) {
+  // When no data offer is advertised and client requests clipboard data
+  // from the server, the response callback should be gracefully called with
+  // an empty string.
+  auto callback =
+      base::BindOnce([](const base::Optional<std::vector<uint8_t>>& data) {
+        std::string string_data = std::string(data->begin(), data->end());
+        EXPECT_EQ("", string_data);
+      });
+  clipboard_client_->ReadData(wl::kTextMimeTypeUtf8, std::move(callback));
+}
+
 TEST_P(WaylandDataDeviceManagerTest, IsSelectionOwner) {
   auto callback = base::BindOnce([]() {});
   clipboard_client_->SetData(wl::kSampleClipboardText, wl::kTextMimeTypeUtf8,
-- 
2.20.1

