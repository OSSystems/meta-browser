Upstream-Status: Backport

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From bb77926126430c83ec5fd32b5eb48bf533d4e8d4 Mon Sep 17 00:00:00 2001
From: Maksim Sisov <msisov@igalia.com>
Date: Thu, 14 Mar 2019 14:48:22 +0000
Subject: [PATCH 03/27] [ozone/wayland] Use opaque region for opaque windows.

Chromium provides opacity hint for each native window.

Thus, we can use it to provide optimization hints for the
Wayland compositor.

Test results on the Raspberry pi 3 board showed the following
results:

Simple css animation: gain from 30 FPS to 60 FPS.
Webgl Aquarium: gain from 17-18 FPS to 18-19 FPS.

Bug: 578890
Change-Id: I47ec53d0a7e9a559c9c9bf7722808313da97f840
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/1520666
Reviewed-by: Michael Spang <spang@chromium.org>
Reviewed-by: Sadrul Chowdhury <sadrul@chromium.org>
Commit-Queue: Maksim Sisov <msisov@igalia.com>
Cr-Commit-Position: refs/heads/master@{#640749}
---
 ui/ozone/platform/wayland/wayland_object.cc   |  3 ++
 ui/ozone/platform/wayland/wayland_object.h    |  7 +++
 ui/ozone/platform/wayland/wayland_window.cc   | 24 ++++++++++-
 ui/ozone/platform/wayland/wayland_window.h    | 12 +++++-
 .../wayland/wayland_window_unittest.cc        | 43 +++++++++++++++++++
 .../platform_window_init_properties.h         |  9 ++++
 .../desktop_window_tree_host_platform.cc      | 12 ++++++
 7 files changed, 107 insertions(+), 3 deletions(-)

diff --git a/ui/ozone/platform/wayland/wayland_object.cc b/ui/ozone/platform/wayland/wayland_object.cc
index ed4de394dd05..31fae0c2c15a 100644
--- a/ui/ozone/platform/wayland/wayland_object.cc
+++ b/ui/ozone/platform/wayland/wayland_object.cc
@@ -102,6 +102,9 @@ const wl_interface* ObjectTraits<wl_registry>::interface =
     &wl_registry_interface;
 void (*ObjectTraits<wl_registry>::deleter)(wl_registry*) = &wl_registry_destroy;
 
+const wl_interface* ObjectTraits<wl_region>::interface = &wl_region_interface;
+void (*ObjectTraits<wl_region>::deleter)(wl_region*) = &wl_region_destroy;
+
 const wl_interface* ObjectTraits<wl_seat>::interface = &wl_seat_interface;
 void (*ObjectTraits<wl_seat>::deleter)(wl_seat*) = &delete_seat;
 
diff --git a/ui/ozone/platform/wayland/wayland_object.h b/ui/ozone/platform/wayland/wayland_object.h
index 6e5e1b082458..f7f7fd3264f5 100644
--- a/ui/ozone/platform/wayland/wayland_object.h
+++ b/ui/ozone/platform/wayland/wayland_object.h
@@ -20,6 +20,7 @@ struct wl_keyboard;
 struct wl_output;
 struct wl_pointer;
 struct wl_registry;
+struct wl_region;
 struct wl_seat;
 struct wl_shm;
 struct wl_shm_pool;
@@ -118,6 +119,12 @@ struct ObjectTraits<wl_registry> {
   static void (*deleter)(wl_registry*);
 };
 
+template <>
+struct ObjectTraits<wl_region> {
+  static const wl_interface* interface;
+  static void (*deleter)(wl_region*);
+};
+
 template <>
 struct ObjectTraits<wl_seat> {
   static const wl_interface* interface;
diff --git a/ui/ozone/platform/wayland/wayland_window.cc b/ui/ozone/platform/wayland/wayland_window.cc
index 0245365f7296..7b658951a403 100644
--- a/ui/ozone/platform/wayland/wayland_window.cc
+++ b/ui/ozone/platform/wayland/wayland_window.cc
@@ -26,7 +26,6 @@
 #include "ui/ozone/platform/wayland/xdg_surface_wrapper_v5.h"
 #include "ui/ozone/platform/wayland/xdg_surface_wrapper_v6.h"
 #include "ui/platform_window/platform_window_handler/wm_drop_handler.h"
-#include "ui/platform_window/platform_window_init_properties.h"
 
 namespace ui {
 
@@ -125,6 +124,7 @@ bool WaylandWindow::Initialize(PlatformWindowInitProperties properties) {
   DCHECK(xdg_shell_objects_factory_);
 
   bounds_ = properties.bounds;
+  opacity_ = properties.opacity;
 
   surface_.reset(wl_compositor_create_surface(connection_->compositor()));
   if (!surface_) {
@@ -133,6 +133,7 @@ bool WaylandWindow::Initialize(PlatformWindowInitProperties properties) {
   }
   wl_surface_set_user_data(surface_.get(), this);
   AddSurfaceListener();
+  MaybeUpdateOpaqueRegion();
 
   ui::PlatformWindowType ui_window_type = properties.type;
   switch (ui_window_type) {
@@ -324,6 +325,11 @@ void WaylandWindow::SetBounds(const gfx::Rect& bounds) {
   if (bounds == bounds_)
     return;
   bounds_ = bounds;
+
+  // Opaque region is based on the size of the window. Thus, update the region
+  // on each update.
+  MaybeUpdateOpaqueRegion();
+
   delegate_->OnBoundsChanged(bounds);
 }
 
@@ -849,6 +855,22 @@ WaylandWindow* WaylandWindow::GetTopLevelWindow() {
   return parent_window_ ? parent_window_->GetTopLevelWindow() : this;
 }
 
+void WaylandWindow::MaybeUpdateOpaqueRegion() {
+  if (!IsOpaqueWindow())
+    return;
+
+  wl::Object<wl_region> region(
+      wl_compositor_create_region(connection_->compositor()));
+  wl_region_add(region.get(), 0, 0, bounds_.width(), bounds_.height());
+  wl_surface_set_opaque_region(surface(), region.get());
+
+  connection_->ScheduleFlush();
+}
+
+bool WaylandWindow::IsOpaqueWindow() const {
+  return opacity_ == ui::PlatformWindowOpacity::kOpaqueWindow;
+}
+
 // static
 void WaylandWindow::Enter(void* data,
                           struct wl_surface* wl_surface,
diff --git a/ui/ozone/platform/wayland/wayland_window.h b/ui/ozone/platform/wayland/wayland_window.h
index 7a32d8dcf242..4c7271d19d94 100644
--- a/ui/ozone/platform/wayland/wayland_window.h
+++ b/ui/ozone/platform/wayland/wayland_window.h
@@ -18,6 +18,7 @@
 #include "ui/platform_window/platform_window_delegate.h"
 #include "ui/platform_window/platform_window_handler/wm_drag_handler.h"
 #include "ui/platform_window/platform_window_handler/wm_move_resize_handler.h"
+#include "ui/platform_window/platform_window_init_properties.h"
 
 namespace gfx {
 class PointF;
@@ -32,8 +33,6 @@ class WaylandConnection;
 class XDGPopupWrapper;
 class XDGSurfaceWrapper;
 
-struct PlatformWindowInitProperties;
-
 namespace {
 class XDGShellObjectFactory;
 }  // namespace
@@ -179,6 +178,12 @@ class WaylandWindow : public PlatformWindow,
 
   WaylandWindow* GetTopLevelWindow();
 
+  // It's important to set opaque region for opaque windows (provides
+  // optimization hint for the Wayland compositor).
+  void MaybeUpdateOpaqueRegion();
+
+  bool IsOpaqueWindow() const;
+
   // wl_surface_listener
   static void Enter(void* data,
                     struct wl_surface* wl_surface,
@@ -223,6 +228,9 @@ class WaylandWindow : public PlatformWindow,
   // activated.
   ui::PlatformWindowState pending_state_;
 
+  // Stores current opacity of the window. Set on ::Initialize call.
+  ui::PlatformWindowOpacity opacity_;
+
   bool is_active_ = false;
   bool is_minimizing_ = false;
 
diff --git a/ui/ozone/platform/wayland/wayland_window_unittest.cc b/ui/ozone/platform/wayland/wayland_window_unittest.cc
index c85ff8e9bc01..1c94f168d9fd 100644
--- a/ui/ozone/platform/wayland/wayland_window_unittest.cc
+++ b/ui/ozone/platform/wayland/wayland_window_unittest.cc
@@ -5,6 +5,7 @@
 #include "ui/ozone/platform/wayland/wayland_window.h"
 
 #include <memory>
+#include <utility>
 
 #include <linux/input.h>
 #include <wayland-server-core.h>
@@ -20,6 +21,7 @@
 #include "ui/events/event.h"
 #include "ui/ozone/platform/wayland/test/mock_pointer.h"
 #include "ui/ozone/platform/wayland/test/mock_surface.h"
+#include "ui/ozone/platform/wayland/test/test_region.h"
 #include "ui/ozone/platform/wayland/test/test_wayland_server_thread.h"
 #include "ui/ozone/platform/wayland/wayland_test.h"
 #include "ui/ozone/platform/wayland/wayland_util.h"
@@ -1097,6 +1099,47 @@ TEST_P(WaylandWindowTest, AdjustPopupBounds) {
   VerifyAndClearExpectations();
 }
 
+ACTION_P(VerifyRegion, ptr) {
+  wl::TestRegion* region = wl::GetUserDataAs<wl::TestRegion>(arg0);
+  EXPECT_EQ(*ptr, region->getBounds());
+}
+
+TEST_P(WaylandWindowTest, SetOpaqueRegion) {
+  MockPlatformWindowDelegate delegate;
+
+  PlatformWindowInitProperties properties;
+  properties.bounds = gfx::Rect(0, 0, 700, 600);
+  properties.type = ui::PlatformWindowType::kWindow;
+  properties.opacity = ui::PlatformWindowOpacity::kOpaqueWindow;
+
+  std::unique_ptr<WaylandWindow> window =
+      std::make_unique<WaylandWindow>(&delegate, connection_.get());
+
+  EXPECT_TRUE(window->Initialize(std::move(properties)));
+
+  Sync();
+
+  wl::MockSurface* mock_surface =
+      server_.GetObject<wl::MockSurface>(window->GetWidget());
+  SkIRect rect = SkIRect::MakeXYWH(0, 0, 500, 400);
+  EXPECT_CALL(*mock_surface, SetOpaqueRegion(_)).WillOnce(VerifyRegion(&rect));
+
+  window->SetBounds({0, 0, 500, 400});
+
+  Sync();
+
+  VerifyAndClearExpectations();
+
+  rect = SkIRect::MakeXYWH(0, 0, 1000, 534);
+  EXPECT_CALL(*mock_surface, SetOpaqueRegion(_)).WillOnce(VerifyRegion(&rect));
+
+  window->SetBounds({0, 0, 1000, 534});
+
+  Sync();
+
+  VerifyAndClearExpectations();
+}
+
 INSTANTIATE_TEST_SUITE_P(XdgVersionV5Test,
                          WaylandWindowTest,
                          ::testing::Values(kXdgShellV5));
diff --git a/ui/platform_window/platform_window_init_properties.h b/ui/platform_window/platform_window_init_properties.h
index fc00c92a691a..20236ab05d21 100644
--- a/ui/platform_window/platform_window_init_properties.h
+++ b/ui/platform_window/platform_window_init_properties.h
@@ -24,6 +24,12 @@ enum class PlatformWindowType {
   kTooltip,
 };
 
+enum class PlatformWindowOpacity {
+  kInferOpacity,
+  kOpaqueWindow,
+  kTranslucentWindow,
+};
+
 // Initial properties which are passed to PlatformWindow to be initialized
 // with a desired set of properties.
 struct PlatformWindowInitProperties {
@@ -43,6 +49,9 @@ struct PlatformWindowInitProperties {
   // Tells PlatformWindow which native widget its parent holds. It is usually
   // used to find a parent from internal list of PlatformWindows.
   gfx::AcceleratedWidget parent_widget = gfx::kNullAcceleratedWidget;
+  // Tells the opacity type of a window. Check the comment in the
+  // Widget::InitProperties::WindowOpacity.
+  PlatformWindowOpacity opacity = PlatformWindowOpacity::kOpaqueWindow;
 
 #if defined(OS_FUCHSIA)
   fuchsia::ui::gfx::ExportToken view_token;
diff --git a/ui/views/widget/desktop_aura/desktop_window_tree_host_platform.cc b/ui/views/widget/desktop_aura/desktop_window_tree_host_platform.cc
index d07f4fda0009..1afcdd749e5b 100644
--- a/ui/views/widget/desktop_aura/desktop_window_tree_host_platform.cc
+++ b/ui/views/widget/desktop_aura/desktop_window_tree_host_platform.cc
@@ -54,6 +54,18 @@ ui::PlatformWindowInitProperties ConvertWidgetInitParamsToInitProperties(
   if (params.parent && params.parent->GetHost())
     properties.parent_widget = params.parent->GetHost()->GetAcceleratedWidget();
 
+  switch (params.opacity) {
+    case Widget::InitParams::WindowOpacity::INFER_OPACITY:
+      properties.opacity = ui::PlatformWindowOpacity::kInferOpacity;
+      break;
+    case Widget::InitParams::WindowOpacity::OPAQUE_WINDOW:
+      properties.opacity = ui::PlatformWindowOpacity::kOpaqueWindow;
+      break;
+    case Widget::InitParams::WindowOpacity::TRANSLUCENT_WINDOW:
+      properties.opacity = ui::PlatformWindowOpacity::kTranslucentWindow;
+      break;
+  }
+
   return properties;
 }
 
-- 
2.20.1

