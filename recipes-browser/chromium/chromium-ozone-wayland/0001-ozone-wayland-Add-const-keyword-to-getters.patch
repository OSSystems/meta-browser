Upstream-Status: Backport

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From 4f19d8c539c63594d8fae98dad9b741f938d1482 Mon Sep 17 00:00:00 2001
From: Maksim Sisov <msisov@igalia.com>
Date: Fri, 15 Mar 2019 14:46:19 +0000
Subject: [PATCH 01/11] [ozone/wayland] Add const keyword to getters.

This patch just adds const keyword to getter methods.

Bug: 578890
Change-Id: Id1e37a2d498f309734447c18e5dbeae6535e87fb
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/1508523
Commit-Queue: Maksim Sisov <msisov@igalia.com>
Reviewed-by: Robert Kroeger <rjkroege@chromium.org>
Cr-Commit-Position: refs/heads/master@{#641194}
---
 .../wayland/gpu/wayland_connection_proxy.cc   |  4 +--
 .../wayland/gpu/wayland_connection_proxy.h    |  8 ++---
 .../platform/wayland/wayland_connection.cc    | 11 +++---
 .../platform/wayland/wayland_connection.h     | 34 ++++++++++---------
 4 files changed, 30 insertions(+), 27 deletions(-)

diff --git a/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.cc b/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.cc
index 2d19898b0aa0..e2d82f83191f 100644
--- a/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.cc
+++ b/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.cc
@@ -132,7 +132,7 @@ void WaylandConnectionProxy::DestroyShmBuffer(gfx::AcceleratedWidget widget) {
 }
 
 WaylandWindow* WaylandConnectionProxy::GetWindow(
-    gfx::AcceleratedWidget widget) {
+    gfx::AcceleratedWidget widget) const {
   if (connection_)
     return connection_->GetWindow(widget);
   return nullptr;
@@ -146,7 +146,7 @@ void WaylandConnectionProxy::ScheduleFlush() {
                 "when multi-process moe is used";
 }
 
-intptr_t WaylandConnectionProxy::Display() {
+intptr_t WaylandConnectionProxy::Display() const {
   if (connection_)
     return reinterpret_cast<intptr_t>(connection_->display());
 
diff --git a/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.h b/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.h
index 8da7a183aefc..27909874410d 100644
--- a/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.h
+++ b/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.h
@@ -99,7 +99,7 @@ class WaylandConnectionProxy : public ozone::mojom::WaylandConnectionClient {
   // hosted in the browser process).
   //
   // Return a WaylandWindow based on the |widget|.
-  WaylandWindow* GetWindow(gfx::AcceleratedWidget widget);
+  WaylandWindow* GetWindow(gfx::AcceleratedWidget widget) const;
   // Schedule flush in the Wayland message loop.
   void ScheduleFlush();
 
@@ -108,13 +108,13 @@ class WaylandConnectionProxy : public ozone::mojom::WaylandConnectionClient {
   // Returns a pointer to native display. When used in single process mode,
   // a wl_display pointer is returned. For the the mode, when there are GPU
   // and browser processes, EGL_DEFAULT_DISPLAY is returned.
-  intptr_t Display();
+  intptr_t Display() const;
 
   // Adds a WaylandConnectionClient binding.
   void AddBindingWaylandConnectionClient(
       ozone::mojom::WaylandConnectionClientRequest request);
 
-  WaylandConnection* connection() { return connection_; }
+  WaylandConnection* connection() const { return connection_; }
 
  private:
   void CreateZwpLinuxDmabufInternal(base::File file,
@@ -129,7 +129,7 @@ class WaylandConnectionProxy : public ozone::mojom::WaylandConnectionClient {
 
   // Non-owned pointer to a WaylandConnection. It is only used in a single
   // process mode, when a shared dmabuf approach is not used.
-  WaylandConnection* connection_ = nullptr;
+  WaylandConnection* const connection_;
 
 #if defined(WAYLAND_GBM)
   // A DRM render node based gbm device.
diff --git a/ui/ozone/platform/wayland/wayland_connection.cc b/ui/ozone/platform/wayland/wayland_connection.cc
index e7095507a83d..05e23b51a446 100644
--- a/ui/ozone/platform/wayland/wayland_connection.cc
+++ b/ui/ozone/platform/wayland/wayland_connection.cc
@@ -123,12 +123,13 @@ void WaylandConnection::ScheduleFlush() {
   scheduled_flush_ = true;
 }
 
-WaylandWindow* WaylandConnection::GetWindow(gfx::AcceleratedWidget widget) {
+WaylandWindow* WaylandConnection::GetWindow(
+    gfx::AcceleratedWidget widget) const {
   auto it = window_map_.find(widget);
   return it == window_map_.end() ? nullptr : it->second;
 }
 
-WaylandWindow* WaylandConnection::GetWindowWithLargestBounds() {
+WaylandWindow* WaylandConnection::GetWindowWithLargestBounds() const {
   WaylandWindow* window_with_largest_bounds = nullptr;
   for (auto entry : window_map_) {
     if (!window_with_largest_bounds) {
@@ -142,7 +143,7 @@ WaylandWindow* WaylandConnection::GetWindowWithLargestBounds() {
   return window_with_largest_bounds;
 }
 
-WaylandWindow* WaylandConnection::GetCurrentFocusedWindow() {
+WaylandWindow* WaylandConnection::GetCurrentFocusedWindow() const {
   for (auto entry : window_map_) {
     WaylandWindow* window = entry.second;
     if (window->has_pointer_focus())
@@ -151,7 +152,7 @@ WaylandWindow* WaylandConnection::GetCurrentFocusedWindow() {
   return nullptr;
 }
 
-WaylandWindow* WaylandConnection::GetCurrentKeyboardFocusedWindow() {
+WaylandWindow* WaylandConnection::GetCurrentKeyboardFocusedWindow() const {
   for (auto entry : window_map_) {
     WaylandWindow* window = entry.second;
     if (window->has_keyboard_focus())
@@ -178,7 +179,7 @@ void WaylandConnection::SetCursorBitmap(const std::vector<SkBitmap>& bitmaps,
   pointer_->cursor()->UpdateBitmap(bitmaps, location, serial_);
 }
 
-int WaylandConnection::GetKeyboardModifiers() {
+int WaylandConnection::GetKeyboardModifiers() const {
   int modifiers = 0;
   if (keyboard_)
     modifiers = keyboard_->modifiers();
diff --git a/ui/ozone/platform/wayland/wayland_connection.h b/ui/ozone/platform/wayland/wayland_connection.h
index c7da42b930dd..86228edc6bfe 100644
--- a/ui/ozone/platform/wayland/wayland_connection.h
+++ b/ui/ozone/platform/wayland/wayland_connection.h
@@ -82,45 +82,47 @@ class WaylandConnection : public PlatformEventSource,
   // Schedules a flush of the Wayland connection.
   void ScheduleFlush();
 
-  wl_display* display() { return display_.get(); }
-  wl_compositor* compositor() { return compositor_.get(); }
-  wl_subcompositor* subcompositor() { return subcompositor_.get(); }
-  wl_shm* shm() { return shm_.get(); }
+  wl_display* display() const { return display_.get(); }
+  wl_compositor* compositor() const { return compositor_.get(); }
+  wl_subcompositor* subcompositor() const { return subcompositor_.get(); }
+  wl_shm* shm() const { return shm_.get(); }
   xdg_shell* shell() const { return shell_.get(); }
   zxdg_shell_v6* shell_v6() const { return shell_v6_.get(); }
-  wl_seat* seat() { return seat_.get(); }
-  wl_data_device* data_device() { return data_device_->data_device(); }
+  wl_seat* seat() const { return seat_.get(); }
+  wl_data_device* data_device() const { return data_device_->data_device(); }
   wp_presentation* presentation() const { return presentation_.get(); }
-  zwp_text_input_manager_v1* text_input_manager_v1() {
+  zwp_text_input_manager_v1* text_input_manager_v1() const {
     return text_input_manager_v1_.get();
   }
 
-  WaylandWindow* GetWindow(gfx::AcceleratedWidget widget);
-  WaylandWindow* GetWindowWithLargestBounds();
-  WaylandWindow* GetCurrentFocusedWindow();
-  WaylandWindow* GetCurrentKeyboardFocusedWindow();
+  WaylandWindow* GetWindow(gfx::AcceleratedWidget widget) const;
+  WaylandWindow* GetWindowWithLargestBounds() const;
+  WaylandWindow* GetCurrentFocusedWindow() const;
+  WaylandWindow* GetCurrentKeyboardFocusedWindow() const;
   void AddWindow(gfx::AcceleratedWidget widget, WaylandWindow* window);
   void RemoveWindow(gfx::AcceleratedWidget widget);
 
   void set_serial(uint32_t serial) { serial_ = serial; }
-  uint32_t serial() { return serial_; }
+  uint32_t serial() const { return serial_; }
 
   void SetCursorBitmap(const std::vector<SkBitmap>& bitmaps,
                        const gfx::Point& location);
 
-  int GetKeyboardModifiers();
+  int GetKeyboardModifiers() const;
 
   // Returns the current pointer, which may be null.
-  WaylandPointer* pointer() { return pointer_.get(); }
+  WaylandPointer* pointer() const { return pointer_.get(); }
 
-  WaylandDataSource* drag_data_source() { return drag_data_source_.get(); }
+  WaylandDataSource* drag_data_source() const {
+    return drag_data_source_.get();
+  }
 
   WaylandOutputManager* wayland_output_manager() const {
     return wayland_output_manager_.get();
   }
 
   // Returns the cursor position, which may be null.
-  WaylandCursorPosition* wayland_cursor_position() {
+  WaylandCursorPosition* wayland_cursor_position() const {
     return wayland_cursor_position_.get();
   }
 
-- 
2.17.1

