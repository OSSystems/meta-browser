Upstream-Status: Backport

* Backported from the ToT: https://crrev.com/c/1408974

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From 4269fc2f389f7b79dfaabb9c957526b9880ce418 Mon Sep 17 00:00:00 2001
From: Maksim Sisov <msisov@igalia.com>
Date: Mon, 14 Jan 2019 16:49:52 +0000
Subject: [PATCH 04/16] [ozone/wayland]: Switch to wl_output version 2.

wl_output version 2 has some benefits over the previous
version we used to bind to: support of scale values
(in version 1, it always sends value 1), OutputDone
events, which notifies that changes WaylandOutput through that
OutputHandleGeometry, or OutputHandleMode, or OutputHandleScale
has been sent and it's time to notify WaylandOutput
clients about the changes.

Change-Id: I0ccf83357e755a29c30531bd6b7d2a3e13acfd3c
Bug: 875161
Reviewed-on: https://chromium-review.googlesource.com/c/1408974
Reviewed-by: Robert Kroeger <rjkroege@chromium.org>
Commit-Queue: Maksim Sisov <msisov@igalia.com>
Cr-Commit-Position: refs/heads/master@{#622479}
---
 ui/ozone/platform/wayland/wayland_connection.cc   | 12 +++++++++++-
 ui/ozone/platform/wayland/wayland_output.cc       | 15 ++++++---------
 .../platform/wayland/wayland_output_manager.cc    |  6 +++---
 .../platform/wayland/wayland_screen_unittest.cc   |  2 ++
 4 files changed, 22 insertions(+), 13 deletions(-)

diff --git a/ui/ozone/platform/wayland/wayland_connection.cc b/ui/ozone/platform/wayland/wayland_connection.cc
index 12d029df644c..03e8135b8c13 100644
--- a/ui/ozone/platform/wayland/wayland_connection.cc
+++ b/ui/ozone/platform/wayland/wayland_connection.cc
@@ -35,6 +35,8 @@ constexpr uint32_t kMaxDeviceManagerVersion = 3;
 constexpr uint32_t kMaxWpPresentationVersion = 1;
 constexpr uint32_t kMaxTextInputManagerVersion = 1;
 
+constexpr uint32_t kMinWlOutputVersion = 2;
+
 std::unique_ptr<WaylandDataSource> CreateWaylandDataSource(
     WaylandDataDeviceManager* data_device_manager,
     WaylandConnection* connection) {
@@ -418,7 +420,15 @@ void WaylandConnection::Global(void* data,
     xdg_shell_use_unstable_version(connection->shell_.get(),
                                    XDG_SHELL_VERSION_CURRENT);
   } else if (base::EqualsCaseInsensitiveASCII(interface, "wl_output")) {
-    wl::Object<wl_output> output = wl::Bind<wl_output>(registry, name, 1);
+    if (version < kMinWlOutputVersion) {
+      LOG(ERROR)
+          << "Unable to bind to the unsupported wl_output object with version= "
+          << version << ". Minimum supported version is "
+          << kMinWlOutputVersion;
+      return;
+    }
+
+    wl::Object<wl_output> output = wl::Bind<wl_output>(registry, name, version);
     if (!output) {
       LOG(ERROR) << "Failed to bind to wl_output global";
       return;
diff --git a/ui/ozone/platform/wayland/wayland_output.cc b/ui/ozone/platform/wayland/wayland_output.cc
index fd14f45d6332..91cdf2c43bf5 100644
--- a/ui/ozone/platform/wayland/wayland_output.cc
+++ b/ui/ozone/platform/wayland/wayland_output.cc
@@ -63,16 +63,15 @@ void WaylandOutput::OutputHandleMode(void* data,
                                      int32_t height,
                                      int32_t refresh) {
   WaylandOutput* wayland_output = static_cast<WaylandOutput*>(data);
-  if (wayland_output && (flags & WL_OUTPUT_MODE_CURRENT)) {
-    wayland_output->rect_in_physical_pixels_.set_width(width);
-    wayland_output->rect_in_physical_pixels_.set_height(height);
-    wayland_output->TriggerDelegateNotification();
-  }
+  if (wayland_output && (flags & WL_OUTPUT_MODE_CURRENT))
+    wayland_output->rect_in_physical_pixels_.set_size(gfx::Size(width, height));
 }
 
 // static
 void WaylandOutput::OutputHandleDone(void* data, struct wl_output* wl_output) {
-  NOTIMPLEMENTED_LOG_ONCE();
+  WaylandOutput* wayland_output = static_cast<WaylandOutput*>(data);
+  if (wayland_output)
+    wayland_output->TriggerDelegateNotification();
 }
 
 // static
@@ -80,10 +79,8 @@ void WaylandOutput::OutputHandleScale(void* data,
                                       struct wl_output* wl_output,
                                       int32_t factor) {
   WaylandOutput* wayland_output = static_cast<WaylandOutput*>(data);
-  if (wayland_output) {
+  if (wayland_output)
     wayland_output->device_scale_factor_ = factor;
-    wayland_output->TriggerDelegateNotification();
-  }
 }
 
 }  // namespace ui
diff --git a/ui/ozone/platform/wayland/wayland_output_manager.cc b/ui/ozone/platform/wayland/wayland_output_manager.cc
index 8c3b59948970..82fe00a49d40 100644
--- a/ui/ozone/platform/wayland/wayland_output_manager.cc
+++ b/ui/ozone/platform/wayland/wayland_output_manager.cc
@@ -38,9 +38,9 @@ void WaylandOutputManager::AddWaylandOutput(const uint32_t output_id,
 
   OnWaylandOutputAdded(output_id);
 
-  // If WaylandScreen has already been created, the output can be initialized,
-  // which results in setting up a wl_listener and getting the geometry and the
-  // scaling factor from the Wayland Compositor.
+  // Even if WaylandScreen has not been created, the output still must be
+  // initialized, which results in setting up a wl_listener and getting the
+  // geometry and the scaling factor from the Wayland Compositor.
   wayland_output_ptr->Initialize(this);
 }
 
diff --git a/ui/ozone/platform/wayland/wayland_screen_unittest.cc b/ui/ozone/platform/wayland/wayland_screen_unittest.cc
index ad51723cf5cd..a84af11d06a3 100644
--- a/ui/ozone/platform/wayland/wayland_screen_unittest.cc
+++ b/ui/ozone/platform/wayland/wayland_screen_unittest.cc
@@ -170,6 +170,7 @@ TEST_P(WaylandScreenTest, OutputPropertyChanges) {
                           0 /* transform */);
   wl_output_send_mode(output_->resource(), WL_OUTPUT_MODE_CURRENT,
                       new_rect.width(), new_rect.height(), 0 /* refresh */);
+  wl_output_send_done(output_->resource());
 
   Sync();
 
@@ -181,6 +182,7 @@ TEST_P(WaylandScreenTest, OutputPropertyChanges) {
 
   const float new_scale_value = 2.0f;
   wl_output_send_scale(output_->resource(), new_scale_value);
+  wl_output_send_done(output_->resource());
 
   Sync();
 
-- 
2.17.1

