Upstream-Status: Backport

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From 25fb1b2b98781e4508ad29f7469f39c502ea5112 Mon Sep 17 00:00:00 2001
From: Maksim Sisov <msisov@igalia.com>
Date: Mon, 11 Mar 2019 08:12:17 +0000
Subject: [PATCH 01/27] [ozone/wayland] add CreateSurfaceCheckGbm test

This test verifies that GLOzone does not try to create
SurfacelessViewGL if GbmDevice is not available.

R=rjkroege@chromium.org

Bug: 934253
Change-Id: I1ac7d5c7323b06e52badbeae95ec975610f38bc9
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/1505332
Commit-Queue: Maksim Sisov <msisov@igalia.com>
Reviewed-by: Robert Kroeger <rjkroege@chromium.org>
Cr-Commit-Position: refs/heads/master@{#639422}
---
 ui/ozone/platform/wayland/BUILD.gn            |  11 +-
 .../wayland/wayland_surface_factory.cc        |  18 +--
 .../wayland_surface_factory_unittest.cc       | 117 ++++++++++++++++--
 3 files changed, 125 insertions(+), 21 deletions(-)

diff --git a/ui/ozone/platform/wayland/BUILD.gn b/ui/ozone/platform/wayland/BUILD.gn
index 952e0c921c62..3ad856f393aa 100644
--- a/ui/ozone/platform/wayland/BUILD.gn
+++ b/ui/ozone/platform/wayland/BUILD.gn
@@ -223,6 +223,8 @@ source_set("test_support") {
 source_set("wayland_unittests") {
   testonly = true
 
+  assert(use_wayland_gbm)
+
   sources = [
     "wayland_buffer_manager_unittest.cc",
     "wayland_connection_unittest.cc",
@@ -254,6 +256,7 @@ source_set("wayland_unittests") {
     "//ui/events/ozone:events_ozone_layout",
     "//ui/ozone:platform",
     "//ui/ozone:test_support",
+    "//ui/ozone/common/linux:gbm",
   ]
 
   import("//ui/base/ui_features.gni")
@@ -261,10 +264,10 @@ source_set("wayland_unittests") {
     deps += [ "//ui/events/keycodes:xkb" ]
   }
 
-  defines = [ "WL_HIDE_DEPRECATED" ]
-  if (use_wayland_gbm) {
-    defines += [ "WAYLAND_GBM" ]
-  }
+  defines = [
+    "WL_HIDE_DEPRECATED",
+    "WAYLAND_GBM",
+  ]
 }
 
 fuzzer_test("wayland_buffer_fuzzer") {
diff --git a/ui/ozone/platform/wayland/wayland_surface_factory.cc b/ui/ozone/platform/wayland/wayland_surface_factory.cc
index f3f49a2d5968..65d87821651f 100644
--- a/ui/ozone/platform/wayland/wayland_surface_factory.cc
+++ b/ui/ozone/platform/wayland/wayland_surface_factory.cc
@@ -28,8 +28,9 @@ namespace {
 
 class GLOzoneEGLWayland : public GLOzoneEGL {
  public:
-  explicit GLOzoneEGLWayland(WaylandConnectionProxy* connection)
-      : connection_(connection) {}
+  GLOzoneEGLWayland(WaylandConnectionProxy* connection,
+                    WaylandSurfaceFactory* factory)
+      : connection_(connection), factory_(factory) {}
   ~GLOzoneEGLWayland() override {}
 
   scoped_refptr<gl::GLSurface> CreateViewGLSurface(
@@ -46,7 +47,8 @@ class GLOzoneEGLWayland : public GLOzoneEGL {
   bool LoadGLES2Bindings(gl::GLImplementation impl) override;
 
  private:
-  WaylandConnectionProxy* connection_ = nullptr;
+  WaylandConnectionProxy* const connection_;
+  WaylandSurfaceFactory* const factory_;
 
   DISALLOW_COPY_AND_ASSIGN(GLOzoneEGLWayland);
 };
@@ -72,6 +74,8 @@ scoped_refptr<gl::GLSurface> GLOzoneEGLWayland::CreateViewGLSurface(
 
 scoped_refptr<gl::GLSurface> GLOzoneEGLWayland::CreateSurfacelessViewGLSurface(
     gfx::AcceleratedWidget window) {
+  DCHECK(factory_);
+
   // Only EGLGLES2 is supported with surfaceless view gl.
   if (gl::GetGLImplementation() != gl::kGLImplementationEGLGLES2)
     return nullptr;
@@ -80,10 +84,7 @@ scoped_refptr<gl::GLSurface> GLOzoneEGLWayland::CreateSurfacelessViewGLSurface(
   // If there is a gbm device available, use surfaceless gl surface.
   if (!connection_->gbm_device())
     return nullptr;
-  return gl::InitializeGLSurface(new GbmSurfacelessWayland(
-      static_cast<WaylandSurfaceFactory*>(
-          OzonePlatform::GetInstance()->GetSurfaceFactoryOzone()),
-      window));
+  return gl::InitializeGLSurface(new GbmSurfacelessWayland(factory_, window));
 #else
   return nullptr;
 #endif
@@ -115,7 +116,8 @@ bool GLOzoneEGLWayland::LoadGLES2Bindings(gl::GLImplementation impl) {
 WaylandSurfaceFactory::WaylandSurfaceFactory(WaylandConnectionProxy* connection)
     : connection_(connection) {
   if (connection_)
-    egl_implementation_ = std::make_unique<GLOzoneEGLWayland>(connection_);
+    egl_implementation_ =
+        std::make_unique<GLOzoneEGLWayland>(connection_, this);
 }
 
 WaylandSurfaceFactory::~WaylandSurfaceFactory() {}
diff --git a/ui/ozone/platform/wayland/wayland_surface_factory_unittest.cc b/ui/ozone/platform/wayland/wayland_surface_factory_unittest.cc
index 3819f707bb79..87861f4649d3 100644
--- a/ui/ozone/platform/wayland/wayland_surface_factory_unittest.cc
+++ b/ui/ozone/platform/wayland/wayland_surface_factory_unittest.cc
@@ -7,6 +7,9 @@
 #include "base/run_loop.h"
 #include "testing/gtest/include/gtest/gtest.h"
 #include "third_party/skia/include/core/SkSurface.h"
+#include "ui/ozone/common/linux/gbm_buffer.h"
+#include "ui/ozone/common/linux/gbm_device.h"
+#include "ui/ozone/platform/wayland/gpu/wayland_connection_proxy.h"
 #include "ui/ozone/platform/wayland/test/mock_surface.h"
 #include "ui/ozone/platform/wayland/test/test_wayland_server_thread.h"
 #include "ui/ozone/platform/wayland/wayland_surface_factory.h"
@@ -21,9 +24,72 @@ using ::testing::_;
 
 namespace ui {
 
+namespace {
+
+class FakeGbmBuffer : public GbmBuffer {
+ public:
+  FakeGbmBuffer() = default;
+  ~FakeGbmBuffer() override = default;
+
+  uint32_t GetFormat() const override { return 0; }
+  uint64_t GetFormatModifier() const override { return 0; }
+  uint32_t GetFlags() const override { return 0; }
+  gfx::Size GetSize() const override { return gfx::Size(); }
+  gfx::BufferFormat GetBufferFormat() const override {
+    return gfx::BufferFormat::BGRA_8888;
+  }
+  bool AreFdsValid() const override { return false; }
+  size_t GetNumPlanes() const override { return 0; }
+  int GetPlaneFd(size_t plane) const override { return -1; }
+  uint32_t GetPlaneHandle(size_t plane) const override { return 0; }
+  int GetPlaneStride(size_t plane) const override { return -1; }
+  int GetPlaneOffset(size_t plane) const override { return -1; }
+  size_t GetPlaneSize(size_t plane) const override { return 0; }
+  uint32_t GetHandle() const override { return 0; }
+  gfx::NativePixmapHandle ExportHandle() const override {
+    return gfx::NativePixmapHandle();
+  }
+  sk_sp<SkSurface> GetSurface() override { return nullptr; }
+
+ private:
+  DISALLOW_COPY_AND_ASSIGN(FakeGbmBuffer);
+};
+
+class FakeGbmDevice : public GbmDevice {
+ public:
+  FakeGbmDevice() = default;
+  ~FakeGbmDevice() override = default;
+
+  std::unique_ptr<GbmBuffer> CreateBuffer(uint32_t format,
+                                          const gfx::Size& size,
+                                          uint32_t flags) override {
+    return nullptr;
+  }
+
+  std::unique_ptr<GbmBuffer> CreateBufferWithModifiers(
+      uint32_t format,
+      const gfx::Size& size,
+      uint32_t flags,
+      const std::vector<uint64_t>& modifiers) override {
+    return nullptr;
+  }
+  std::unique_ptr<GbmBuffer> CreateBufferFromFds(
+      uint32_t format,
+      const gfx::Size& size,
+      std::vector<base::ScopedFD> fds,
+      const std::vector<gfx::NativePixmapPlane>& planes) override {
+    return nullptr;
+  }
+
+ private:
+  DISALLOW_COPY_AND_ASSIGN(FakeGbmDevice);
+};
+
+}  // namespace
+
 class WaylandSurfaceFactoryTest : public WaylandTest {
  public:
-  WaylandSurfaceFactoryTest() : surface_factory(connection_proxy_.get()) {}
+  WaylandSurfaceFactoryTest() : surface_factory_(connection_proxy_.get()) {}
 
   ~WaylandSurfaceFactoryTest() override {}
 
@@ -33,30 +99,35 @@ class WaylandSurfaceFactoryTest : public WaylandTest {
     auto connection_ptr = connection_->BindInterface();
     connection_proxy_->SetWaylandConnection(std::move(connection_ptr));
 
-    canvas = surface_factory.CreateCanvasForWidget(widget_);
-    ASSERT_TRUE(canvas);
-
     // Wait until initialization and mojo calls go through.
     base::RunLoop().RunUntilIdle();
   }
 
   void TearDown() override {
-    canvas.reset();
-
-    // The mojo call to destroy shared buffer goes after canvas is destroyed.
+    // The mojo call to destroy shared buffer goes after surfaces are destroyed.
     // Wait until it's done.
     base::RunLoop().RunUntilIdle();
   }
 
  protected:
-  WaylandSurfaceFactory surface_factory;
-  std::unique_ptr<SurfaceOzoneCanvas> canvas;
+  std::unique_ptr<SurfaceOzoneCanvas> CreateCanvas(
+      gfx::AcceleratedWidget widget) {
+    auto canvas = surface_factory_.CreateCanvasForWidget(widget_);
+    base::RunLoop().RunUntilIdle();
+
+    return canvas;
+  }
+
+  WaylandSurfaceFactory surface_factory_;
 
  private:
   DISALLOW_COPY_AND_ASSIGN(WaylandSurfaceFactoryTest);
 };
 
 TEST_P(WaylandSurfaceFactoryTest, Canvas) {
+  auto canvas = CreateCanvas(widget_);
+  ASSERT_TRUE(canvas);
+
   canvas->ResizeCanvas(window_->GetBounds().size());
   canvas->GetSurface();
   canvas->PresentCanvas(gfx::Rect(5, 10, 20, 15));
@@ -83,6 +154,9 @@ TEST_P(WaylandSurfaceFactoryTest, Canvas) {
 }
 
 TEST_P(WaylandSurfaceFactoryTest, CanvasResize) {
+  auto canvas = CreateCanvas(widget_);
+  ASSERT_TRUE(canvas);
+
   canvas->ResizeCanvas(window_->GetBounds().size());
   canvas->GetSurface();
   canvas->ResizeCanvas(gfx::Size(100, 50));
@@ -106,6 +180,31 @@ TEST_P(WaylandSurfaceFactoryTest, CanvasResize) {
   EXPECT_EQ(wl_shm_buffer_get_height(buffer), 50);
 }
 
+TEST_P(WaylandSurfaceFactoryTest, CreateSurfaceCheckGbm) {
+  gl::SetGLImplementation(gl::kGLImplementationEGLGLES2);
+
+  // When gbm is not available, only canvas can be created with viz process
+  // used.
+  EXPECT_FALSE(connection_proxy_->gbm_device());
+
+  auto* gl_ozone = surface_factory_.GetGLOzone(gl::kGLImplementationEGLGLES2);
+  EXPECT_TRUE(gl_ozone);
+  auto gl_surface = gl_ozone->CreateSurfacelessViewGLSurface(widget_);
+  EXPECT_FALSE(gl_surface);
+
+  // Now, set gbm.
+  connection_proxy_->set_gbm_device(std::make_unique<FakeGbmDevice>());
+
+  gl_surface = gl_ozone->CreateSurfacelessViewGLSurface(widget_);
+  EXPECT_TRUE(gl_surface);
+
+  // Reset gbm now. WaylandConnectionProxy can reset it when zwp is not
+  // available. And factory must behave the same way as previously.
+  connection_proxy_->ResetGbmDevice();
+  gl_surface = gl_ozone->CreateSurfacelessViewGLSurface(widget_);
+  EXPECT_FALSE(gl_surface);
+}
+
 INSTANTIATE_TEST_SUITE_P(XdgVersionV5Test,
                          WaylandSurfaceFactoryTest,
                          ::testing::Values(kXdgShellV5));
-- 
2.20.1

