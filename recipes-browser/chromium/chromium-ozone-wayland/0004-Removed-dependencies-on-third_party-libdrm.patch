Upstream-Status: Backport

* Backported from the ToT: https://crrev.com/c/1265902

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From 59b1bf7e04912ddcb5d626bbc9d246a6d63bfb78 Mon Sep 17 00:00:00 2001
From: Shawn Gallea <sagallea@google.com>
Date: Fri, 12 Oct 2018 23:33:57 +0000
Subject: [PATCH 04/17] Removed dependencies on
 //third_party/libdrm.

Files will now depend on //build/config/linux/libdrm.
This is needed for the eventual removal of //third_party/libdrm.

Bug: b/74068068
Test: Compiled EXO on ChromeOS and verified it still builds and runs.
Change-Id: Ib321992cda0de764e8db5c3db63f9f5b4bc93049
Reviewed-on: https://chromium-review.googlesource.com/c/1265902
Commit-Queue: Shawn Gallea <sagallea@google.com>
Reviewed-by: Daniel Nicoara <dnicoara@chromium.org>
Reviewed-by: Alex Sakhartchouk <alexst@chromium.org>
Reviewed-by: Thomas Anderson <thomasanderson@chromium.org>
Reviewed-by: Miguel Casas <mcasas@chromium.org>
Reviewed-by: Maksim Sisov <msisov@igalia.com>
Reviewed-by: Daniele Castagna <dcastagna@chromium.org>
Cr-Commit-Position: refs/heads/master@{#599413}
---
 build/config/linux/libdrm/BUILD.gn |  33 +++++++
 components/exo/wayland/BUILD.gn    |  59 +++++-------
 media/capture/BUILD.gn             |   4 +-
 third_party/libdrm/BUILD.gn        | 145 ++++++++++++-----------------
 third_party/minigbm/BUILD.gn       |   4 +-
 ui/gfx/BUILD.gn                    |   2 +-
 ui/ozone/common/linux/BUILD.gn     |   2 +-
 ui/ozone/platform/drm/BUILD.gn     |   4 +-
 ui/ozone/platform/wayland/BUILD.gn |   4 +-
 9 files changed, 127 insertions(+), 130 deletions(-)
 create mode 100644 build/config/linux/libdrm/BUILD.gn

diff --git a/build/config/linux/libdrm/BUILD.gn b/build/config/linux/libdrm/BUILD.gn
new file mode 100644
index 000000000000..daebcfd3a43e
--- /dev/null
+++ b/build/config/linux/libdrm/BUILD.gn
@@ -0,0 +1,33 @@
+# Copyright 2018 The Chromium Authors. All rights reserved.
+# Use of this source code is governed by a BSD-style license that can be
+# found in the LICENSE file.
+import("//build/config/linux/pkg_config.gni")
+
+assert(is_linux)
+
+declare_args() {
+  # Controls whether the build should use the version of libdrm
+  # library shipped with the system. In release builds of Chrome OS we
+  # use the system version, but when building on dev workstations we
+  # bundle it because Ubuntu doesn't ship a usable version.
+  # Chromecast will use this as well.
+  use_system_libdrm = false
+}
+
+if (use_system_libdrm) {
+  pkg_config("libdrm_config") {
+    packages = [ "libdrm" ]
+  }
+  group("libdrm") {
+    public_configs = [ ":libdrm_config" ]
+  }
+} else {
+  group("libdrm") {
+    public_deps = [
+      "//third_party/libdrm",
+    ]
+  }
+  config("libdrm_exynos_include_config") {
+    include_dirs = [ "//third_party/libdrm/src/exynos" ]
+  }
+}
diff --git a/components/exo/wayland/BUILD.gn b/components/exo/wayland/BUILD.gn
index 579d2f4d80f0..739dfbe61bf5 100644
--- a/components/exo/wayland/BUILD.gn
+++ b/components/exo/wayland/BUILD.gn
@@ -20,9 +20,6 @@ if (use_xkbcommon) {
 }
 
 if (use_ozone) {
-  pkg_config("libdrm") {
-    packages = [ "libdrm" ]
-  }
   if (enable_vulkan_wayland_client) {
     pkg_config("vulkan") {
       packages = [ "vulkan" ]
@@ -77,8 +74,10 @@ source_set("wayland") {
   ]
 
   if (use_ozone) {
-    deps += [ "//third_party/wayland-protocols:linux_dmabuf_protocol" ]
-    configs += [ ":libdrm" ]
+    deps += [
+      "//build/config/linux/libdrm",
+      "//third_party/wayland-protocols:linux_dmabuf_protocol",
+    ]
 
     if (is_chromeos) {
       deps += [ "//ui/events/ozone:events_ozone_layout" ]
@@ -142,14 +141,14 @@ source_set("client_support") {
   ]
 
   if (ozone_platform_gbm) {
-    configs += [
-      ":libdrm",
-      "//ui/gl:gl_config",
-    ]
+    configs += [ "//ui/gl:gl_config" ]
     if (enable_vulkan_wayland_client) {
       configs += [ ":vulkan" ]
     }
-    deps += [ "//ui/ozone" ]
+    deps += [
+      "//build/config/linux/libdrm",
+      "//ui/ozone",
+    ]
     public_deps += [ "//third_party/minigbm" ]
   }
 
@@ -174,12 +173,12 @@ executable("wayland_rects_client") {
   ]
 
   if (ozone_platform_gbm) {
-    configs += [
-      ":libdrm",
-      "//ui/gl:gl_config",
-    ]
+    configs += [ "//ui/gl:gl_config" ]
     defines = [ "USE_GBM" ]
-    deps += [ "//third_party/minigbm" ]
+    deps += [
+      "//build/config/linux/libdrm",
+      "//third_party/minigbm",
+    ]
   }
 }
 
@@ -192,6 +191,7 @@ source_set("simple") {
   deps = [
     ":client_support",
     "//base",
+    "//build/config/linux/libdrm",
     "//skia",
     "//third_party/wayland:wayland_client",
     "//third_party/wayland-protocols:linux_dmabuf_protocol",
@@ -201,10 +201,7 @@ source_set("simple") {
   ]
 
   if (ozone_platform_gbm) {
-    configs += [
-      ":libdrm",
-      "//ui/gl:gl_config",
-    ]
+    configs += [ "//ui/gl:gl_config" ]
   }
 }
 
@@ -227,6 +224,7 @@ executable("wayland_subsurface_client") {
   deps = [
     ":client_support",
     "//base",
+    "//build/config/linux/libdrm",
     "//skia",
     "//third_party/wayland:wayland_client",
     "//third_party/wayland-protocols:linux_dmabuf_protocol",
@@ -236,10 +234,7 @@ executable("wayland_subsurface_client") {
   ]
 
   if (ozone_platform_gbm) {
-    configs += [
-      ":libdrm",
-      "//ui/gl:gl_config",
-    ]
+    configs += [ "//ui/gl:gl_config" ]
   }
 }
 
@@ -252,6 +247,7 @@ source_set("blur") {
   deps = [
     ":client_support",
     "//base",
+    "//build/config/linux/libdrm",
     "//skia",
     "//third_party/wayland:wayland_client",
     "//ui/gfx/geometry",
@@ -259,10 +255,7 @@ source_set("blur") {
   ]
 
   if (ozone_platform_gbm) {
-    configs += [
-      ":libdrm",
-      "//ui/gl:gl_config",
-    ]
+    configs += [ "//ui/gl:gl_config" ]
   }
 }
 
@@ -340,6 +333,7 @@ if (ozone_platform_gbm) {
     deps = [
       ":client_support",
       "//base",
+      "//build/config/linux/libdrm",
       "//skia",
       "//third_party/wayland:wayland_client",
       "//third_party/wayland-protocols:linux_dmabuf_protocol",
@@ -347,10 +341,7 @@ if (ozone_platform_gbm) {
       "//ui/gfx/geometry",
     ]
 
-    configs += [
-      ":libdrm",
-      "//ui/gl:gl_config",
-    ]
+    configs += [ "//ui/gl:gl_config" ]
     deps += [ "//third_party/minigbm" ]
   }
   if (enable_vulkan_wayland_client) {
@@ -362,6 +353,7 @@ if (ozone_platform_gbm) {
       deps = [
         ":client_support",
         "//base",
+        "//build/config/linux/libdrm",
         "//skia",
         "//third_party/wayland:wayland_client",
         "//third_party/wayland-protocols:linux_dmabuf_protocol",
@@ -369,10 +361,7 @@ if (ozone_platform_gbm) {
         "//ui/gfx/geometry",
       ]
 
-      configs += [
-        ":libdrm",
-        "//ui/gl:gl_config",
-      ]
+      configs += [ "//ui/gl:gl_config" ]
       deps += [ "//third_party/minigbm" ]
     }
   }
diff --git a/media/capture/BUILD.gn b/media/capture/BUILD.gn
index 4070f828ca02..43eb62bf1c5d 100644
--- a/media/capture/BUILD.gn
+++ b/media/capture/BUILD.gn
@@ -267,9 +267,9 @@ jumbo_component("capture_lib") {
     ]
     public_deps += [ "//media/capture/video/chromeos/public" ]
     deps += [
+      "//build/config/linux/libdrm",
       "//chromeos:chromeos",
       "//media/capture/video/chromeos/mojo:cros_camera",
-      "//third_party/libdrm",
       "//third_party/libsync",
     ]
   }
@@ -391,10 +391,10 @@ test("capture_unittests") {
       "video/chromeos/stream_buffer_manager_unittest.cc",
     ]
     deps += [
+      "//build/config/linux/libdrm",
       "//chromeos:chromeos",
       "//media/capture/video/chromeos/mojo:cros_camera",
       "//mojo/core/embedder",
-      "//third_party/libdrm",
       "//third_party/libsync",
       "//third_party/minigbm",
     ]
diff --git a/third_party/libdrm/BUILD.gn b/third_party/libdrm/BUILD.gn
index 97b6505b20c7..a3fed9d6949e 100644
--- a/third_party/libdrm/BUILD.gn
+++ b/third_party/libdrm/BUILD.gn
@@ -1,100 +1,75 @@
 # Copyright 2016 The Chromium Authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
-import("//build/config/linux/pkg_config.gni")
-
 assert(is_linux)
 
-declare_args() {
-  # Controls whether the build should use the version of libdrm
-  # library shipped with the system. In release builds of Chrome OS we
-  # use the system version, but when building on dev workstations we
-  # bundle it because Ubuntu doesn't ship a usable version.
-  use_system_libdrm = false
-}
-
-if (!use_system_libdrm) {
-  config("libdrm_config") {
-    # TODO(thomasanderson): Remove this hack once
-    # https://patchwork.kernel.org/patch/10545295/ lands.
-    defines = [ "typeof(x)=__typeof__(x)" ]
+config("libdrm_config") {
+  # TODO(thomasanderson): Remove this hack once
+  # https://patchwork.kernel.org/patch/10545295/ lands.
+  defines = [ "typeof(x)=__typeof__(x)" ]
 
-    include_dirs = [
-      "src",
-      "src/include",
-      "src/include/drm",
-    ]
+  include_dirs = [
+    "src",
+    "src/include",
+    "src/include/drm",
+  ]
 
-    # libdrm uses macros defined by <sys/types.h> which are being moved to
-    # <sys/sysmacros.h>.  GLIBC headers give a pragma warning in this case.
-    # Suppress this warning for now.  This may be removed once
-    # https://patchwork.kernel.org/patch/9628231/ lands.
-    cflags = [ "-Wno-#pragma-messages" ]
-    if (is_clang) {
-      cflags += [ "-Wno-enum-conversion" ]
-    }
-  }
-
-  config("libdrm_exynos_include_config") {
-    include_dirs = [ "//third_party/libdrm/src/exynos" ]
+  # libdrm uses macros defined by <sys/types.h> which are being moved to
+  # <sys/sysmacros.h>.  GLIBC headers give a pragma warning in this case.
+  # Suppress this warning for now.  This may be removed once
+  # https://patchwork.kernel.org/patch/9628231/ lands.
+  cflags = [ "-Wno-#pragma-messages" ]
+  if (is_clang) {
+    cflags += [ "-Wno-enum-conversion" ]
   }
+}
 
-  static_library("libdrm") {
-    sources = [
-      "src/xf86drm.c",
-      "src/xf86drmHash.c",
-      "src/xf86drmMode.c",
-      "src/xf86drmRandom.c",
-    ]
+static_library("libdrm") {
+  sources = [
+    "src/xf86drm.c",
+    "src/xf86drmHash.c",
+    "src/xf86drmMode.c",
+    "src/xf86drmRandom.c",
+  ]
 
-    include_dirs = [
-      "src",
-      "src/include",
-    ]
-    configs -= [ "//build/config/compiler:chromium_code" ]
-    configs += [ "//build/config/compiler:no_chromium_code" ]
-    cflags = [
-      # xf86drm.c uses readdir_r, which has been deprecated as of
-      # glibc-2.24.  This causes a build error when using the Debian
-      # Stretch sysroot.
-      "-Wno-deprecated-declarations",
-    ]
+  include_dirs = [
+    "src",
+    "src/include",
+  ]
+  configs -= [ "//build/config/compiler:chromium_code" ]
+  configs += [ "//build/config/compiler:no_chromium_code" ]
+  cflags = [
+    # xf86drm.c uses readdir_r, which has been deprecated as of
+    # glibc-2.24.  This causes a build error when using the Debian
+    # Stretch sysroot.
+    "-Wno-deprecated-declarations",
+  ]
 
-    public_configs = [ ":libdrm_config" ]
-  }
-
-  executable("modetest") {
-    sources = [
-      "src/tests/modetest/buffers.c",
-      "src/tests/modetest/buffers.h",
-      "src/tests/modetest/cursor.c",
-      "src/tests/modetest/cursor.h",
-      "src/tests/modetest/modetest.c",
-      "src/tests/util/common.h",
-      "src/tests/util/format.c",
-      "src/tests/util/format.h",
-      "src/tests/util/kms.c",
-      "src/tests/util/kms.h",
-      "src/tests/util/pattern.c",
-      "src/tests/util/pattern.h",
-    ]
+  public_configs = [ ":libdrm_config" ]
+}
 
-    include_dirs = [
-      "src/tests",
-      "src/tests/modetest",
-    ]
+executable("modetest") {
+  sources = [
+    "src/tests/modetest/buffers.c",
+    "src/tests/modetest/buffers.h",
+    "src/tests/modetest/cursor.c",
+    "src/tests/modetest/cursor.h",
+    "src/tests/modetest/modetest.c",
+    "src/tests/util/common.h",
+    "src/tests/util/format.c",
+    "src/tests/util/format.h",
+    "src/tests/util/kms.c",
+    "src/tests/util/kms.h",
+    "src/tests/util/pattern.c",
+    "src/tests/util/pattern.h",
+  ]
 
-    deps = [
-      ":libdrm",
-    ]
-  }
-}
+  include_dirs = [
+    "src/tests",
+    "src/tests/modetest",
+  ]
 
-if (use_system_libdrm) {
-  pkg_config("libdrm_config") {
-    packages = [ "libdrm" ]
-  }
-  group("libdrm") {
-    public_configs = [ ":libdrm_config" ]
-  }
+  deps = [
+    ":libdrm",
+  ]
 }
diff --git a/third_party/minigbm/BUILD.gn b/third_party/minigbm/BUILD.gn
index ab0ff8a60abe..c31473dbfc00 100644
--- a/third_party/minigbm/BUILD.gn
+++ b/third_party/minigbm/BUILD.gn
@@ -94,12 +94,12 @@ if (!use_system_minigbm) {
     configs += [ "//build/config/compiler:no_chromium_code" ]
 
     deps = [
-      "//third_party/libdrm",
+      "//build/config/linux/libdrm",
     ]
     public_configs = [ ":minigbm_config" ]
 
     if (use_exynos_minigbm) {
-      configs += [ "//third_party/libdrm:libdrm_exynos_include_config" ]
+      configs += [ "//build/config/linux/libdrm:libdrm_exynos_include_config" ]
     }
 
     # Clients need this to pick up the shared library correctly.
diff --git a/ui/gfx/BUILD.gn b/ui/gfx/BUILD.gn
index b9e0290dba2c..319ff84eff1d 100644
--- a/ui/gfx/BUILD.gn
+++ b/ui/gfx/BUILD.gn
@@ -539,7 +539,7 @@ jumbo_source_set("memory_buffer_sources") {
       "linux/native_pixmap_dmabuf.h",
     ]
 
-    deps += [ "//third_party/libdrm" ]
+    deps += [ "//build/config/linux/libdrm" ]
   }
 
   if (is_linux || is_android) {
diff --git a/ui/ozone/common/linux/BUILD.gn b/ui/ozone/common/linux/BUILD.gn
index 0d62943e901a..3e9592901274 100644
--- a/ui/ozone/common/linux/BUILD.gn
+++ b/ui/ozone/common/linux/BUILD.gn
@@ -18,7 +18,7 @@ source_set("linux") {
 
   deps = [
     "//base:base",
-    "//third_party/libdrm",
+    "//build/config/linux/libdrm",
     "//third_party/minigbm",
     "//ui/gfx:buffer_types",
     "//ui/gfx:memory_buffer",
diff --git a/ui/ozone/platform/drm/BUILD.gn b/ui/ozone/platform/drm/BUILD.gn
index e1bfe916873e..490835ced411 100644
--- a/ui/ozone/platform/drm/BUILD.gn
+++ b/ui/ozone/platform/drm/BUILD.gn
@@ -120,13 +120,13 @@ source_set("gbm") {
 
   deps = [
     "//base",
+    "//build/config/linux/libdrm",
     "//gpu/vulkan:buildflags",
     "//ipc",
     "//mojo/public/cpp/system",
     "//services/service_manager/public/cpp",
     "//services/ws/public/mojom:constants",
     "//skia",
-    "//third_party/libdrm",
     "//third_party/libsync",
     "//third_party/minigbm",
     "//ui/base",
@@ -185,9 +185,9 @@ source_set("gbm_unittests") {
   deps = [
     ":gbm",
     "//base/test:test_support",
+    "//build/config/linux/libdrm",
     "//skia",
     "//testing/gtest",
-    "//third_party/libdrm",
     "//ui/gfx",
     "//ui/ozone:platform",
     "//ui/ozone/common",
diff --git a/ui/ozone/platform/wayland/BUILD.gn b/ui/ozone/platform/wayland/BUILD.gn
index 9740ad91b26e..4578b8005db7 100644
--- a/ui/ozone/platform/wayland/BUILD.gn
+++ b/ui/ozone/platform/wayland/BUILD.gn
@@ -88,9 +88,9 @@ source_set("wayland") {
 
   deps = [
     "//base",
+    "//build/config/linux/libdrm",
     "//mojo/public/cpp/bindings",
     "//skia",
-    "//third_party/libdrm",
     "//third_party/minigbm",
     "//third_party/wayland:wayland_client",
     "//third_party/wayland-protocols:linux_dmabuf_protocol",
@@ -135,7 +135,7 @@ source_set("wayland") {
     ]
 
     deps += [
-      "//third_party/libdrm",
+      "//build/config/linux/libdrm",
       "//third_party/minigbm",
       "//ui/gfx:memory_buffer",
       "//ui/ozone/common/linux",
-- 
2.17.1

