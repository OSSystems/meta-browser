Upstream-Status: Backport

* Backported from the ToT: https://crrev.com/c/1412000

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From 0ef604f38de77ade15031a1cb69fe2070f01b990 Mon Sep 17 00:00:00 2001
From: Maksim Sisov <msisov@igalia.com>
Date: Mon, 28 Jan 2019 13:02:00 +0000
Subject: [PATCH 10/16] [ozone/wayland] Use surface listener to get display for
 widget.

Implement and start using wl_surface_listener, which tells the surface
what wl_output it occupies. It's possible that two or more outputs
are used at the same time for a given surface.

There are several cases to remember:
1) It is impossible to identify the number of pixels that a window
occupies in a single display. Thus, return the display stored first.

2) When a window is created, it may not receive an enter event
immediately until a compositor configured it. Thus, WaylandScreen
returns a primary display if |entered_output_ids| is empty.

3) In single display mode, if user switches between displays, Wayland
does not necessarily send enter events, but always sends leave events.
The enter event might be sent some time later when the user interacts
with the window (move/resize/maximize and etc). Thus, WaylandScreen
either returns the first output in the container (if 3 displays were
connected), or returns a primary display.

Bug: 890271, 875161
Change-Id: Ib8757d59b9839be073e121f0c57c0c0909932a2d
Reviewed-on: https://chromium-review.googlesource.com/c/1412000
Reviewed-by: Robert Kroeger <rjkroege@chromium.org>
Commit-Queue: Maksim Sisov <msisov@igalia.com>
Cr-Commit-Position: refs/heads/master@{#626512}
---
 ui/ozone/platform/wayland/wayland_output.h    |  1 +
 .../wayland/wayland_output_manager.cc         |  9 +++
 .../platform/wayland/wayland_output_manager.h |  2 +
 ui/ozone/platform/wayland/wayland_screen.cc   | 33 +++++++--
 .../wayland/wayland_screen_unittest.cc        | 73 +++++++++++++++++++
 ui/ozone/platform/wayland/wayland_window.cc   | 58 +++++++++++++++
 ui/ozone/platform/wayland/wayland_window.h    | 27 +++++++
 7 files changed, 197 insertions(+), 6 deletions(-)

diff --git a/ui/ozone/platform/wayland/wayland_output.h b/ui/ozone/platform/wayland/wayland_output.h
index ddf7946b194f..41a4d3959bb3 100644
--- a/ui/ozone/platform/wayland/wayland_output.h
+++ b/ui/ozone/platform/wayland/wayland_output.h
@@ -35,6 +35,7 @@ class WaylandOutput {
   void TriggerDelegateNotification() const;
 
   uint32_t output_id() const { return output_id_; }
+  bool has_output(wl_output* output) const { return output_.get() == output; }
 
   // Tells if the output has already received physical screen dimensions in the
   // global compositor space.
diff --git a/ui/ozone/platform/wayland/wayland_output_manager.cc b/ui/ozone/platform/wayland/wayland_output_manager.cc
index 654f3c3acf6e..992d0c309333 100644
--- a/ui/ozone/platform/wayland/wayland_output_manager.cc
+++ b/ui/ozone/platform/wayland/wayland_output_manager.cc
@@ -78,6 +78,15 @@ std::unique_ptr<WaylandScreen> WaylandOutputManager::CreateWaylandScreen(
   return wayland_screen;
 }
 
+uint32_t WaylandOutputManager::GetIdForOutput(wl_output* output) const {
+  auto output_it = std::find_if(
+      output_list_.begin(), output_list_.end(),
+      [output](const auto& item) { return item->has_output(output); });
+  // This is unlikely to happen, but better to be explicit here.
+  DCHECK(output_it != output_list_.end());
+  return output_it->get()->output_id();
+}
+
 void WaylandOutputManager::OnWaylandOutputAdded(uint32_t output_id) {
   if (wayland_screen_)
     wayland_screen_->OnOutputAdded(output_id);
diff --git a/ui/ozone/platform/wayland/wayland_output_manager.h b/ui/ozone/platform/wayland/wayland_output_manager.h
index dcd6ca2fc955..cae7097d4b12 100644
--- a/ui/ozone/platform/wayland/wayland_output_manager.h
+++ b/ui/ozone/platform/wayland/wayland_output_manager.h
@@ -38,6 +38,8 @@ class WaylandOutputManager : public WaylandOutput::Delegate {
   std::unique_ptr<WaylandScreen> CreateWaylandScreen(
       WaylandConnection* connection);
 
+  uint32_t GetIdForOutput(wl_output* output) const;
+
  private:
   void OnWaylandOutputAdded(uint32_t output_id);
   void OnWaylandOutputRemoved(uint32_t output_id);
diff --git a/ui/ozone/platform/wayland/wayland_screen.cc b/ui/ozone/platform/wayland/wayland_screen.cc
index 11241cab9413..a3561bf6a545 100644
--- a/ui/ozone/platform/wayland/wayland_screen.cc
+++ b/ui/ozone/platform/wayland/wayland_screen.cc
@@ -98,12 +98,33 @@ display::Display WaylandScreen::GetPrimaryDisplay() const {
 
 display::Display WaylandScreen::GetDisplayForAcceleratedWidget(
     gfx::AcceleratedWidget widget) const {
-  // TODO(msisov): implement wl_surface_listener::enter and
-  // wl_surface_listener::leave for a wl_surface to know what surface the window
-  // is located on.
-  //
-  // https://crbug.com/890271
-  NOTIMPLEMENTED_LOG_ONCE();
+  auto* wayland_window = connection_->GetWindow(widget);
+  DCHECK(wayland_window);
+
+  const std::set<uint32_t> entered_outputs_ids =
+      wayland_window->GetEnteredOutputsIds();
+  // Although spec says a surface receives enter/leave surface events on
+  // create/move/resize actions, this might be called right after a window is
+  // created, but it has not been configured by a Wayland compositor and it has
+  // not received enter surface events yet. Another case is when a user switches
+  // between displays in a single output mode - Wayland may not send enter
+  // events immediately, which can result in empty container of entered ids
+  // (check comments in WaylandWindow::RemoveEnteredOutputId). In this case,
+  // it's also safe to return the primary display.
+  if (entered_outputs_ids.empty())
+    return GetPrimaryDisplay();
+
+  DCHECK(!display_list_.displays().empty());
+
+  // A widget can be located on two or more displays. It would be better if the
+  // most in pixels occupied display was returned, but it's impossible to do in
+  // Wayland. Thus, return the one, which was the very first used.
+  for (const auto& display : display_list_.displays()) {
+    if (display.id() == *entered_outputs_ids.begin())
+      return display;
+  }
+
+  NOTREACHED();
   return GetPrimaryDisplay();
 }
 
diff --git a/ui/ozone/platform/wayland/wayland_screen_unittest.cc b/ui/ozone/platform/wayland/wayland_screen_unittest.cc
index 6b5a887a78f9..3861348ceec5 100644
--- a/ui/ozone/platform/wayland/wayland_screen_unittest.cc
+++ b/ui/ozone/platform/wayland/wayland_screen_unittest.cc
@@ -103,6 +103,13 @@ class WaylandScreenTest : public WaylandTest {
     wl_output_send_done(output_resource);
   }
 
+  void ValidateTheDisplayForWidget(gfx::AcceleratedWidget widget,
+                                   int64_t expected_display_id) {
+    display::Display display_for_widget =
+        platform_screen_->GetDisplayForAcceleratedWidget(widget);
+    EXPECT_EQ(display_for_widget.id(), expected_display_id);
+  }
+
   wl::MockOutput* output_ = nullptr;
   WaylandOutputManager* output_manager_ = nullptr;
 
@@ -351,6 +358,72 @@ TEST_P(WaylandScreenTest, GetDisplayMatching) {
   platform_screen_->RemoveObserver(&observer);
 }
 
+TEST_P(WaylandScreenTest, GetDisplayForAcceleratedWidget) {
+  TestDisplayObserver observer;
+  platform_screen_->AddObserver(&observer);
+
+  const display::Display primary_display =
+      platform_screen_->GetPrimaryDisplay();
+
+  // Create an additional display.
+  wl::MockOutput* output2 = server_.CreateAndInitializeOutput();
+
+  Sync();
+
+  // Place it on the right side of the primary
+  // display.
+  const gfx::Rect output2_rect =
+      gfx::Rect(primary_display.bounds().width(), 0, 1024, 768);
+  UpdateOutputGeometry(output2->resource(), output2_rect);
+
+  Sync();
+
+  const display::Display secondary_display = observer.GetDisplay();
+  EXPECT_EQ(secondary_display.bounds(), output2_rect);
+
+  const gfx::AcceleratedWidget widget = window_->GetWidget();
+  // There must be a primary display used if the window has not received an
+  // enter event yet.
+  ValidateTheDisplayForWidget(widget, primary_display.id());
+
+  // Now, send enter event for the surface, which was created before.
+  wl::MockSurface* surface = server_.GetObject<wl::MockSurface>(widget);
+  ASSERT_TRUE(surface);
+  wl_surface_send_enter(surface->resource(), output_->resource());
+
+  Sync();
+
+  // The id of the entered display must correspond to the primary output.
+  ValidateTheDisplayForWidget(widget, primary_display.id());
+
+  Sync();
+
+  // Enter the second output now.
+  wl_surface_send_enter(surface->resource(), output2->resource());
+
+  Sync();
+
+  // The id of the entered display must still correspond to the primary output.
+  ValidateTheDisplayForWidget(widget, primary_display.id());
+
+  // Leave the first output.
+  wl_surface_send_leave(surface->resource(), output_->resource());
+
+  Sync();
+
+  // The id of the entered display must correspond to the second output.
+  ValidateTheDisplayForWidget(widget, secondary_display.id());
+
+  // Leaving the same output twice (check comment in
+  // WaylandWindow::RemoveEnteredOutputId), must be ok and nothing must change.
+  wl_surface_send_leave(surface->resource(), output_->resource());
+
+  Sync();
+
+  // The id of the entered display must correspond to the second output.
+  ValidateTheDisplayForWidget(widget, secondary_display.id());
+}
+
 INSTANTIATE_TEST_CASE_P(XdgVersionV5Test,
                         WaylandScreenTest,
                         ::testing::Values(kXdgShellV5));
diff --git a/ui/ozone/platform/wayland/wayland_window.cc b/ui/ozone/platform/wayland/wayland_window.cc
index eeb3068c15e4..82d6c0161e46 100644
--- a/ui/ozone/platform/wayland/wayland_window.cc
+++ b/ui/ozone/platform/wayland/wayland_window.cc
@@ -16,6 +16,7 @@
 #include "ui/events/ozone/events_ozone.h"
 #include "ui/gfx/geometry/point_f.h"
 #include "ui/ozone/platform/wayland/wayland_connection.h"
+#include "ui/ozone/platform/wayland/wayland_output_manager.h"
 #include "ui/ozone/platform/wayland/wayland_pointer.h"
 #include "ui/ozone/platform/wayland/xdg_popup_wrapper_v5.h"
 #include "ui/ozone/platform/wayland/xdg_popup_wrapper_v6.h"
@@ -119,6 +120,7 @@ bool WaylandWindow::Initialize(PlatformWindowInitProperties properties) {
     return false;
   }
   wl_surface_set_user_data(surface_.get(), this);
+  AddSurfaceListener();
 
   ui::PlatformWindowType ui_window_type = properties.type;
   switch (ui_window_type) {
@@ -153,6 +155,10 @@ gfx::AcceleratedWidget WaylandWindow::GetWidget() const {
   return surface_.id();
 }
 
+std::set<uint32_t> WaylandWindow::GetEnteredOutputsIds() const {
+  return entered_outputs_ids_;
+}
+
 void WaylandWindow::CreateXdgPopup() {
   if (bounds_.IsEmpty())
     return;
@@ -643,4 +649,56 @@ WmMoveResizeHandler* WaylandWindow::AsWmMoveResizeHandler() {
   return static_cast<WmMoveResizeHandler*>(this);
 }
 
+void WaylandWindow::AddSurfaceListener() {
+  static struct wl_surface_listener surface_listener = {
+      &WaylandWindow::Enter,
+      &WaylandWindow::Leave,
+  };
+  wl_surface_add_listener(surface_.get(), &surface_listener, this);
+}
+
+void WaylandWindow::AddEnteredOutputId(struct wl_output* output) {
+  const uint32_t entered_output_id =
+      connection_->wayland_output_manager()->GetIdForOutput(output);
+  DCHECK_NE(entered_output_id, 0u);
+  auto entered_output_id_it = entered_outputs_ids_.insert(entered_output_id);
+  DCHECK(entered_output_id_it.second);
+}
+
+void WaylandWindow::RemoveEnteredOutputId(struct wl_output* output) {
+  const uint32_t left_output_id =
+      connection_->wayland_output_manager()->GetIdForOutput(output);
+  auto entered_output_id_it = entered_outputs_ids_.find(left_output_id);
+  // Workaround: when a user switches physical output between two displays,
+  // a window does not necessarily receive enter events immediately or until
+  // a user resizes/moves the window. It means that switching output between
+  // displays in a single output mode results in leave events, but the surface
+  // might not have received enter event before. Thus, remove the id of left
+  // output only if it was stored before.
+  if (entered_output_id_it != entered_outputs_ids_.end())
+    entered_outputs_ids_.erase(entered_output_id_it);
+}
+
+// static
+void WaylandWindow::Enter(void* data,
+                          struct wl_surface* wl_surface,
+                          struct wl_output* output) {
+  auto* window = static_cast<WaylandWindow*>(data);
+  if (window) {
+    DCHECK(window->surface_.get() == wl_surface);
+    window->AddEnteredOutputId(output);
+  }
+}
+
+// static
+void WaylandWindow::Leave(void* data,
+                          struct wl_surface* wl_surface,
+                          struct wl_output* output) {
+  auto* window = static_cast<WaylandWindow*>(data);
+  if (window) {
+    DCHECK(window->surface_.get() == wl_surface);
+    window->RemoveEnteredOutputId(output);
+  }
+}
+
 }  // namespace ui
diff --git a/ui/ozone/platform/wayland/wayland_window.h b/ui/ozone/platform/wayland/wayland_window.h
index a3ab6c477048..4176c6ae5942 100644
--- a/ui/ozone/platform/wayland/wayland_window.h
+++ b/ui/ozone/platform/wayland/wayland_window.h
@@ -5,6 +5,9 @@
 #ifndef UI_OZONE_PLATFORM_WAYLAND_WAYLAND_WINDOW_H_
 #define UI_OZONE_PLATFORM_WAYLAND_WAYLAND_WINDOW_H_
 
+#include <set>
+#include <vector>
+
 #include "base/callback.h"
 #include "base/memory/ref_counted.h"
 #include "ui/events/platform/platform_event_dispatcher.h"
@@ -54,6 +57,13 @@ class WaylandWindow : public PlatformWindow,
 
   gfx::AcceleratedWidget GetWidget() const;
 
+  // Returns the list of wl_outputs aka displays, which this window occupies.
+  // The window can be shown on one or more displays at the same time. An empty
+  // vector can also be returned if the window is not configured on the
+  // compositor side or it has been moved due to unplug action (check the
+  // comment in RemoveEnteredOutputId).
+  std::set<uint32_t> GetEnteredOutputsIds() const;
+
   // Apply the bounds specified in the most recent configure event. This should
   // be called after processing all pending events in the wayland connection.
   void ApplyPendingBounds();
@@ -154,6 +164,20 @@ class WaylandWindow : public PlatformWindow,
 
   WmMoveResizeHandler* AsWmMoveResizeHandler();
 
+  // Install a surface listener and start getting wl_output enter/leave events.
+  void AddSurfaceListener();
+
+  void AddEnteredOutputId(struct wl_output* output);
+  void RemoveEnteredOutputId(struct wl_output* output);
+
+  // wl_surface_listener
+  static void Enter(void* data,
+                    struct wl_surface* wl_surface,
+                    struct wl_output* output);
+  static void Leave(void* data,
+                    struct wl_surface* wl_surface,
+                    struct wl_output* output);
+
   PlatformWindowDelegate* delegate_;
   WaylandConnection* connection_;
   WaylandWindow* parent_window_ = nullptr;
@@ -195,6 +219,9 @@ class WaylandWindow : public PlatformWindow,
 
   bool is_tooltip_ = false;
 
+  // Stores the list of entered outputs that the window is currently in.
+  std::set<uint32_t> entered_outputs_ids_;
+
   DISALLOW_COPY_AND_ASSIGN(WaylandWindow);
 };
 
-- 
2.17.1

