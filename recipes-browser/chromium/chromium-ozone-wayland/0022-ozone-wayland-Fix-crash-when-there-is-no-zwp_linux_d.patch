Upstream-Status: Backport

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From 34c6a18c36698c919112f97887ce8285eaa883ca Mon Sep 17 00:00:00 2001
From: Maksim Sisov <msisov@igalia.com>
Date: Mon, 25 Feb 2019 07:34:47 +0000
Subject: [PATCH 22/42] [ozone/wayland] Fix crash when there is no
 zwp_linux_dmabuf

This fixes the case when zwp_linux_dmabuf interface is not available.

The fix is to make WaylandConnectionProxy to reset gbm_device, and
return nullptr instead. This makes the WaylandSurfaceFactory return
nullptr for SurfacelessViewGLSurface, which results in a software
rendering path usage when the "--in-process-gpu" flag is not
passed and ViewGLSurface, when the flag is passed.

TL;DR:

This change results in the following changes in two different cases:
  1) in-process-gpu is passed: in that mode, WaylandSurfaceFactory
tries to create surfaceless gl surface, which uses gbm and linux dmabuf
interface to create buffers. If neither gbm nor the interface are available,
surfaceless gl surface can't be created and nullptr is returned. Then,
Chromium asks to create ViewGlSurface, which uses wl_egl_surface.
  2) the flag is not passed: in that mode, the factory creates the
above mentioned surfaceless gl surface, which uses gbm and linux dmabuf
interface. If those are not available, nullptr is returned and chromium
falls back to software rendering (please note that it's impossible to create
wl_egl_surface, because it requires accessing wl_surface on the browser
process side). Note, software rendering CL is under review at
crrev.com/c/1454623

Bug: 932098
Change-Id: I95f88018ded48e7a18864f957137c2b478e788ac
Reviewed-on: https://chromium-review.googlesource.com/c/1477591
Reviewed-by: Dominick Ng <dominickn@chromium.org>
Reviewed-by: Robert Kroeger <rjkroege@chromium.org>
Commit-Queue: Maksim Sisov <msisov@igalia.com>
Cr-Commit-Position: refs/heads/master@{#635044}
---
 .../platform/wayland/gpu/wayland_connection_proxy.cc   |  8 ++++++++
 .../platform/wayland/gpu/wayland_connection_proxy.h    |  1 +
 ui/ozone/platform/wayland/ozone_platform_wayland.cc    |  2 +-
 ui/ozone/platform/wayland/wayland_connection.cc        |  6 ++++++
 ui/ozone/platform/wayland/wayland_connection.h         |  2 ++
 .../platform/wayland/wayland_connection_connector.cc   |  7 +++++++
 .../public/interfaces/wayland/wayland_connection.mojom | 10 ++++++++--
 7 files changed, 33 insertions(+), 3 deletions(-)

diff --git a/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.cc b/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.cc
index a9f1e3fa7dce..63372824985a 100644
--- a/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.cc
+++ b/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.cc
@@ -24,6 +24,14 @@ void WaylandConnectionProxy::SetWaylandConnection(
   wc_ptr_info_ = wc_ptr.PassInterface();
 }
 
+void WaylandConnectionProxy::ResetGbmDevice() {
+#if defined(WAYLAND_GBM)
+  gbm_device_.reset();
+#else
+  NOTREACHED();
+#endif
+}
+
 void WaylandConnectionProxy::CreateZwpLinuxDmabuf(
     base::File file,
     gfx::Size size,
diff --git a/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.h b/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.h
index 7c3d0725e5f4..2f3072cbdca9 100644
--- a/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.h
+++ b/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.h
@@ -44,6 +44,7 @@ class WaylandConnectionProxy : public ozone::mojom::WaylandConnectionClient {
 
   // WaylandConnectionProxy overrides:
   void SetWaylandConnection(ozone::mojom::WaylandConnectionPtr wc_ptr) override;
+  void ResetGbmDevice() override;
 
   // Methods, which must be used when GPU is hosted on a different process
   // aka gpu process.
diff --git a/ui/ozone/platform/wayland/ozone_platform_wayland.cc b/ui/ozone/platform/wayland/ozone_platform_wayland.cc
index 476c2a2fbd91..c1b023ec169a 100644
--- a/ui/ozone/platform/wayland/ozone_platform_wayland.cc
+++ b/ui/ozone/platform/wayland/ozone_platform_wayland.cc
@@ -168,6 +168,7 @@ class OzonePlatformWayland : public OzonePlatform {
 
   void InitializeGPU(const InitParams& args) override {
     proxy_.reset(new WaylandConnectionProxy(connection_.get()));
+    surface_factory_.reset(new WaylandSurfaceFactory(proxy_.get()));
 #if defined(WAYLAND_GBM)
     const base::FilePath drm_node_path = path_finder_.GetDrmRenderNodePath();
     if (drm_node_path.empty()) {
@@ -184,7 +185,6 @@ class OzonePlatformWayland : public OzonePlatform {
       }
     }
 #endif
-    surface_factory_.reset(new WaylandSurfaceFactory(proxy_.get()));
   }
 
   const PlatformProperties& GetPlatformProperties() override {
diff --git a/ui/ozone/platform/wayland/wayland_connection.cc b/ui/ozone/platform/wayland/wayland_connection.cc
index 9cf54b61898e..f25e9960941a 100644
--- a/ui/ozone/platform/wayland/wayland_connection.cc
+++ b/ui/ozone/platform/wayland/wayland_connection.cc
@@ -195,6 +195,8 @@ void WaylandConnection::CreateZwpLinuxDmabuf(
     uint32_t planes_count,
     uint32_t buffer_id) {
   DCHECK(base::MessageLoopCurrentForUI::IsSet());
+
+  DCHECK(buffer_manager_);
   if (!buffer_manager_->CreateBuffer(std::move(file), width, height, strides,
                                      offsets, format, modifiers, planes_count,
                                      buffer_id)) {
@@ -204,6 +206,8 @@ void WaylandConnection::CreateZwpLinuxDmabuf(
 
 void WaylandConnection::DestroyZwpLinuxDmabuf(uint32_t buffer_id) {
   DCHECK(base::MessageLoopCurrentForUI::IsSet());
+
+  DCHECK(buffer_manager_);
   if (!buffer_manager_->DestroyBuffer(buffer_id)) {
     TerminateGpuProcess(buffer_manager_->error_message());
   }
@@ -215,6 +219,8 @@ void WaylandConnection::ScheduleBufferSwap(
     const gfx::Rect& damage_region,
     ScheduleBufferSwapCallback callback) {
   DCHECK(base::MessageLoopCurrentForUI::IsSet());
+
+  CHECK(buffer_manager_);
   if (!buffer_manager_->ScheduleBufferSwap(widget, buffer_id, damage_region,
                                            std::move(callback))) {
     TerminateGpuProcess(buffer_manager_->error_message());
diff --git a/ui/ozone/platform/wayland/wayland_connection.h b/ui/ozone/platform/wayland/wayland_connection.h
index cfa0c92832a4..c5ded050c6fe 100644
--- a/ui/ozone/platform/wayland/wayland_connection.h
+++ b/ui/ozone/platform/wayland/wayland_connection.h
@@ -112,6 +112,8 @@ class WaylandConnection : public PlatformEventSource,
     return wayland_cursor_position_.get();
   }
 
+  WaylandBufferManager* buffer_manager() const { return buffer_manager_.get(); }
+
   // Clipboard implementation.
   PlatformClipboard* GetPlatformClipboard();
   void DataSourceCancelled();
diff --git a/ui/ozone/platform/wayland/wayland_connection_connector.cc b/ui/ozone/platform/wayland/wayland_connection_connector.cc
index cee7bb448896..91cf7445d5ab 100644
--- a/ui/ozone/platform/wayland/wayland_connection_connector.cc
+++ b/ui/ozone/platform/wayland/wayland_connection_connector.cc
@@ -82,6 +82,13 @@ void WaylandConnectionConnector::OnWaylandConnectionPtrBinded(
   auto request = mojo::MakeRequest(&wcp_ptr);
   BindInterfaceInGpuProcess(std::move(request), binder_);
   wcp_ptr->SetWaylandConnection(std::move(wc_ptr));
+
+#if defined(WAYLAND_GBM)
+  if (!connection_->buffer_manager()) {
+    LOG(WARNING) << "zwp_linux_dmabuf is not available.";
+    wcp_ptr->ResetGbmDevice();
+  }
+#endif
 }
 
 void WaylandConnectionConnector::OnTerminateGpuProcess(std::string message) {
diff --git a/ui/ozone/public/interfaces/wayland/wayland_connection.mojom b/ui/ozone/public/interfaces/wayland/wayland_connection.mojom
index a3993ccb15c0..b13007339e9f 100644
--- a/ui/ozone/public/interfaces/wayland/wayland_connection.mojom
+++ b/ui/ozone/public/interfaces/wayland/wayland_connection.mojom
@@ -35,8 +35,14 @@ interface WaylandConnection {
           gfx.mojom.PresentationFeedback feedback);
 };
 
-// Used by the browser process to provide the GPU process with a mojo ptr to a
-// WaylandConnection, which lives on the browser process.
+
 interface WaylandConnectionClient {
+  // Used by the browser process to provide the GPU process with a mojo ptr to a
+  // WaylandConnection, which lives on the browser process.
   SetWaylandConnection(WaylandConnection wc_ptr);
+
+  // The browser process may request the client to reset gbm device instance to
+  // avoid using zwp_linux_dmabuf protocol, which means using wl_egl_surface in
+  // a single process mode, and software rendering in a multiple process mode.
+  ResetGbmDevice();
 };
-- 
2.17.1

