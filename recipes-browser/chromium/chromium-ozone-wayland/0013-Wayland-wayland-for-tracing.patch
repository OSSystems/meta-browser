Upstream-Status: Backport

* Backported from the ToT: https://crrev.com/c/1386829

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From 15ccc4ee44ebd40b2acd160c9ff6820a1ae904bd Mon Sep 17 00:00:00 2001
From: Mitsuru Oshima <oshima@chromium.org>
Date: Thu, 20 Dec 2018 16:17:44 +0000
Subject: [PATCH 13/17] "Wayland" -> "wayland" for tracing

gbm_surfaceless_wayland.cc uses "wayland".
I picked lowercase just because its more common in tracing.
Please let me know if you prefer upper case and I'll update the patch.

Bug: None
Test: None
Change-Id: Ibf10d14fc9b472ce6ec97d92b4edaeb1fd81c539
Reviewed-on: https://chromium-review.googlesource.com/c/1386829
Reviewed-by: Maksim Sisov <msisov@igalia.com>
Commit-Queue: Mitsuru Oshima <oshima@chromium.org>
Cr-Commit-Position: refs/heads/master@{#618232}
---
 ui/ozone/platform/wayland/gpu/gbm_pixmap_wayland.cc | 2 +-
 ui/ozone/platform/wayland/wayland_buffer_manager.cc | 8 ++++----
 2 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/ui/ozone/platform/wayland/gpu/gbm_pixmap_wayland.cc b/ui/ozone/platform/wayland/gpu/gbm_pixmap_wayland.cc
index 62d42fcc06f2..8c662b9b5c68 100644
--- a/ui/ozone/platform/wayland/gpu/gbm_pixmap_wayland.cc
+++ b/ui/ozone/platform/wayland/gpu/gbm_pixmap_wayland.cc
@@ -37,7 +37,7 @@ GbmPixmapWayland::~GbmPixmapWayland() {
 bool GbmPixmapWayland::InitializeBuffer(gfx::Size size,
                                         gfx::BufferFormat format,
                                         gfx::BufferUsage usage) {
-  TRACE_EVENT1("Wayland", "GbmPixmapWayland::InitializeBuffer", "size",
+  TRACE_EVENT1("wayland", "GbmPixmapWayland::InitializeBuffer", "size",
                size.ToString());
   uint32_t flags = 0;
   switch (usage) {
diff --git a/ui/ozone/platform/wayland/wayland_buffer_manager.cc b/ui/ozone/platform/wayland/wayland_buffer_manager.cc
index 393336d13714..91b1a1e8eb01 100644
--- a/ui/ozone/platform/wayland/wayland_buffer_manager.cc
+++ b/ui/ozone/platform/wayland/wayland_buffer_manager.cc
@@ -77,7 +77,7 @@ bool WaylandBufferManager::CreateBuffer(base::File file,
                                         const std::vector<uint64_t>& modifiers,
                                         uint32_t planes_count,
                                         uint32_t buffer_id) {
-  TRACE_EVENT2("Wayland", "WaylandBufferManager::CreateZwpLinuxDmabuf",
+  TRACE_EVENT2("wayland", "WaylandBufferManager::CreateZwpLinuxDmabuf",
                "Format", format, "Buffer id", buffer_id);
 
   static const struct zwp_linux_buffer_params_v1_listener params_listener = {
@@ -121,7 +121,7 @@ bool WaylandBufferManager::ScheduleBufferSwap(gfx::AcceleratedWidget widget,
                                               uint32_t buffer_id,
                                               const gfx::Rect& damage_region,
                                               wl::BufferSwapCallback callback) {
-  TRACE_EVENT1("Wayland", "WaylandBufferManager::ScheduleSwapBuffer",
+  TRACE_EVENT1("wayland", "WaylandBufferManager::ScheduleSwapBuffer",
                "Buffer id", buffer_id);
 
   if (!ValidateDataFromGpu(widget, buffer_id))
@@ -152,7 +152,7 @@ bool WaylandBufferManager::ScheduleBufferSwap(gfx::AcceleratedWidget widget,
 }
 
 bool WaylandBufferManager::DestroyBuffer(uint32_t buffer_id) {
-  TRACE_EVENT1("Wayland", "WaylandBufferManager::DestroyZwpLinuxDmabuf",
+  TRACE_EVENT1("wayland", "WaylandBufferManager::DestroyZwpLinuxDmabuf",
                "Buffer id", buffer_id);
 
   auto it = buffers_.find(buffer_id);
@@ -181,7 +181,7 @@ void WaylandBufferManager::ClearState() {
 
 // TODO(msisov): handle buffer swap failure or success.
 bool WaylandBufferManager::SwapBuffer(Buffer* buffer) {
-  TRACE_EVENT1("Wayland", "WaylandBufferManager::SwapBuffer", "Buffer id",
+  TRACE_EVENT1("wayland", "WaylandBufferManager::SwapBuffer", "Buffer id",
                buffer->buffer_id);
 
   WaylandWindow* window = connection_->GetWindow(buffer->widget);
-- 
2.17.1

