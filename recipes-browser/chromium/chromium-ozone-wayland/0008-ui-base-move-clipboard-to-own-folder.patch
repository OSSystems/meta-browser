Upstream-Status: Backport

* Backported from the ToT: https://crrev.com/c/1369933

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From 207c4d75c612fc77b836439e82fc7cfa7f06b57c Mon Sep 17 00:00:00 2001
From: Maksim Sisov <msisov@igalia.com>
Date: Thu, 24 Jan 2019 15:44:25 +0000
Subject: [PATCH 08/16] ui/base: move clipboard to own folder.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

ClipboardOzone needs to depend on ui/ozone in order to call
OzonePlatform::GetPlatformClipboard, but as long as all the base::clipboard
classes are part of ui/base source set, and ui/ozone depends on
ui/base, it's impossible to depend on ui/ozone. And that
creates a circular dependency.

Thus, factor out clipboard source files and make appropriate source sets,
which will be used by clients on their needs instead of depending on
everything.

Bug: 922465
Change-Id: I97cd4013be096a1dd1af8e1da4678aa83f93ca42
Reviewed-on: https://chromium-review.googlesource.com/c/1369933
Reviewed-by: Cait Phillips <caitkp@chromium.org>
Reviewed-by: Scott Violet <sky@chromium.org>
Reviewed-by: Daniel Cheng <dcheng@chromium.org>
Reviewed-by: Sami Kyöstilä <skyostil@chromium.org>
Reviewed-by: Antoine Labour <piman@chromium.org>
Commit-Queue: Maksim Sisov <msisov@igalia.com>
Cr-Commit-Position: refs/heads/master@{#625654}
---
 ash/app_list/views/apps_grid_view.cc          |   2 +-
 ash/app_list/views/apps_grid_view.h           |   5 +-
 .../drag_drop_controller_unittest.cc          |   6 +-
 ash/drag_drop/drag_drop_interactive_uitest.cc |   2 +-
 chrome/browser/extensions/BUILD.gn            |   1 +
 chrome/browser/pdf/pdf_extension_test.cc      |   2 +-
 .../render_view_context_menu.cc               |   2 +-
 .../pepper_flash_clipboard_message_filter.cc  |  28 +-
 chrome/browser/ui/BUILD.gn                    |   1 +
 .../chrome_screenshot_grabber_browsertest.cc  |   3 +-
 chrome/browser/ui/omnibox/clipboard_utils.cc  |   4 +-
 .../ui/views/bookmarks/bookmark_bar_view.cc   |   2 +-
 .../ui/views/bookmarks/bookmark_bar_view.h    |   5 +-
 .../views/bookmarks/bookmark_bar_view_test.cc |   2 +-
 .../bookmark_menu_controller_views.cc         |   2 +-
 .../bookmark_menu_controller_views.h          |   7 +-
 .../views/bookmarks/bookmark_menu_delegate.cc |   2 +-
 .../views/bookmarks/bookmark_menu_delegate.h  |   7 +-
 .../extensions/browser_action_drag_data.cc    |   8 +-
 .../extensions/browser_action_drag_data.h     |   6 +-
 .../ui/views/frame/browser_root_view.cc       |   2 +-
 .../ui/views/frame/browser_root_view.h        |   5 +-
 .../views/location_bar/location_bar_view.cc   |   1 +
 .../views/location_bar/location_icon_view.cc  |   1 +
 .../ui/views/menu_view_drag_and_drop_test.cc  |  16 +-
 .../ui/views/omnibox/omnibox_view_views.cc    |   2 +-
 .../ui/views/omnibox/omnibox_view_views.h     |   2 +-
 chrome/browser/ui/views/tabs/tab_strip.cc     |   1 +
 chrome/browser/ui/views/toolbar/app_menu.cc   |   7 +-
 chrome/browser/ui/views/toolbar/app_menu.h    |   7 +-
 .../toolbar/browser_actions_container.cc      |   2 +-
 .../views/toolbar/browser_actions_container.h |   5 +-
 .../views/toolbar/browser_app_menu_button.cc  |   2 +-
 .../views/toolbar/browser_app_menu_button.h   |   5 +-
 .../browser/ui/views/toolbar/home_button.cc   |   2 +-
 chrome/browser/ui/views/toolbar/home_button.h |   5 +-
 chrome/test/BUILD.gn                          |   2 +
 chrome/test/base/view_event_test_base.cc      |   1 +
 components/arc/BUILD.gn                       |   2 +
 .../arc/clipboard/arc_clipboard_bridge.cc     |  13 +-
 components/bookmarks/browser/BUILD.gn         |   2 +
 .../bookmarks/browser/bookmark_node_data.cc   |   8 +-
 .../bookmarks/browser/bookmark_node_data.h    |   4 +-
 .../browser/bookmark_node_data_mac.mm         |   6 +-
 .../browser/bookmark_node_data_views.cc       |   8 +-
 components/exo/data_offer.cc                  |  13 +-
 components/exo/data_offer_unittest.cc         |   8 +-
 components/open_from_clipboard/BUILD.gn       |  24 +-
 ...ipboard_recent_content_generic_unittest.cc |   2 +-
 content/browser/BUILD.gn                      |   1 +
 .../renderer_host/clipboard_host_impl.cc      |  28 +-
 .../clipboard_host_impl_unittest.cc           |   7 +-
 .../renderer_host/render_widget_host_impl.cc  |  11 +-
 .../web_contents/web_contents_view_android.cc |   5 +-
 .../web_contents/web_contents_view_aura.cc    |  14 +-
 .../browser/web_contents/web_drag_dest_mac.mm |   1 +
 .../web_contents/web_drag_source_mac.mm       |   1 +
 content/public/test/browser_test_utils.cc     |   2 +-
 content/renderer/BUILD.gn                     |   1 +
 content/renderer/drop_data_builder.cc         |  10 +-
 content/renderer/render_widget.cc             |  11 +-
 content/shell/BUILD.gn                        |   1 +
 content/test/BUILD.gn                         |   4 +
 headless/BUILD.gn                             |   2 +
 headless/lib/browser/headless_clipboard.cc    |  52 ++--
 headless/lib/browser/headless_clipboard.h     |   9 +-
 ui/aura/BUILD.gn                              |   2 +
 ui/aura/mus/os_exchange_data_provider_mus.cc  |  39 +--
 ui/aura/mus/os_exchange_data_provider_mus.h   |   6 +-
 .../os_exchange_data_provider_mus_unittest.cc |   6 +-
 ui/base/BUILD.gn                              |  49 +---
 ui/base/clipboard/BUILD.gn                    | 165 ++++++++++++
 ui/base/clipboard/clipboard.cc                |   8 +-
 ui/base/clipboard/clipboard.h                 | 127 +---------
 ui/base/clipboard/clipboard_android.cc        | 163 +++---------
 ui/base/clipboard/clipboard_android.h         |  15 +-
 ui/base/clipboard/clipboard_aura.cc           | 150 ++---------
 ui/base/clipboard/clipboard_aura.h            |   7 +-
 ui/base/clipboard/clipboard_aurax11.cc        | 165 ++----------
 ui/base/clipboard/clipboard_aurax11.h         |   7 +-
 ui/base/clipboard/clipboard_constants.cc      |  23 +-
 ui/base/clipboard/clipboard_constants.h       |  45 ++++
 ...lper_mac.mm => clipboard_constants_mac.mm} |   4 +-
 ui/base/clipboard/clipboard_format_type.h     | 118 +++++++++
 .../clipboard_format_type_android.cc          | 119 +++++++++
 .../clipboard/clipboard_format_type_aura.cc   | 130 ++++++++++
 .../clipboard/clipboard_format_type_mac.mm    | 144 +++++++++++
 .../clipboard/clipboard_format_type_win.cc    | 214 ++++++++++++++++
 ui/base/clipboard/clipboard_mac.h             |  11 +-
 ui/base/clipboard/clipboard_mac.mm            | 148 +----------
 ui/base/clipboard/clipboard_monitor.h         |   4 +-
 ui/base/clipboard/clipboard_observer.h        |   4 +-
 ui/base/clipboard/clipboard_test_template.h   |  82 +++---
 ui/base/clipboard/clipboard_util_mac.h        |   8 +-
 ui/base/clipboard/clipboard_util_win.cc       |  70 ++---
 ui/base/clipboard/clipboard_util_win.h        |   5 +-
 ui/base/clipboard/clipboard_win.cc            | 239 ++----------------
 ui/base/clipboard/clipboard_win.h             |   7 +-
 ui/base/clipboard/custom_data_helper.h        |  39 ++-
 ui/base/clipboard/scoped_clipboard_writer.cc  |   3 +-
 ui/base/clipboard/scoped_clipboard_writer.h   |   6 +-
 .../{ => clipboard}/test/test_clipboard.cc    |  61 +++--
 ui/base/{ => clipboard}/test/test_clipboard.h |  15 +-
 .../test/test_clipboard_unittest.cc           |   2 +-
 ui/base/dragdrop/os_exchange_data.cc          |  10 +-
 ui/base/dragdrop/os_exchange_data.h           |  16 +-
 .../os_exchange_data_provider_aura.cc         |   9 +-
 .../dragdrop/os_exchange_data_provider_aura.h |  11 +-
 .../os_exchange_data_provider_aurax11.cc      |  33 ++-
 .../os_exchange_data_provider_aurax11.h       |   9 +-
 ...exchange_data_provider_aurax11_unittest.cc |   4 +-
 .../dragdrop/os_exchange_data_provider_mac.h  |   6 +-
 .../dragdrop/os_exchange_data_provider_mac.mm |   8 +-
 .../dragdrop/os_exchange_data_provider_win.cc |  38 +--
 .../dragdrop/os_exchange_data_provider_win.h  |   6 +-
 ui/base/dragdrop/os_exchange_data_unittest.cc |   5 +-
 .../dragdrop/os_exchange_data_win_unittest.cc |   4 +-
 ui/base/mojo/BUILD.gn                         |   1 +
 ui/base/mojo/clipboard_client.cc              |   6 +-
 ui/base/mojo/clipboard_client.h               |   7 +-
 ui/base/mojo/clipboard_host.cc                |  10 +-
 ui/base/x/selection_owner.h                   |   6 +-
 ui/base/x/selection_utils.cc                  |  10 +-
 ui/base/x/selection_utils.h                   |   7 +-
 ui/views/BUILD.gn                             |   4 +
 .../cocoa/drag_drop_client_mac_unittest.mm    |   2 +-
 ui/views/controls/menu/menu_controller.cc     |   2 +-
 ui/views/controls/menu/menu_controller.h      |   2 +-
 ui/views/controls/menu/menu_delegate.cc       |   2 +-
 ui/views/controls/menu/menu_delegate.h        |   7 +-
 ui/views/controls/menu/submenu_view.cc        |   2 +-
 ui/views/controls/menu/submenu_view.h         |   5 +-
 ui/views/controls/textfield/textfield.cc      |   4 +-
 ui/views/controls/textfield/textfield.h       |   5 +-
 .../controls/textfield/textfield_controller.h |   4 +-
 .../controls/textfield/textfield_unittest.cc  |   8 +-
 ui/views/mus/drag_interactive_uitest.cc       |   2 +-
 ui/views/test/scoped_views_test_helper.cc     |   2 +-
 ui/views/view.cc                              |   2 +-
 ui/views/view.h                               |   6 +-
 .../desktop_drag_drop_client_aurax11.cc       |   4 +-
 ui/views/widget/drop_helper.cc                |   2 +-
 142 files changed, 1648 insertions(+), 1448 deletions(-)
 create mode 100644 ui/base/clipboard/BUILD.gn
 create mode 100644 ui/base/clipboard/clipboard_constants.h
 rename ui/base/clipboard/{custom_data_helper_mac.mm => clipboard_constants_mac.mm} (75%)
 create mode 100644 ui/base/clipboard/clipboard_format_type.h
 create mode 100644 ui/base/clipboard/clipboard_format_type_android.cc
 create mode 100644 ui/base/clipboard/clipboard_format_type_aura.cc
 create mode 100644 ui/base/clipboard/clipboard_format_type_mac.mm
 create mode 100644 ui/base/clipboard/clipboard_format_type_win.cc
 rename ui/base/{ => clipboard}/test/test_clipboard.cc (79%)
 rename ui/base/{ => clipboard}/test/test_clipboard.h (89%)
 rename ui/base/{ => clipboard}/test/test_clipboard_unittest.cc (94%)

diff --git a/ash/app_list/views/apps_grid_view.cc b/ash/app_list/views/apps_grid_view.cc
index 44711fb26ef2..1ab454ee98ec 100644
--- a/ash/app_list/views/apps_grid_view.cc
+++ b/ash/app_list/views/apps_grid_view.cc
@@ -887,7 +887,7 @@ gfx::Size AppsGridView::CalculatePreferredSize() const {
 
 bool AppsGridView::GetDropFormats(
     int* formats,
-    std::set<ui::Clipboard::FormatType>* format_types) {
+    std::set<ui::ClipboardFormatType>* format_types) {
   // TODO(koz): Only accept a specific drag type for app shortcuts.
   *formats = OSExchangeData::FILE_NAME;
   return true;
diff --git a/ash/app_list/views/apps_grid_view.h b/ash/app_list/views/apps_grid_view.h
index 89159711e20d..eafdd7a51999 100644
--- a/ash/app_list/views/apps_grid_view.h
+++ b/ash/app_list/views/apps_grid_view.h
@@ -181,9 +181,8 @@ class APP_LIST_EXPORT AppsGridView : public views::View,
   bool OnKeyPressed(const ui::KeyEvent& event) override;
   void ViewHierarchyChanged(
       const ViewHierarchyChangedDetails& details) override;
-  bool GetDropFormats(
-      int* formats,
-      std::set<ui::Clipboard::FormatType>* format_types) override;
+  bool GetDropFormats(int* formats,
+                      std::set<ui::ClipboardFormatType>* format_types) override;
   bool CanDrop(const OSExchangeData& data) override;
   int OnDragUpdated(const ui::DropTargetEvent& event) override;
   const char* GetClassName() const override;
diff --git a/ash/drag_drop/drag_drop_controller_unittest.cc b/ash/drag_drop/drag_drop_controller_unittest.cc
index aa2452e45873..e812d28a6e6e 100644
--- a/ash/drag_drop/drag_drop_controller_unittest.cc
+++ b/ash/drag_drop/drag_drop_controller_unittest.cc
@@ -90,7 +90,7 @@ class DragTestView : public views::View {
 
   bool GetDropFormats(
       int* formats,
-      std::set<ui::Clipboard::FormatType>* format_types) override {
+      std::set<ui::ClipboardFormatType>* format_types) override {
     *formats = ui::OSExchangeData::STRING;
     return true;
   }
@@ -614,7 +614,7 @@ TEST_F(DragDropControllerTest, DragLeavesClipboardAloneTest) {
     ui::ScopedClipboardWriter scw(ui::CLIPBOARD_TYPE_COPY_PASTE);
     scw.WriteText(base::ASCIIToUTF16(clip_str));
   }
-  EXPECT_TRUE(cb->IsFormatAvailable(ui::Clipboard::GetPlainTextFormatType(),
+  EXPECT_TRUE(cb->IsFormatAvailable(ui::ClipboardFormatType::GetPlainTextType(),
                                     ui::CLIPBOARD_TYPE_COPY_PASTE));
 
   std::unique_ptr<views::Widget> widget = CreateTestWidget();
@@ -635,7 +635,7 @@ TEST_F(DragDropControllerTest, DragLeavesClipboardAloneTest) {
 
   // Verify the clipboard contents haven't changed
   std::string result;
-  EXPECT_TRUE(cb->IsFormatAvailable(ui::Clipboard::GetPlainTextFormatType(),
+  EXPECT_TRUE(cb->IsFormatAvailable(ui::ClipboardFormatType::GetPlainTextType(),
                                     ui::CLIPBOARD_TYPE_COPY_PASTE));
   cb->ReadAsciiText(ui::CLIPBOARD_TYPE_COPY_PASTE, &result);
   EXPECT_EQ(clip_str, result);
diff --git a/ash/drag_drop/drag_drop_interactive_uitest.cc b/ash/drag_drop/drag_drop_interactive_uitest.cc
index 5b762324320c..6871093f87ec 100644
--- a/ash/drag_drop/drag_drop_interactive_uitest.cc
+++ b/ash/drag_drop/drag_drop_interactive_uitest.cc
@@ -44,7 +44,7 @@ class TargetView : public views::View {
   // views::View overrides:
   bool GetDropFormats(
       int* formats,
-      std::set<ui::Clipboard::FormatType>* format_types) override {
+      std::set<ui::ClipboardFormatType>* format_types) override {
     *formats = ui::OSExchangeData::STRING;
     return true;
   }
diff --git a/chrome/browser/extensions/BUILD.gn b/chrome/browser/extensions/BUILD.gn
index c16f07473bf8..efd387e7636b 100644
--- a/chrome/browser/extensions/BUILD.gn
+++ b/chrome/browser/extensions/BUILD.gn
@@ -883,6 +883,7 @@ jumbo_static_library("extensions") {
     "//third_party/zlib/google:zip",
     "//ui/accessibility:ax_enums_mojo",
     "//ui/base",
+    "//ui/base/clipboard",
     "//ui/base/ime",
     "//ui/display/manager",
     "//ui/gfx",
diff --git a/chrome/browser/pdf/pdf_extension_test.cc b/chrome/browser/pdf/pdf_extension_test.cc
index 91171684711c..58e1be3ebda1 100644
--- a/chrome/browser/pdf/pdf_extension_test.cc
+++ b/chrome/browser/pdf/pdf_extension_test.cc
@@ -79,8 +79,8 @@
 #include "ui/accessibility/ax_node.h"
 #include "ui/accessibility/ax_tree.h"
 #include "ui/base/clipboard/clipboard.h"
+#include "ui/base/clipboard/test/test_clipboard.h"
 #include "ui/base/resource/resource_bundle.h"
-#include "ui/base/test/test_clipboard.h"
 #include "ui/events/keycodes/dom/keycode_converter.h"
 #include "ui/gfx/geometry/point.h"
 #include "url/gurl.h"
diff --git a/chrome/browser/renderer_context_menu/render_view_context_menu.cc b/chrome/browser/renderer_context_menu/render_view_context_menu.cc
index 6482e62e2b0b..3c273cb293c7 100644
--- a/chrome/browser/renderer_context_menu/render_view_context_menu.cc
+++ b/chrome/browser/renderer_context_menu/render_view_context_menu.cc
@@ -2294,7 +2294,7 @@ bool RenderViewContextMenu::IsPasteAndMatchStyleEnabled() const {
     return false;
 
   return ui::Clipboard::GetForCurrentThread()->IsFormatAvailable(
-      ui::Clipboard::GetPlainTextFormatType(),
+      ui::ClipboardFormatType::GetPlainTextType(),
       ui::CLIPBOARD_TYPE_COPY_PASTE);
 }
 
diff --git a/chrome/browser/renderer_host/pepper/pepper_flash_clipboard_message_filter.cc b/chrome/browser/renderer_host/pepper/pepper_flash_clipboard_message_filter.cc
index 80fd4924d642..dae9390dccef 100644
--- a/chrome/browser/renderer_host/pepper/pepper_flash_clipboard_message_filter.cc
+++ b/chrome/browser/renderer_host/pepper/pepper_flash_clipboard_message_filter.cc
@@ -164,19 +164,19 @@ int32_t PepperFlashClipboardMessageFilter::OnMsgIsFormatAvailable(
   switch (format) {
     case PP_FLASH_CLIPBOARD_FORMAT_PLAINTEXT: {
       bool plain = clipboard->IsFormatAvailable(
-          ui::Clipboard::GetPlainTextFormatType(), type);
+          ui::ClipboardFormatType::GetPlainTextType(), type);
       bool plainw = clipboard->IsFormatAvailable(
-          ui::Clipboard::GetPlainTextWFormatType(), type);
+          ui::ClipboardFormatType::GetPlainTextWType(), type);
       available = plain || plainw;
       break;
     }
     case PP_FLASH_CLIPBOARD_FORMAT_HTML:
       available = clipboard->IsFormatAvailable(
-          ui::Clipboard::GetHtmlFormatType(), type);
+          ui::ClipboardFormatType::GetHtmlType(), type);
       break;
     case PP_FLASH_CLIPBOARD_FORMAT_RTF:
-      available =
-          clipboard->IsFormatAvailable(ui::Clipboard::GetRtfFormatType(), type);
+      available = clipboard->IsFormatAvailable(
+          ui::ClipboardFormatType::GetRtfType(), type);
       break;
     case PP_FLASH_CLIPBOARD_FORMAT_INVALID:
       break;
@@ -184,7 +184,7 @@ int32_t PepperFlashClipboardMessageFilter::OnMsgIsFormatAvailable(
       if (custom_formats_.IsFormatRegistered(format)) {
         std::string format_name = custom_formats_.GetFormatName(format);
         std::string clipboard_data;
-        clipboard->ReadData(ui::Clipboard::GetPepperCustomDataFormatType(),
+        clipboard->ReadData(ui::ClipboardFormatType::GetPepperCustomDataType(),
                             &clipboard_data);
         base::Pickle pickle(clipboard_data.data(), clipboard_data.size());
         available =
@@ -211,8 +211,8 @@ int32_t PepperFlashClipboardMessageFilter::OnMsgReadData(
   int32_t result = PP_ERROR_FAILED;
   switch (format) {
     case PP_FLASH_CLIPBOARD_FORMAT_PLAINTEXT: {
-      if (clipboard->IsFormatAvailable(ui::Clipboard::GetPlainTextWFormatType(),
-                                       type)) {
+      if (clipboard->IsFormatAvailable(
+              ui::ClipboardFormatType::GetPlainTextWType(), type)) {
         base::string16 text;
         clipboard->ReadText(type, &text);
         if (!text.empty()) {
@@ -223,15 +223,15 @@ int32_t PepperFlashClipboardMessageFilter::OnMsgReadData(
       }
       // If the PlainTextW format isn't available or is empty, take the
       // ASCII text format.
-      if (clipboard->IsFormatAvailable(ui::Clipboard::GetPlainTextFormatType(),
-                                       type)) {
+      if (clipboard->IsFormatAvailable(
+              ui::ClipboardFormatType::GetPlainTextType(), type)) {
         result = PP_OK;
         clipboard->ReadAsciiText(type, &clipboard_string);
       }
       break;
     }
     case PP_FLASH_CLIPBOARD_FORMAT_HTML: {
-      if (!clipboard->IsFormatAvailable(ui::Clipboard::GetHtmlFormatType(),
+      if (!clipboard->IsFormatAvailable(ui::ClipboardFormatType::GetHtmlType(),
                                         type)) {
         break;
       }
@@ -247,7 +247,7 @@ int32_t PepperFlashClipboardMessageFilter::OnMsgReadData(
       break;
     }
     case PP_FLASH_CLIPBOARD_FORMAT_RTF: {
-      if (!clipboard->IsFormatAvailable(ui::Clipboard::GetRtfFormatType(),
+      if (!clipboard->IsFormatAvailable(ui::ClipboardFormatType::GetRtfType(),
                                         type)) {
         break;
       }
@@ -262,7 +262,7 @@ int32_t PepperFlashClipboardMessageFilter::OnMsgReadData(
         base::string16 format_name =
             base::UTF8ToUTF16(custom_formats_.GetFormatName(format));
         std::string clipboard_data;
-        clipboard->ReadData(ui::Clipboard::GetPepperCustomDataFormatType(),
+        clipboard->ReadData(ui::ClipboardFormatType::GetPepperCustomDataType(),
                             &clipboard_data);
         base::Pickle pickle(clipboard_data.data(), clipboard_data.size());
         if (IsFormatAvailableInPickle(format_name, pickle)) {
@@ -342,7 +342,7 @@ int32_t PepperFlashClipboardMessageFilter::OnMsgWriteData(
     base::Pickle pickle;
     WriteDataToPickle(custom_data_map, &pickle);
     scw.WritePickledData(pickle,
-                         ui::Clipboard::GetPepperCustomDataFormatType());
+                         ui::ClipboardFormatType::GetPepperCustomDataType());
   }
 
   if (res != PP_OK) {
diff --git a/chrome/browser/ui/BUILD.gn b/chrome/browser/ui/BUILD.gn
index c57b1a02a1fc..595726ba246c 100644
--- a/chrome/browser/ui/BUILD.gn
+++ b/chrome/browser/ui/BUILD.gn
@@ -532,6 +532,7 @@ jumbo_split_static_library("ui") {
     "//third_party/zlib",
     "//ui/accessibility",
     "//ui/base",
+    "//ui/base/clipboard",
     "//ui/base/ime",
     "//ui/compositor",
     "//ui/content_accelerators",
diff --git a/chrome/browser/ui/ash/chrome_screenshot_grabber_browsertest.cc b/chrome/browser/ui/ash/chrome_screenshot_grabber_browsertest.cc
index c62328ff0403..be34a70d2b4c 100644
--- a/chrome/browser/ui/ash/chrome_screenshot_grabber_browsertest.cc
+++ b/chrome/browser/ui/ash/chrome_screenshot_grabber_browsertest.cc
@@ -67,7 +67,8 @@ class ChromeScreenshotGrabberBrowserTest
 
   bool IsImageClipboardAvailable() {
     return ui::Clipboard::GetForCurrentThread()->IsFormatAvailable(
-        ui::Clipboard::GetBitmapFormatType(), ui::CLIPBOARD_TYPE_COPY_PASTE);
+        ui::ClipboardFormatType::GetBitmapType(),
+        ui::CLIPBOARD_TYPE_COPY_PASTE);
   }
 
   scoped_refptr<content::MessageLoopRunner> message_loop_runner_;
diff --git a/chrome/browser/ui/omnibox/clipboard_utils.cc b/chrome/browser/ui/omnibox/clipboard_utils.cc
index 239c7f4c94f6..de83f73e50c0 100644
--- a/chrome/browser/ui/omnibox/clipboard_utils.cc
+++ b/chrome/browser/ui/omnibox/clipboard_utils.cc
@@ -12,7 +12,7 @@
 base::string16 GetClipboardText() {
   // Try text format.
   ui::Clipboard* clipboard = ui::Clipboard::GetForCurrentThread();
-  if (clipboard->IsFormatAvailable(ui::Clipboard::GetPlainTextWFormatType(),
+  if (clipboard->IsFormatAvailable(ui::ClipboardFormatType::GetPlainTextWType(),
                                    ui::CLIPBOARD_TYPE_COPY_PASTE)) {
     base::string16 text;
     clipboard->ReadText(ui::CLIPBOARD_TYPE_COPY_PASTE, &text);
@@ -26,7 +26,7 @@ base::string16 GetClipboardText() {
   // and pastes from the URL bar to itself, the text will get fixed up and
   // cannonicalized, which is not what the user expects.  By pasting in this
   // order, we are sure to paste what the user copied.
-  if (clipboard->IsFormatAvailable(ui::Clipboard::GetUrlWFormatType(),
+  if (clipboard->IsFormatAvailable(ui::ClipboardFormatType::GetUrlWType(),
                                    ui::CLIPBOARD_TYPE_COPY_PASTE)) {
     std::string url_str;
     clipboard->ReadBookmark(NULL, &url_str);
diff --git a/chrome/browser/ui/views/bookmarks/bookmark_bar_view.cc b/chrome/browser/ui/views/bookmarks/bookmark_bar_view.cc
index 43bc3f6e0f8e..693b56ced811 100644
--- a/chrome/browser/ui/views/bookmarks/bookmark_bar_view.cc
+++ b/chrome/browser/ui/views/bookmarks/bookmark_bar_view.cc
@@ -1000,7 +1000,7 @@ void BookmarkBarView::PaintChildren(const views::PaintInfo& paint_info) {
 
 bool BookmarkBarView::GetDropFormats(
     int* formats,
-    std::set<ui::Clipboard::FormatType>* format_types) {
+    std::set<ui::ClipboardFormatType>* format_types) {
   if (!model_ || !model_->loaded())
     return false;
   *formats = ui::OSExchangeData::URL;
diff --git a/chrome/browser/ui/views/bookmarks/bookmark_bar_view.h b/chrome/browser/ui/views/bookmarks/bookmark_bar_view.h
index 60f229736950..74e4d5b72747 100644
--- a/chrome/browser/ui/views/bookmarks/bookmark_bar_view.h
+++ b/chrome/browser/ui/views/bookmarks/bookmark_bar_view.h
@@ -164,9 +164,8 @@ class BookmarkBarView : public views::AccessiblePaneView,
   void ViewHierarchyChanged(
       const ViewHierarchyChangedDetails& details) override;
   void PaintChildren(const views::PaintInfo& paint_info) override;
-  bool GetDropFormats(
-      int* formats,
-      std::set<ui::Clipboard::FormatType>* format_types) override;
+  bool GetDropFormats(int* formats,
+                      std::set<ui::ClipboardFormatType>* format_types) override;
   bool AreDropTypesRequired() override;
   bool CanDrop(const ui::OSExchangeData& data) override;
   void OnDragEntered(const ui::DropTargetEvent& event) override;
diff --git a/chrome/browser/ui/views/bookmarks/bookmark_bar_view_test.cc b/chrome/browser/ui/views/bookmarks/bookmark_bar_view_test.cc
index 296c3e0318d4..16214a017d7c 100644
--- a/chrome/browser/ui/views/bookmarks/bookmark_bar_view_test.cc
+++ b/chrome/browser/ui/views/bookmarks/bookmark_bar_view_test.cc
@@ -47,7 +47,7 @@
 #include "ui/aura/env_observer.h"
 #include "ui/aura/window.h"
 #include "ui/base/clipboard/clipboard.h"
-#include "ui/base/test/test_clipboard.h"
+#include "ui/base/clipboard/test/test_clipboard.h"
 #include "ui/base/test/ui_controls.h"
 #include "ui/events/keycodes/keyboard_codes.h"
 #include "ui/views/background.h"
diff --git a/chrome/browser/ui/views/bookmarks/bookmark_menu_controller_views.cc b/chrome/browser/ui/views/bookmarks/bookmark_menu_controller_views.cc
index 9ea2ca972085..b926a57cb99f 100644
--- a/chrome/browser/ui/views/bookmarks/bookmark_menu_controller_views.cc
+++ b/chrome/browser/ui/views/bookmarks/bookmark_menu_controller_views.cc
@@ -99,7 +99,7 @@ bool BookmarkMenuController::ShouldExecuteCommandWithoutClosingMenu(
 bool BookmarkMenuController::GetDropFormats(
     MenuItemView* menu,
     int* formats,
-    std::set<ui::Clipboard::FormatType>* format_types) {
+    std::set<ui::ClipboardFormatType>* format_types) {
   return menu_delegate_->GetDropFormats(menu, formats, format_types);
 }
 
diff --git a/chrome/browser/ui/views/bookmarks/bookmark_menu_controller_views.h b/chrome/browser/ui/views/bookmarks/bookmark_menu_controller_views.h
index 701d547c02d6..1caaa0e67a7b 100644
--- a/chrome/browser/ui/views/bookmarks/bookmark_menu_controller_views.h
+++ b/chrome/browser/ui/views/bookmarks/bookmark_menu_controller_views.h
@@ -85,10 +85,9 @@ class BookmarkMenuController : public bookmarks::BaseBookmarkModelObserver,
   void ExecuteCommand(int id, int mouse_event_flags) override;
   bool ShouldExecuteCommandWithoutClosingMenu(int id,
                                               const ui::Event& e) override;
-  bool GetDropFormats(
-      views::MenuItemView* menu,
-      int* formats,
-      std::set<ui::Clipboard::FormatType>* format_types) override;
+  bool GetDropFormats(views::MenuItemView* menu,
+                      int* formats,
+                      std::set<ui::ClipboardFormatType>* format_types) override;
   bool AreDropTypesRequired(views::MenuItemView* menu) override;
   bool CanDrop(views::MenuItemView* menu,
                const ui::OSExchangeData& data) override;
diff --git a/chrome/browser/ui/views/bookmarks/bookmark_menu_delegate.cc b/chrome/browser/ui/views/bookmarks/bookmark_menu_delegate.cc
index 34550f94710b..a8496f104fd4 100644
--- a/chrome/browser/ui/views/bookmarks/bookmark_menu_delegate.cc
+++ b/chrome/browser/ui/views/bookmarks/bookmark_menu_delegate.cc
@@ -199,7 +199,7 @@ bool BookmarkMenuDelegate::ShouldExecuteCommandWithoutClosingMenu(
 bool BookmarkMenuDelegate::GetDropFormats(
     MenuItemView* menu,
     int* formats,
-    std::set<ui::Clipboard::FormatType>* format_types) {
+    std::set<ui::ClipboardFormatType>* format_types) {
   *formats = ui::OSExchangeData::URL;
   format_types->insert(BookmarkNodeData::GetBookmarkFormatType());
   return true;
diff --git a/chrome/browser/ui/views/bookmarks/bookmark_menu_delegate.h b/chrome/browser/ui/views/bookmarks/bookmark_menu_delegate.h
index e31ee2ce0866..c9104df3c5b6 100644
--- a/chrome/browser/ui/views/bookmarks/bookmark_menu_delegate.h
+++ b/chrome/browser/ui/views/bookmarks/bookmark_menu_delegate.h
@@ -109,10 +109,9 @@ class BookmarkMenuDelegate : public bookmarks::BaseBookmarkModelObserver,
                           const ui::Event& e);
   void ExecuteCommand(int id, int mouse_event_flags);
   bool ShouldExecuteCommandWithoutClosingMenu(int id, const ui::Event& e);
-  bool GetDropFormats(
-      views::MenuItemView* menu,
-      int* formats,
-      std::set<ui::Clipboard::FormatType>* format_types);
+  bool GetDropFormats(views::MenuItemView* menu,
+                      int* formats,
+                      std::set<ui::ClipboardFormatType>* format_types);
   bool AreDropTypesRequired(views::MenuItemView* menu);
   bool CanDrop(views::MenuItemView* menu, const ui::OSExchangeData& data);
   int GetDropOperation(views::MenuItemView* item,
diff --git a/chrome/browser/ui/views/extensions/browser_action_drag_data.cc b/chrome/browser/ui/views/extensions/browser_action_drag_data.cc
index 82c5470d2ef2..32ff6599a69d 100644
--- a/chrome/browser/ui/views/extensions/browser_action_drag_data.cc
+++ b/chrome/browser/ui/views/extensions/browser_action_drag_data.cc
@@ -30,7 +30,7 @@ BrowserActionDragData::BrowserActionDragData(
 }
 
 bool BrowserActionDragData::GetDropFormats(
-    std::set<ui::Clipboard::FormatType>* format_types) {
+    std::set<ui::ClipboardFormatType>* format_types) {
   format_types->insert(GetBrowserActionFormatType());
   return true;
 }
@@ -73,10 +73,10 @@ bool BrowserActionDragData::Read(const ui::OSExchangeData& data) {
 }
 
 // static
-const ui::Clipboard::FormatType&
+const ui::ClipboardFormatType&
 BrowserActionDragData::GetBrowserActionFormatType() {
-  static base::NoDestructor<ui::Clipboard::FormatType> format(
-      ui::Clipboard::GetFormatType(kClipboardFormatString));
+  static base::NoDestructor<ui::ClipboardFormatType> format(
+      ui::ClipboardFormatType::GetType(kClipboardFormatString));
 
   return *format;
 }
diff --git a/chrome/browser/ui/views/extensions/browser_action_drag_data.h b/chrome/browser/ui/views/extensions/browser_action_drag_data.h
index 51851aa63e10..f40a9fd82dc2 100644
--- a/chrome/browser/ui/views/extensions/browser_action_drag_data.h
+++ b/chrome/browser/ui/views/extensions/browser_action_drag_data.h
@@ -29,7 +29,7 @@ class BrowserActionDragData {
   // These mirror the views::View and views::MenuDelegate methods for dropping,
   // and return the appropriate results for being able to drop an extension's
   // BrowserAction view.
-  static bool GetDropFormats(std::set<ui::Clipboard::FormatType>* format_types);
+  static bool GetDropFormats(std::set<ui::ClipboardFormatType>* format_types);
   static bool AreDropTypesRequired();
   static bool CanDrop(const ui::OSExchangeData& data, const Profile* profile);
 
@@ -46,8 +46,8 @@ class BrowserActionDragData {
   // Restores this data from the clipboard, returning true on success.
   bool Read(const ui::OSExchangeData& data);
 
-  // Returns the FormatType this class supports (for Browser Actions).
-  static const ui::Clipboard::FormatType& GetBrowserActionFormatType();
+  // Returns the ClipboardFormatType this class supports (for Browser Actions).
+  static const ui::ClipboardFormatType& GetBrowserActionFormatType();
 #endif
 
  private:
diff --git a/chrome/browser/ui/views/frame/browser_root_view.cc b/chrome/browser/ui/views/frame/browser_root_view.cc
index 8b08e6168124..ebf8531af849 100644
--- a/chrome/browser/ui/views/frame/browser_root_view.cc
+++ b/chrome/browser/ui/views/frame/browser_root_view.cc
@@ -113,7 +113,7 @@ BrowserRootView::~BrowserRootView() = default;
 
 bool BrowserRootView::GetDropFormats(
     int* formats,
-    std::set<ui::Clipboard::FormatType>* format_types) {
+    std::set<ui::ClipboardFormatType>* format_types) {
   if (tabstrip()->visible() || toolbar()->visible()) {
     *formats = ui::OSExchangeData::URL | ui::OSExchangeData::STRING;
     return true;
diff --git a/chrome/browser/ui/views/frame/browser_root_view.h b/chrome/browser/ui/views/frame/browser_root_view.h
index 8b5da77469eb..46846328773a 100644
--- a/chrome/browser/ui/views/frame/browser_root_view.h
+++ b/chrome/browser/ui/views/frame/browser_root_view.h
@@ -58,9 +58,8 @@ class BrowserRootView : public views::internal::RootView {
   ~BrowserRootView() override;
 
   // views::View:
-  bool GetDropFormats(
-      int* formats,
-      std::set<ui::Clipboard::FormatType>* format_types) override;
+  bool GetDropFormats(int* formats,
+                      std::set<ui::ClipboardFormatType>* format_types) override;
   bool AreDropTypesRequired() override;
   bool CanDrop(const ui::OSExchangeData& data) override;
   void OnDragEntered(const ui::DropTargetEvent& event) override;
diff --git a/chrome/browser/ui/views/location_bar/location_bar_view.cc b/chrome/browser/ui/views/location_bar/location_bar_view.cc
index 16a2d97dab9f..700f6d7d5159 100644
--- a/chrome/browser/ui/views/location_bar/location_bar_view.cc
+++ b/chrome/browser/ui/views/location_bar/location_bar_view.cc
@@ -81,6 +81,7 @@
 #include "extensions/common/feature_switch.h"
 #include "third_party/metrics_proto/omnibox_event.pb.h"
 #include "ui/accessibility/ax_node_data.h"
+#include "ui/base/clipboard/clipboard.h"
 #include "ui/base/dragdrop/drag_drop_types.h"
 #include "ui/base/ime/input_method.h"
 #include "ui/base/ime/input_method_keyboard_controller.h"
diff --git a/chrome/browser/ui/views/location_bar/location_icon_view.cc b/chrome/browser/ui/views/location_bar/location_icon_view.cc
index e9175b60702b..8e28d3f9c226 100644
--- a/chrome/browser/ui/views/location_bar/location_icon_view.cc
+++ b/chrome/browser/ui/views/location_bar/location_icon_view.cc
@@ -19,6 +19,7 @@
 #include "content/public/common/url_constants.h"
 #include "extensions/common/constants.h"
 #include "ui/accessibility/ax_node_data.h"
+#include "ui/base/clipboard/clipboard.h"
 #include "ui/base/l10n/l10n_util.h"
 #include "ui/views/controls/label.h"
 
diff --git a/chrome/browser/ui/views/menu_view_drag_and_drop_test.cc b/chrome/browser/ui/views/menu_view_drag_and_drop_test.cc
index 3a1947b53f64..13f3887cf705 100644
--- a/chrome/browser/ui/views/menu_view_drag_and_drop_test.cc
+++ b/chrome/browser/ui/views/menu_view_drag_and_drop_test.cc
@@ -64,9 +64,8 @@ class TestTargetView : public views::View {
 
  private:
   // views::View:
-  bool GetDropFormats(
-      int* formats,
-      std::set<ui::Clipboard::FormatType>* format_types) override;
+  bool GetDropFormats(int* formats,
+                      std::set<ui::ClipboardFormatType>* format_types) override;
   bool AreDropTypesRequired() override;
   bool CanDrop(const OSExchangeData& data) override;
   void OnDragEntered(const ui::DropTargetEvent& event) override;
@@ -105,7 +104,7 @@ TestTargetView::~TestTargetView() {
 
 bool TestTargetView::GetDropFormats(
     int* formats,
-    std::set<ui::Clipboard::FormatType>* format_types) {
+    std::set<ui::ClipboardFormatType>* format_types) {
   *formats = ui::OSExchangeData::STRING;
   return true;
 }
@@ -155,10 +154,9 @@ class MenuViewDragAndDropTest : public MenuTestBase {
   void BuildMenu(views::MenuItemView* menu) override;
 
   // views::MenuDelegate:
-  bool GetDropFormats(
-      views::MenuItemView* menu,
-      int* formats,
-      std::set<ui::Clipboard::FormatType>* format_types) override;
+  bool GetDropFormats(views::MenuItemView* menu,
+                      int* formats,
+                      std::set<ui::ClipboardFormatType>* format_types) override;
   bool AreDropTypesRequired(views::MenuItemView* menu) override;
   bool CanDrop(views::MenuItemView* menu,
                const ui::OSExchangeData& data) override;
@@ -213,7 +211,7 @@ void MenuViewDragAndDropTest::BuildMenu(views::MenuItemView* menu) {
 bool MenuViewDragAndDropTest::GetDropFormats(
     views::MenuItemView* menu,
     int* formats,
-    std::set<ui::Clipboard::FormatType>* format_types) {
+    std::set<ui::ClipboardFormatType>* format_types) {
   *formats = ui::OSExchangeData::STRING;
   return true;
 }
diff --git a/chrome/browser/ui/views/omnibox/omnibox_view_views.cc b/chrome/browser/ui/views/omnibox/omnibox_view_views.cc
index e415cb716bfa..6fc3a71da792 100644
--- a/chrome/browser/ui/views/omnibox/omnibox_view_views.cc
+++ b/chrome/browser/ui/views/omnibox/omnibox_view_views.cc
@@ -1541,7 +1541,7 @@ void OmniboxViewViews::OnGetDragOperationsForTextfield(int* drag_operations) {
 
 void OmniboxViewViews::AppendDropFormats(
     int* formats,
-    std::set<ui::Clipboard::FormatType>* format_types) {
+    std::set<ui::ClipboardFormatType>* format_types) {
   *formats = *formats | ui::OSExchangeData::URL;
 }
 
diff --git a/chrome/browser/ui/views/omnibox/omnibox_view_views.h b/chrome/browser/ui/views/omnibox/omnibox_view_views.h
index de5b6467f396..8d17915f05e7 100644
--- a/chrome/browser/ui/views/omnibox/omnibox_view_views.h
+++ b/chrome/browser/ui/views/omnibox/omnibox_view_views.h
@@ -285,7 +285,7 @@ class OmniboxViewViews : public OmniboxView,
   void OnGetDragOperationsForTextfield(int* drag_operations) override;
   void AppendDropFormats(
       int* formats,
-      std::set<ui::Clipboard::FormatType>* format_types) override;
+      std::set<ui::ClipboardFormatType>* format_types) override;
   int OnDrop(const ui::OSExchangeData& data) override;
   void UpdateContextMenu(ui::SimpleMenuModel* menu_contents) override;
 
diff --git a/chrome/browser/ui/views/tabs/tab_strip.cc b/chrome/browser/ui/views/tabs/tab_strip.cc
index 1e9734f0571e..43ce8550357e 100644
--- a/chrome/browser/ui/views/tabs/tab_strip.cc
+++ b/chrome/browser/ui/views/tabs/tab_strip.cc
@@ -44,6 +44,7 @@
 #include "third_party/skia/include/effects/SkLayerDrawLooper.h"
 #include "third_party/skia/include/pathops/SkPathOps.h"
 #include "ui/accessibility/ax_node_data.h"
+#include "ui/base/clipboard/clipboard.h"
 #include "ui/base/default_theme_provider.h"
 #include "ui/base/dragdrop/drag_drop_types.h"
 #include "ui/base/l10n/l10n_util.h"
diff --git a/chrome/browser/ui/views/toolbar/app_menu.cc b/chrome/browser/ui/views/toolbar/app_menu.cc
index e19fc68d8d51..0eeb0d2017b7 100644
--- a/chrome/browser/ui/views/toolbar/app_menu.cc
+++ b/chrome/browser/ui/views/toolbar/app_menu.cc
@@ -871,10 +871,9 @@ bool AppMenu::IsTriggerableEvent(views::MenuItemView* menu,
       MenuDelegate::IsTriggerableEvent(menu, e);
 }
 
-bool AppMenu::GetDropFormats(
-    MenuItemView* menu,
-    int* formats,
-    std::set<ui::Clipboard::FormatType>* format_types) {
+bool AppMenu::GetDropFormats(MenuItemView* menu,
+                             int* formats,
+                             std::set<ui::ClipboardFormatType>* format_types) {
   CreateBookmarkMenu();
   return bookmark_menu_delegate_.get() &&
       bookmark_menu_delegate_->GetDropFormats(menu, formats, format_types);
diff --git a/chrome/browser/ui/views/toolbar/app_menu.h b/chrome/browser/ui/views/toolbar/app_menu.h
index 1e917da23e16..fe38408d2837 100644
--- a/chrome/browser/ui/views/toolbar/app_menu.h
+++ b/chrome/browser/ui/views/toolbar/app_menu.h
@@ -68,10 +68,9 @@ class AppMenu : public views::MenuDelegate,
                                 const gfx::Point& p) const override;
   bool IsTriggerableEvent(views::MenuItemView* menu,
                           const ui::Event& e) override;
-  bool GetDropFormats(
-      views::MenuItemView* menu,
-      int* formats,
-      std::set<ui::Clipboard::FormatType>* format_types) override;
+  bool GetDropFormats(views::MenuItemView* menu,
+                      int* formats,
+                      std::set<ui::ClipboardFormatType>* format_types) override;
   bool AreDropTypesRequired(views::MenuItemView* menu) override;
   bool CanDrop(views::MenuItemView* menu,
                const ui::OSExchangeData& data) override;
diff --git a/chrome/browser/ui/views/toolbar/browser_actions_container.cc b/chrome/browser/ui/views/toolbar/browser_actions_container.cc
index 8038acfb356f..5482c65d9d5f 100644
--- a/chrome/browser/ui/views/toolbar/browser_actions_container.cc
+++ b/chrome/browser/ui/views/toolbar/browser_actions_container.cc
@@ -463,7 +463,7 @@ void BrowserActionsContainer::Layout() {
 
 bool BrowserActionsContainer::GetDropFormats(
     int* formats,
-    std::set<ui::Clipboard::FormatType>* format_types) {
+    std::set<ui::ClipboardFormatType>* format_types) {
   return BrowserActionDragData::GetDropFormats(format_types);
 }
 
diff --git a/chrome/browser/ui/views/toolbar/browser_actions_container.h b/chrome/browser/ui/views/toolbar/browser_actions_container.h
index f39a4103566f..49f18107a019 100644
--- a/chrome/browser/ui/views/toolbar/browser_actions_container.h
+++ b/chrome/browser/ui/views/toolbar/browser_actions_container.h
@@ -193,9 +193,8 @@ class BrowserActionsContainer : public views::View,
   int GetHeightForWidth(int width) const override;
   gfx::Size GetMinimumSize() const override;
   void Layout() override;
-  bool GetDropFormats(
-      int* formats,
-      std::set<ui::Clipboard::FormatType>* format_types) override;
+  bool GetDropFormats(int* formats,
+                      std::set<ui::ClipboardFormatType>* format_types) override;
   bool AreDropTypesRequired() override;
   bool CanDrop(const ui::OSExchangeData& data) override;
   int OnDragUpdated(const ui::DropTargetEvent& event) override;
diff --git a/chrome/browser/ui/views/toolbar/browser_app_menu_button.cc b/chrome/browser/ui/views/toolbar/browser_app_menu_button.cc
index 6ac91c47bb65..d3f16a8785c9 100644
--- a/chrome/browser/ui/views/toolbar/browser_app_menu_button.cc
+++ b/chrome/browser/ui/views/toolbar/browser_app_menu_button.cc
@@ -205,7 +205,7 @@ gfx::Rect BrowserAppMenuButton::GetAnchorBoundsInScreen() const {
 
 bool BrowserAppMenuButton::GetDropFormats(
     int* formats,
-    std::set<ui::Clipboard::FormatType>* format_types) {
+    std::set<ui::ClipboardFormatType>* format_types) {
   return BrowserActionDragData::GetDropFormats(format_types);
 }
 
diff --git a/chrome/browser/ui/views/toolbar/browser_app_menu_button.h b/chrome/browser/ui/views/toolbar/browser_app_menu_button.h
index 01e70f641543..457656d433d7 100644
--- a/chrome/browser/ui/views/toolbar/browser_app_menu_button.h
+++ b/chrome/browser/ui/views/toolbar/browser_app_menu_button.h
@@ -65,9 +65,8 @@ class BrowserAppMenuButton : public AppMenuButton,
 
   // views::MenuButton:
   const char* GetClassName() const override;
-  bool GetDropFormats(
-      int* formats,
-      std::set<ui::Clipboard::FormatType>* format_types) override;
+  bool GetDropFormats(int* formats,
+                      std::set<ui::ClipboardFormatType>* format_types) override;
   bool AreDropTypesRequired() override;
   bool CanDrop(const ui::OSExchangeData& data) override;
   void OnDragEntered(const ui::DropTargetEvent& event) override;
diff --git a/chrome/browser/ui/views/toolbar/home_button.cc b/chrome/browser/ui/views/toolbar/home_button.cc
index ed74f9ca5f17..3f1307a7be92 100644
--- a/chrome/browser/ui/views/toolbar/home_button.cc
+++ b/chrome/browser/ui/views/toolbar/home_button.cc
@@ -159,7 +159,7 @@ const char* HomeButton::GetClassName() const {
 
 bool HomeButton::GetDropFormats(
     int* formats,
-    std::set<ui::Clipboard::FormatType>* format_types) {
+    std::set<ui::ClipboardFormatType>* format_types) {
   *formats = ui::OSExchangeData::URL;
   return true;
 }
diff --git a/chrome/browser/ui/views/toolbar/home_button.h b/chrome/browser/ui/views/toolbar/home_button.h
index 3c6bcee779a7..fa9d68f013fc 100644
--- a/chrome/browser/ui/views/toolbar/home_button.h
+++ b/chrome/browser/ui/views/toolbar/home_button.h
@@ -19,9 +19,8 @@ class HomeButton : public ToolbarButton {
  private:
   // ToolbarButton:
   const char* GetClassName() const override;
-  bool GetDropFormats(
-      int* formats,
-      std::set<ui::Clipboard::FormatType>* format_types) override;
+  bool GetDropFormats(int* formats,
+                      std::set<ui::ClipboardFormatType>* format_types) override;
   bool CanDrop(const OSExchangeData& data) override;
   int OnDragUpdated(const ui::DropTargetEvent& event) override;
   int OnPerformDrop(const ui::DropTargetEvent& event) override;
diff --git a/chrome/test/BUILD.gn b/chrome/test/BUILD.gn
index 853e2dfc9163..53576c70688f 100644
--- a/chrome/test/BUILD.gn
+++ b/chrome/test/BUILD.gn
@@ -1084,6 +1084,7 @@ test("browser_tests") {
       "//third_party/widevine/cdm:headers",
       "//ui/accessibility:test_support",
       "//ui/base:test_support",
+      "//ui/base/clipboard:clipboard_test_support",
       "//ui/compositor:test_support",
       "//ui/resources",
       "//ui/web_dialogs:test_support",
@@ -4837,6 +4838,7 @@ if (!is_android) {
       "//third_party/libpng",
       "//third_party/zlib",
       "//ui/base:test_support",
+      "//ui/base/clipboard:clipboard_test_support",
       "//ui/events:events_interactive_ui_tests",
       "//ui/resources:ui_test_pak",
       "//ui/web_dialogs:test_support",
diff --git a/chrome/test/base/view_event_test_base.cc b/chrome/test/base/view_event_test_base.cc
index 4b69c3fa51cf..383b53ff98d8 100644
--- a/chrome/test/base/view_event_test_base.cc
+++ b/chrome/test/base/view_event_test_base.cc
@@ -14,6 +14,7 @@
 #include "chrome/test/base/testing_browser_process.h"
 #include "chrome/test/base/view_event_test_platform_part.h"
 #include "mojo/core/embedder/embedder.h"
+#include "ui/base/clipboard/clipboard.h"
 #include "ui/base/ime/input_method_initializer.h"
 #include "ui/base/test/ui_controls.h"
 #include "ui/compositor/test/context_factories_for_test.h"
diff --git a/components/arc/BUILD.gn b/components/arc/BUILD.gn
index 7c90eb3c35fe..dc58d282c50c 100644
--- a/components/arc/BUILD.gn
+++ b/components/arc/BUILD.gn
@@ -105,6 +105,7 @@ static_library("arc") {
     "//third_party/re2:re2",
     "//ui/aura",
     "//ui/base:base",
+    "//ui/base/clipboard",
     "//ui/base/ime",
     "//ui/display/manager",
     "//ui/events",
@@ -332,6 +333,7 @@ source_set("unit_tests") {
     "//ui/aura",
     "//ui/aura:test_support",
     "//ui/base:test_support",
+    "//ui/base/clipboard",
     "//ui/base/ime",
     "//ui/events",
     "//ui/events:dom_keycode_converter",
diff --git a/components/arc/clipboard/arc_clipboard_bridge.cc b/components/arc/clipboard/arc_clipboard_bridge.cc
index 721b3aafc0bf..e1555e9984f7 100644
--- a/components/arc/clipboard/arc_clipboard_bridge.cc
+++ b/components/arc/clipboard/arc_clipboard_bridge.cc
@@ -14,6 +14,7 @@
 #include "components/arc/arc_bridge_service.h"
 #include "components/arc/arc_browser_context_keyed_service_factory_base.h"
 #include "ui/base/clipboard/clipboard.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 #include "ui/base/clipboard/clipboard_monitor.h"
 #include "ui/base/clipboard/scoped_clipboard_writer.h"
 
@@ -59,7 +60,7 @@ mojom::ClipRepresentationPtr CreateHTML(const ui::Clipboard* clipboard) {
   std::string text(base::UTF16ToUTF8(
       markup16.substr(fragment_start, fragment_end - fragment_start)));
 
-  std::string mime_type(ui::Clipboard::kMimeTypeHTML);
+  std::string mime_type(ui::kMimeTypeHTML);
 
   // Send non-sanitized HTML content. Instance should sanitize it if needed.
   return mojom::ClipRepresentation::New(mime_type,
@@ -72,7 +73,7 @@ mojom::ClipRepresentationPtr CreatePlainText(const ui::Clipboard* clipboard) {
   // Unused. Title is not used at Instance.
   base::string16 title;
   std::string text;
-  std::string mime_type(ui::Clipboard::kMimeTypeText);
+  std::string mime_type(ui::kMimeTypeText);
 
   // Both Bookmark and AsciiText are represented by text/plain. If both are
   // present, only use Bookmark.
@@ -97,9 +98,9 @@ mojom::ClipDataPtr GetClipData(const ui::Clipboard* clipboard) {
   // Populate ClipData with ClipRepresentation objects.
   for (const auto& mime_type16 : mime_types) {
     const std::string mime_type(base::UTF16ToUTF8(mime_type16));
-    if (mime_type == ui::Clipboard::kMimeTypeHTML) {
+    if (mime_type == ui::kMimeTypeHTML) {
       clip_data->representations.push_back(CreateHTML(clipboard));
-    } else if (mime_type == ui::Clipboard::kMimeTypeText) {
+    } else if (mime_type == ui::kMimeTypeText) {
       clip_data->representations.push_back(CreatePlainText(clipboard));
     } else {
       // TODO(ricardoq): Add other supported mime_types here.
@@ -218,9 +219,9 @@ void ArcClipboardBridge::SetClipContent(mojom::ClipDataPtr clip_data) {
 
   for (const auto& repr : clip_data->representations) {
     const std::string& mime_type(repr->mime_type);
-    if (mime_type == ui::Clipboard::kMimeTypeHTML) {
+    if (mime_type == ui::kMimeTypeHTML) {
       ProcessHTML(repr.get(), &writer);
-    } else if (mime_type == ui::Clipboard::kMimeTypeText) {
+    } else if (mime_type == ui::kMimeTypeText) {
       ProcessPlainText(repr.get(), &writer);
     }
   }
diff --git a/components/bookmarks/browser/BUILD.gn b/components/bookmarks/browser/BUILD.gn
index 0161b6f3fcd2..ccdf41687aea 100644
--- a/components/bookmarks/browser/BUILD.gn
+++ b/components/bookmarks/browser/BUILD.gn
@@ -68,6 +68,7 @@ static_library("browser") {
     "//net",
     "//third_party/icu",
     "//ui/base",
+    "//ui/base/clipboard",
     "//ui/gfx",
     "//url",
   ]
@@ -135,6 +136,7 @@ source_set("unit_tests") {
     "//components/prefs:test_support",
     "//testing/gtest",
     "//ui/base",
+    "//ui/base/clipboard",
     "//url",
   ]
 }
diff --git a/components/bookmarks/browser/bookmark_node_data.cc b/components/bookmarks/browser/bookmark_node_data.cc
index 72c89d93cc20..41cc98a87378 100644
--- a/components/bookmarks/browser/bookmark_node_data.cc
+++ b/components/bookmarks/browser/bookmark_node_data.cc
@@ -123,7 +123,7 @@ BookmarkNodeData::~BookmarkNodeData() {
 // static
 bool BookmarkNodeData::ClipboardContainsBookmarks() {
   return ui::Clipboard::GetForCurrentThread()->IsFormatAvailable(
-      ui::Clipboard::GetFormatType(kClipboardFormatString),
+      ui::ClipboardFormatType::GetType(kClipboardFormatString),
       ui::CLIPBOARD_TYPE_COPY_PASTE);
 }
 #endif
@@ -208,15 +208,15 @@ void BookmarkNodeData::WriteToClipboard(ui::ClipboardType clipboard_type) {
 
   base::Pickle pickle;
   WriteToPickle(base::FilePath(), &pickle);
-  scw.WritePickledData(pickle,
-                       ui::Clipboard::GetFormatType(kClipboardFormatString));
+  scw.WritePickledData(
+      pickle, ui::ClipboardFormatType::GetType(kClipboardFormatString));
 }
 
 bool BookmarkNodeData::ReadFromClipboard(ui::ClipboardType type) {
   DCHECK_EQ(type, ui::CLIPBOARD_TYPE_COPY_PASTE);
   std::string data;
   ui::Clipboard* clipboard = ui::Clipboard::GetForCurrentThread();
-  clipboard->ReadData(ui::Clipboard::GetFormatType(kClipboardFormatString),
+  clipboard->ReadData(ui::ClipboardFormatType::GetType(kClipboardFormatString),
                       &data);
 
   if (!data.empty()) {
diff --git a/components/bookmarks/browser/bookmark_node_data.h b/components/bookmarks/browser/bookmark_node_data.h
index 4d513a828689..70fc9ebaa2b2 100644
--- a/components/bookmarks/browser/bookmark_node_data.h
+++ b/components/bookmarks/browser/bookmark_node_data.h
@@ -19,7 +19,7 @@
 #include "url/gurl.h"
 
 #if defined(TOOLKIT_VIEWS)
-#include "ui/base/clipboard/clipboard.h"
+#include "ui/base/clipboard/clipboard_format_type.h"
 #endif
 
 namespace base {
@@ -115,7 +115,7 @@ struct BookmarkNodeData {
   ~BookmarkNodeData();
 
 #if defined(TOOLKIT_VIEWS)
-  static const ui::Clipboard::FormatType& GetBookmarkFormatType();
+  static const ui::ClipboardFormatType& GetBookmarkFormatType();
 #endif
 
   static bool ClipboardContainsBookmarks();
diff --git a/components/bookmarks/browser/bookmark_node_data_mac.mm b/components/bookmarks/browser/bookmark_node_data_mac.mm
index 27e46ecdcd92..95439addf4b9 100644
--- a/components/bookmarks/browser/bookmark_node_data_mac.mm
+++ b/components/bookmarks/browser/bookmark_node_data_mac.mm
@@ -16,9 +16,9 @@ namespace bookmarks {
 #if defined(TOOLKIT_VIEWS)
 
 // static
-const ui::Clipboard::FormatType& BookmarkNodeData::GetBookmarkFormatType() {
-  static const base::NoDestructor<ui::Clipboard::FormatType> format(
-      ui::Clipboard::GetFormatType(
+const ui::ClipboardFormatType& BookmarkNodeData::GetBookmarkFormatType() {
+  static const base::NoDestructor<ui::ClipboardFormatType> format(
+      ui::ClipboardFormatType::GetType(
           base::SysNSStringToUTF8(kUTTypeChromiumBookmarkDictionaryList)));
 
   return *format;
diff --git a/components/bookmarks/browser/bookmark_node_data_views.cc b/components/bookmarks/browser/bookmark_node_data_views.cc
index ec119bd5e17c..a6735f2f884d 100644
--- a/components/bookmarks/browser/bookmark_node_data_views.cc
+++ b/components/bookmarks/browser/bookmark_node_data_views.cc
@@ -9,15 +9,17 @@
 #include "base/pickle.h"
 #include "base/strings/utf_string_conversions.h"
 #include "build/build_config.h"
+#include "ui/base/clipboard/clipboard_format_type.h"
 #include "ui/base/dragdrop/os_exchange_data.h"
 #include "url/url_constants.h"
 
 namespace bookmarks {
 
 // static
-const ui::Clipboard::FormatType& BookmarkNodeData::GetBookmarkFormatType() {
-  static const base::NoDestructor<ui::Clipboard::FormatType> format(
-      ui::Clipboard::GetFormatType(BookmarkNodeData::kClipboardFormatString));
+const ui::ClipboardFormatType& BookmarkNodeData::GetBookmarkFormatType() {
+  static const base::NoDestructor<ui::ClipboardFormatType> format(
+      ui::ClipboardFormatType::GetType(
+          BookmarkNodeData::kClipboardFormatString));
 
   return *format;
 }
diff --git a/components/exo/data_offer.cc b/components/exo/data_offer.cc
index e14bc9bf84bf..1882ede3e0f2 100644
--- a/components/exo/data_offer.cc
+++ b/components/exo/data_offer.cc
@@ -14,6 +14,8 @@
 #include "components/exo/data_offer_observer.h"
 #include "components/exo/file_helper.h"
 #include "ui/base/clipboard/clipboard.h"
+#include "ui/base/clipboard/clipboard_constants.h"
+#include "ui/base/clipboard/clipboard_types.h"
 #include "ui/base/dragdrop/file_info.h"
 #include "ui/base/dragdrop/os_exchange_data.h"
 #include "url/gurl.h"
@@ -76,10 +78,10 @@ bool GetUrlListFromDataFile(FileHelper* file_helper,
   return !url_list_string->empty();
 }
 
-ui::Clipboard::FormatType GetClipboardFormatType() {
+ui::ClipboardFormatType GetClipboardFormatType() {
   static const char kFormatString[] = "chromium/x-file-system-files";
-  static base::NoDestructor<ui::Clipboard::FormatType> format_type(
-      ui::Clipboard::GetFormatType(kFormatString));
+  static base::NoDestructor<ui::ClipboardFormatType> format_type(
+      ui::ClipboardFormatType::GetType(kFormatString));
   return *format_type;
 }
 
@@ -166,8 +168,7 @@ void DataOffer::SetDropData(FileHelper* file_helper,
 
   base::string16 string_content;
   if (data.HasString() && data.GetString(&string_content)) {
-    const std::string text_mime_type =
-        std::string(ui::Clipboard::kMimeTypeText);
+    const std::string text_mime_type = std::string(ui::kMimeTypeText);
     data_.emplace(text_mime_type,
                   RefCountedString16::TakeString(std::move(string_content)));
     delegate_->OnOffer(text_mime_type);
@@ -178,7 +179,7 @@ void DataOffer::SetDropData(FileHelper* file_helper,
 void DataOffer::SetClipboardData(FileHelper* file_helper,
                                  const ui::Clipboard& data) {
   DCHECK_EQ(0u, data_.size());
-  if (data.IsFormatAvailable(ui::Clipboard::GetPlainTextWFormatType(),
+  if (data.IsFormatAvailable(ui::ClipboardFormatType::GetPlainTextWType(),
                              ui::CLIPBOARD_TYPE_COPY_PASTE)) {
     base::string16 content;
     data.ReadText(ui::CLIPBOARD_TYPE_COPY_PASTE, &content);
diff --git a/components/exo/data_offer_unittest.cc b/components/exo/data_offer_unittest.cc
index 1f2a51c4af95..97f5ef6acc0f 100644
--- a/components/exo/data_offer_unittest.cc
+++ b/components/exo/data_offer_unittest.cc
@@ -184,7 +184,7 @@ TEST_F(DataOfferTest, SetPickleDropData) {
   pickle.WriteInt64(1000);   // file size
   pickle.WriteString("id");  // filesystem id
   data.SetPickledData(
-      ui::Clipboard::GetFormatType("chromium/x-file-system-files"), pickle);
+      ui::ClipboardFormatType::GetType("chromium/x-file-system-files"), pickle);
   data_offer.SetDropData(&file_helper, data);
 
   EXPECT_EQ(1u, delegate.mime_types().size());
@@ -242,7 +242,7 @@ TEST_F(DataOfferTest, ReceiveUriListFromPickle_ReceiveAfterUrlIsResolved) {
   pickle.WriteInt64(1000);   // file size
   pickle.WriteString("id");  // filesystem id
   data.SetPickledData(
-      ui::Clipboard::GetFormatType("chromium/x-file-system-files"), pickle);
+      ui::ClipboardFormatType::GetType("chromium/x-file-system-files"), pickle);
   data_offer.SetDropData(&file_helper, data);
 
   // Run callback with a resolved URL.
@@ -278,7 +278,7 @@ TEST_F(DataOfferTest, ReceiveUriListFromPickle_ReceiveBeforeUrlIsResolved) {
   pickle.WriteInt64(1000);   // file size
   pickle.WriteString("id");  // filesystem id
   data.SetPickledData(
-      ui::Clipboard::GetFormatType("chromium/x-file-system-files"), pickle);
+      ui::ClipboardFormatType::GetType("chromium/x-file-system-files"), pickle);
   data_offer.SetDropData(&file_helper, data);
 
   base::ScopedFD read_pipe1;
@@ -326,7 +326,7 @@ TEST_F(DataOfferTest,
   pickle.WriteInt64(1000);   // file size
   pickle.WriteString("id");  // filesystem id
   data.SetPickledData(
-      ui::Clipboard::GetFormatType("chromium/x-file-system-files"), pickle);
+      ui::ClipboardFormatType::GetType("chromium/x-file-system-files"), pickle);
   data_offer.SetDropData(&file_helper, data);
 
   base::ScopedFD read_pipe;
diff --git a/components/open_from_clipboard/BUILD.gn b/components/open_from_clipboard/BUILD.gn
index 73e360ed1b58..833a66c663ac 100644
--- a/components/open_from_clipboard/BUILD.gn
+++ b/components/open_from_clipboard/BUILD.gn
@@ -10,13 +10,6 @@ static_library("open_from_clipboard") {
     "clipboard_recent_content_ios.mm",
   ]
 
-  if (!is_ios) {
-    sources += [
-      "clipboard_recent_content_generic.cc",
-      "clipboard_recent_content_generic.h",
-    ]
-  }
-
   deps = [
     ":open_from_clipboard_impl",
     "//base",
@@ -25,6 +18,14 @@ static_library("open_from_clipboard") {
     "//ui/base:base",
     "//url",
   ]
+
+  if (!is_ios) {
+    sources += [
+      "clipboard_recent_content_generic.cc",
+      "clipboard_recent_content_generic.h",
+    ]
+    deps += [ "//ui/base/clipboard" ]
+  }
 }
 
 # Helper classes used by "open_from_clipboard" target. These classes must have
@@ -63,10 +64,6 @@ source_set("unit_tests") {
     "clipboard_recent_content_ios_unittest.mm",
   ]
 
-  if (!is_ios) {
-    sources += [ "clipboard_recent_content_generic_unittest.cc" ]
-  }
-
   deps = [
     ":open_from_clipboard",
     ":open_from_clipboard_impl",
@@ -75,4 +72,9 @@ source_set("unit_tests") {
     "//ui/base:test_support",
     "//url",
   ]
+
+  if (!is_ios) {
+    sources += [ "clipboard_recent_content_generic_unittest.cc" ]
+    deps += [ "//ui/base/clipboard:clipboard_test_support" ]
+  }
 }
diff --git a/components/open_from_clipboard/clipboard_recent_content_generic_unittest.cc b/components/open_from_clipboard/clipboard_recent_content_generic_unittest.cc
index 83b9ac943cfe..3eb4c6a1e177 100644
--- a/components/open_from_clipboard/clipboard_recent_content_generic_unittest.cc
+++ b/components/open_from_clipboard/clipboard_recent_content_generic_unittest.cc
@@ -10,7 +10,7 @@
 #include "base/strings/string16.h"
 #include "base/time/time.h"
 #include "testing/gtest/include/gtest/gtest.h"
-#include "ui/base/test/test_clipboard.h"
+#include "ui/base/clipboard/test/test_clipboard.h"
 #include "url/gurl.h"
 
 class ClipboardRecentContentGenericTest : public testing::Test {
diff --git a/content/browser/BUILD.gn b/content/browser/BUILD.gn
index c89b65d27a7e..866e289e7cf8 100644
--- a/content/browser/BUILD.gn
+++ b/content/browser/BUILD.gn
@@ -198,6 +198,7 @@ jumbo_source_set("browser") {
     "//ui/accessibility:ax_enums_mojo",
     "//ui/base",
     "//ui/base:ui_features",
+    "//ui/base/clipboard",
     "//ui/base/ime",
     "//ui/display",
     "//ui/display/types",
diff --git a/content/browser/renderer_host/clipboard_host_impl.cc b/content/browser/renderer_host/clipboard_host_impl.cc
index 0b8dc1505a60..dd5362b1bb00 100644
--- a/content/browser/renderer_host/clipboard_host_impl.cc
+++ b/content/browser/renderer_host/clipboard_host_impl.cc
@@ -16,6 +16,7 @@
 #include "mojo/public/cpp/system/platform_handle.h"
 #include "third_party/skia/include/core/SkBitmap.h"
 #include "ui/base/clipboard/clipboard.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 #include "ui/base/clipboard/custom_data_helper.h"
 #include "ui/base/clipboard/scoped_clipboard_writer.h"
 #include "url/gurl.h"
@@ -65,23 +66,24 @@ void ClipboardHostImpl::IsFormatAvailable(blink::mojom::ClipboardFormat format,
   bool result = false;
   switch (format) {
     case blink::mojom::ClipboardFormat::kPlaintext:
-      result = clipboard_->IsFormatAvailable(
-                   ui::Clipboard::GetPlainTextWFormatType(), clipboard_type) ||
-               clipboard_->IsFormatAvailable(
-                   ui::Clipboard::GetPlainTextFormatType(), clipboard_type);
+      result =
+          clipboard_->IsFormatAvailable(
+              ui::ClipboardFormatType::GetPlainTextWType(), clipboard_type) ||
+          clipboard_->IsFormatAvailable(
+              ui::ClipboardFormatType::GetPlainTextType(), clipboard_type);
       break;
     case blink::mojom::ClipboardFormat::kHtml:
-      result = clipboard_->IsFormatAvailable(ui::Clipboard::GetHtmlFormatType(),
-                                             clipboard_type);
+      result = clipboard_->IsFormatAvailable(
+          ui::ClipboardFormatType::GetHtmlType(), clipboard_type);
       break;
     case blink::mojom::ClipboardFormat::kSmartPaste:
       result = clipboard_->IsFormatAvailable(
-          ui::Clipboard::GetWebKitSmartPasteFormatType(), clipboard_type);
+          ui::ClipboardFormatType::GetWebKitSmartPasteType(), clipboard_type);
       break;
     case blink::mojom::ClipboardFormat::kBookmark:
 #if defined(OS_WIN) || defined(OS_MACOSX)
-      result = clipboard_->IsFormatAvailable(ui::Clipboard::GetUrlWFormatType(),
-                                             clipboard_type);
+      result = clipboard_->IsFormatAvailable(
+          ui::ClipboardFormatType::GetUrlWType(), clipboard_type);
 #else
       result = false;
 #endif
@@ -93,11 +95,11 @@ void ClipboardHostImpl::IsFormatAvailable(blink::mojom::ClipboardFormat format,
 void ClipboardHostImpl::ReadText(ui::ClipboardType clipboard_type,
                                  ReadTextCallback callback) {
   base::string16 result;
-  if (clipboard_->IsFormatAvailable(ui::Clipboard::GetPlainTextWFormatType(),
-                                    clipboard_type)) {
+  if (clipboard_->IsFormatAvailable(
+          ui::ClipboardFormatType::GetPlainTextWType(), clipboard_type)) {
     clipboard_->ReadText(clipboard_type, &result);
   } else if (clipboard_->IsFormatAvailable(
-                 ui::Clipboard::GetPlainTextFormatType(), clipboard_type)) {
+                 ui::ClipboardFormatType::GetPlainTextType(), clipboard_type)) {
     std::string ascii;
     clipboard_->ReadAsciiText(clipboard_type, &ascii);
     result = base::ASCIIToUTF16(ascii);
@@ -159,7 +161,7 @@ void ClipboardHostImpl::WriteCustomData(
   base::Pickle pickle;
   ui::WriteCustomDataToPickle(data, &pickle);
   clipboard_writer_->WritePickledData(
-      pickle, ui::Clipboard::GetWebCustomDataFormatType());
+      pickle, ui::ClipboardFormatType::GetWebCustomDataType());
 }
 
 void ClipboardHostImpl::WriteBookmark(ui::ClipboardType,
diff --git a/content/browser/renderer_host/clipboard_host_impl_unittest.cc b/content/browser/renderer_host/clipboard_host_impl_unittest.cc
index 16556e49903d..128e01e4b045 100644
--- a/content/browser/renderer_host/clipboard_host_impl_unittest.cc
+++ b/content/browser/renderer_host/clipboard_host_impl_unittest.cc
@@ -15,7 +15,7 @@
 #include "mojo/public/cpp/system/message_pipe.h"
 #include "testing/gtest/include/gtest/gtest.h"
 #include "third_party/skia/include/core/SkBitmap.h"
-#include "ui/base/test/test_clipboard.h"
+#include "ui/base/clipboard/test/test_clipboard.h"
 #include "ui/gfx/skia_util.h"
 
 namespace content {
@@ -55,9 +55,10 @@ TEST_F(ClipboardHostImplTest, SimpleImage) {
   EXPECT_NE(sequence_number, system_clipboard()->GetSequenceNumber(
                                  ui::CLIPBOARD_TYPE_COPY_PASTE));
   EXPECT_FALSE(system_clipboard()->IsFormatAvailable(
-      ui::Clipboard::GetPlainTextFormatType(), ui::CLIPBOARD_TYPE_COPY_PASTE));
+      ui::ClipboardFormatType::GetPlainTextType(),
+      ui::CLIPBOARD_TYPE_COPY_PASTE));
   EXPECT_TRUE(system_clipboard()->IsFormatAvailable(
-      ui::Clipboard::GetBitmapFormatType(), ui::CLIPBOARD_TYPE_COPY_PASTE));
+      ui::ClipboardFormatType::GetBitmapType(), ui::CLIPBOARD_TYPE_COPY_PASTE));
 
   SkBitmap actual =
       system_clipboard()->ReadImage(ui::CLIPBOARD_TYPE_COPY_PASTE);
diff --git a/content/browser/renderer_host/render_widget_host_impl.cc b/content/browser/renderer_host/render_widget_host_impl.cc
index 9832053c72a8..7702cb66d6dc 100644
--- a/content/browser/renderer_host/render_widget_host_impl.cc
+++ b/content/browser/renderer_host/render_widget_host_impl.cc
@@ -100,7 +100,7 @@
 #include "skia/ext/platform_canvas.h"
 #include "storage/browser/fileapi/isolated_context.h"
 #include "third_party/blink/public/web/web_ime_text_span.h"
-#include "ui/base/clipboard/clipboard.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 #include "ui/base/ui_base_switches.h"
 #include "ui/display/display_switches.h"
 #include "ui/display/screen.h"
@@ -223,20 +223,17 @@ std::vector<DropData::Metadata> DropDataToMetaData(const DropData& drop_data) {
   std::vector<DropData::Metadata> metadata;
   if (!drop_data.text.is_null()) {
     metadata.push_back(DropData::Metadata::CreateForMimeType(
-        DropData::Kind::STRING,
-        base::ASCIIToUTF16(ui::Clipboard::kMimeTypeText)));
+        DropData::Kind::STRING, base::ASCIIToUTF16(ui::kMimeTypeText)));
   }
 
   if (drop_data.url.is_valid()) {
     metadata.push_back(DropData::Metadata::CreateForMimeType(
-        DropData::Kind::STRING,
-        base::ASCIIToUTF16(ui::Clipboard::kMimeTypeURIList)));
+        DropData::Kind::STRING, base::ASCIIToUTF16(ui::kMimeTypeURIList)));
   }
 
   if (!drop_data.html.is_null()) {
     metadata.push_back(DropData::Metadata::CreateForMimeType(
-        DropData::Kind::STRING,
-        base::ASCIIToUTF16(ui::Clipboard::kMimeTypeHTML)));
+        DropData::Kind::STRING, base::ASCIIToUTF16(ui::kMimeTypeHTML)));
   }
 
   // On Aura, filenames are available before drop.
diff --git a/content/browser/web_contents/web_contents_view_android.cc b/content/browser/web_contents/web_contents_view_android.cc
index 097eb030c7eb..14d203a42461 100644
--- a/content/browser/web_contents/web_contents_view_android.cc
+++ b/content/browser/web_contents/web_contents_view_android.cc
@@ -28,6 +28,7 @@
 #include "jni/DragEvent_jni.h"
 #include "ui/android/overscroll_refresh_handler.h"
 #include "ui/base/clipboard/clipboard.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 #include "ui/display/screen.h"
 #include "ui/events/android/drag_event_android.h"
 #include "ui/events/android/gesture_event_android.h"
@@ -413,9 +414,9 @@ bool WebContentsViewAndroid::OnDragEvent(const ui::DragEventAndroid& event) {
       base::string16 drop_content =
           ConvertJavaStringToUTF16(env, event.GetJavaContent());
       for (const base::string16& mime_type : event.mime_types()) {
-        if (base::EqualsASCII(mime_type, ui::Clipboard::kMimeTypeURIList)) {
+        if (base::EqualsASCII(mime_type, ui::kMimeTypeURIList)) {
           drop_data.url = GURL(drop_content);
-        } else if (base::EqualsASCII(mime_type, ui::Clipboard::kMimeTypeText)) {
+        } else if (base::EqualsASCII(mime_type, ui::kMimeTypeText)) {
           drop_data.text = base::NullableString16(drop_content, false);
         } else {
           drop_data.html = base::NullableString16(drop_content, false);
diff --git a/content/browser/web_contents/web_contents_view_aura.cc b/content/browser/web_contents/web_contents_view_aura.cc
index 12d8f9bd7cc5..f5b6f94a69fd 100644
--- a/content/browser/web_contents/web_contents_view_aura.cc
+++ b/content/browser/web_contents/web_contents_view_aura.cc
@@ -228,14 +228,13 @@ void PrepareDragForDownload(
 }
 #endif  // defined(OS_WIN)
 
-// Returns the FormatType to store file system files.
-const ui::Clipboard::FormatType& GetFileSystemFileFormatType() {
-  static base::NoDestructor<ui::Clipboard::FormatType> format(
-      ui::Clipboard::GetFormatType("chromium/x-file-system-files"));
+// Returns the ClipboardFormatType to store file system files.
+const ui::ClipboardFormatType& GetFileSystemFileFormatType() {
+  static base::NoDestructor<ui::ClipboardFormatType> format(
+      ui::ClipboardFormatType::GetType("chromium/x-file-system-files"));
   return *format;
 }
 
-
 // Utility to fill a ui::OSExchangeDataProvider object from DropData.
 void PrepareDragData(const DropData& drop_data,
                      ui::OSExchangeData::Provider* provider,
@@ -275,7 +274,7 @@ void PrepareDragData(const DropData& drop_data,
   if (!drop_data.custom_data.empty()) {
     base::Pickle pickle;
     ui::WriteCustomDataToPickle(drop_data.custom_data, &pickle);
-    provider->SetPickledData(ui::Clipboard::GetWebCustomDataFormatType(),
+    provider->SetPickledData(ui::ClipboardFormatType::GetWebCustomDataType(),
                              pickle);
   }
 }
@@ -315,7 +314,8 @@ void PrepareDropData(DropData* drop_data, const ui::OSExchangeData& data) {
           pickle, &file_system_files))
     drop_data->file_system_files = file_system_files;
 
-  if (data.GetPickledData(ui::Clipboard::GetWebCustomDataFormatType(), &pickle))
+  if (data.GetPickledData(ui::ClipboardFormatType::GetWebCustomDataType(),
+                          &pickle))
     ui::ReadCustomDataIntoMap(
         pickle.data(), pickle.size(), &drop_data->custom_data);
 }
diff --git a/content/browser/web_contents/web_drag_dest_mac.mm b/content/browser/web_contents/web_drag_dest_mac.mm
index 5bb3b17f12f5..a419e23e2f2b 100644
--- a/content/browser/web_contents/web_drag_dest_mac.mm
+++ b/content/browser/web_contents/web_drag_dest_mac.mm
@@ -18,6 +18,7 @@
 #include "content/public/common/drop_data.h"
 #include "third_party/blink/public/platform/web_input_event.h"
 #import "third_party/mozilla/NSPasteboard+Utils.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 #include "ui/base/clipboard/clipboard_util_mac.h"
 #include "ui/base/clipboard/custom_data_helper.h"
 #include "ui/base/cocoa/cocoa_base_utils.h"
diff --git a/content/browser/web_contents/web_drag_source_mac.mm b/content/browser/web_contents/web_drag_source_mac.mm
index 32f12c773784..a382631b3978 100644
--- a/content/browser/web_contents/web_drag_source_mac.mm
+++ b/content/browser/web_contents/web_drag_source_mac.mm
@@ -31,6 +31,7 @@
 #include "net/base/escape.h"
 #include "net/base/filename_util.h"
 #include "net/base/mime_util.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 #include "ui/base/clipboard/clipboard_util_mac.h"
 #include "ui/base/clipboard/custom_data_helper.h"
 #include "ui/base/cocoa/cocoa_base_utils.h"
diff --git a/content/public/test/browser_test_utils.cc b/content/public/test/browser_test_utils.cc
index 598ceb475458..544e35293db2 100644
--- a/content/public/test/browser_test_utils.cc
+++ b/content/public/test/browser_test_utils.cc
@@ -114,8 +114,8 @@
 #include "third_party/blink/public/mojom/filesystem/file_system.mojom.h"
 #include "ui/base/clipboard/clipboard.h"
 #include "ui/base/clipboard/scoped_clipboard_writer.h"
+#include "ui/base/clipboard/test/test_clipboard.h"
 #include "ui/base/resource/resource_bundle.h"
-#include "ui/base/test/test_clipboard.h"
 #include "ui/compositor/test/draw_waiter_for_test.h"
 #include "ui/events/base_event_utils.h"
 #include "ui/events/gesture_detection/gesture_configuration.h"
diff --git a/content/renderer/BUILD.gn b/content/renderer/BUILD.gn
index 730b78af0f14..b23f01740622 100644
--- a/content/renderer/BUILD.gn
+++ b/content/renderer/BUILD.gn
@@ -742,6 +742,7 @@ target(link_target_type, "renderer") {
     "//third_party/widevine/cdm:headers",
     "//ui/accessibility",
     "//ui/base",
+    "//ui/base/clipboard",
     "//ui/base/ime",
     "//ui/display",
     "//ui/events:dom_keycode_converter",
diff --git a/content/renderer/drop_data_builder.cc b/content/renderer/drop_data_builder.cc
index 28ec9b17652f..c4713d54ce33 100644
--- a/content/renderer/drop_data_builder.cc
+++ b/content/renderer/drop_data_builder.cc
@@ -13,7 +13,7 @@
 #include "third_party/blink/public/platform/web_drag_data.h"
 #include "third_party/blink/public/platform/web_string.h"
 #include "third_party/blink/public/platform/web_vector.h"
-#include "ui/base/clipboard/clipboard.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 
 using blink::WebDragData;
 using blink::WebString;
@@ -33,20 +33,20 @@ DropData DropDataBuilder::Build(const WebDragData& drag_data) {
     switch (item.storage_type) {
       case WebDragData::Item::kStorageTypeString: {
         base::string16 str_type(item.string_type.Utf16());
-        if (base::EqualsASCII(str_type, ui::Clipboard::kMimeTypeText)) {
+        if (base::EqualsASCII(str_type, ui::kMimeTypeText)) {
           result.text = WebString::ToNullableString16(item.string_data);
           break;
         }
-        if (base::EqualsASCII(str_type, ui::Clipboard::kMimeTypeURIList)) {
+        if (base::EqualsASCII(str_type, ui::kMimeTypeURIList)) {
           result.url = blink::WebStringToGURL(item.string_data);
           result.url_title = item.title.Utf16();
           break;
         }
-        if (base::EqualsASCII(str_type, ui::Clipboard::kMimeTypeDownloadURL)) {
+        if (base::EqualsASCII(str_type, ui::kMimeTypeDownloadURL)) {
           result.download_metadata = item.string_data.Utf16();
           break;
         }
-        if (base::EqualsASCII(str_type, ui::Clipboard::kMimeTypeHTML)) {
+        if (base::EqualsASCII(str_type, ui::kMimeTypeHTML)) {
           result.html = WebString::ToNullableString16(item.string_data);
           result.html_base_url = item.base_url;
           break;
diff --git a/content/renderer/render_widget.cc b/content/renderer/render_widget.cc
index 121519c661b4..f3c8bd0c48dd 100644
--- a/content/renderer/render_widget.cc
+++ b/content/renderer/render_widget.cc
@@ -107,7 +107,7 @@
 #include "third_party/blink/public/web/web_view.h"
 #include "third_party/blink/public/web/web_widget.h"
 #include "third_party/skia/include/core/SkShader.h"
-#include "ui/base/clipboard/clipboard.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 #include "ui/base/ui_base_features.h"
 #include "ui/base/ui_base_switches.h"
 #include "ui/events/base_event_utils.h"
@@ -227,8 +227,7 @@ WebDragData DropMetaDataToWebDragData(
       // DropData::MetaData --> WebDragData-->DropData. In the end, DropData
       // will contain an empty URL (which means no URL is dragged) if the URL in
       // WebDragData is empty.
-      if (base::EqualsASCII(meta_data_item.mime_type,
-                            ui::Clipboard::kMimeTypeURIList)) {
+      if (base::EqualsASCII(meta_data_item.mime_type, ui::kMimeTypeURIList)) {
         item.string_data = WebString::FromUTF8("about:dragdrop-placeholder");
       }
       item_list.push_back(item);
@@ -273,7 +272,7 @@ WebDragData DropDataToWebDragData(const DropData& drop_data) {
   if (!drop_data.text.is_null()) {
     WebDragData::Item item;
     item.storage_type = WebDragData::Item::kStorageTypeString;
-    item.string_type = WebString::FromUTF8(ui::Clipboard::kMimeTypeText);
+    item.string_type = WebString::FromUTF8(ui::kMimeTypeText);
     item.string_data = WebString::FromUTF16(drop_data.text.string());
     item_list.push_back(item);
   }
@@ -281,7 +280,7 @@ WebDragData DropDataToWebDragData(const DropData& drop_data) {
   if (!drop_data.url.is_empty()) {
     WebDragData::Item item;
     item.storage_type = WebDragData::Item::kStorageTypeString;
-    item.string_type = WebString::FromUTF8(ui::Clipboard::kMimeTypeURIList);
+    item.string_type = WebString::FromUTF8(ui::kMimeTypeURIList);
     item.string_data = WebString::FromUTF8(drop_data.url.spec());
     item.title = WebString::FromUTF16(drop_data.url_title);
     item_list.push_back(item);
@@ -290,7 +289,7 @@ WebDragData DropDataToWebDragData(const DropData& drop_data) {
   if (!drop_data.html.is_null()) {
     WebDragData::Item item;
     item.storage_type = WebDragData::Item::kStorageTypeString;
-    item.string_type = WebString::FromUTF8(ui::Clipboard::kMimeTypeHTML);
+    item.string_type = WebString::FromUTF8(ui::kMimeTypeHTML);
     item.string_data = WebString::FromUTF16(drop_data.html.string());
     item.base_url = drop_data.html_base_url;
     item_list.push_back(item);
diff --git a/content/shell/BUILD.gn b/content/shell/BUILD.gn
index 791da472be08..4120e6801c23 100644
--- a/content/shell/BUILD.gn
+++ b/content/shell/BUILD.gn
@@ -324,6 +324,7 @@ jumbo_static_library("content_shell_lib") {
     "//third_party/blink/public:test_support",
     "//third_party/icu",
     "//ui/base",
+    "//ui/base/clipboard",
     "//ui/base/ime",
     "//ui/display",
     "//ui/events:events_base",
diff --git a/content/test/BUILD.gn b/content/test/BUILD.gn
index db7ecb0591b2..97591ae45a0d 100644
--- a/content/test/BUILD.gn
+++ b/content/test/BUILD.gn
@@ -379,6 +379,8 @@ jumbo_static_library("test_support") {
     "//ui/base",
     "//ui/base:test_support",
     "//ui/base:ui_data_pack",
+    "//ui/base/clipboard",
+    "//ui/base/clipboard:clipboard_test_support",
     "//ui/base/ime",
     "//ui/compositor:test_support",
     "//ui/display",
@@ -1014,6 +1016,7 @@ test("content_browsertests") {
     "//ui/accessibility",
     "//ui/accessibility:ax_enums_mojo",
     "//ui/base:test_support",
+    "//ui/base/clipboard",
     "//ui/base/ime",
     "//ui/compositor",
     "//ui/display",
@@ -1953,6 +1956,7 @@ test("content_unittests") {
     "//third_party/widevine/cdm:headers",
     "//ui/accessibility",
     "//ui/base:test_support",
+    "//ui/base/clipboard:clipboard_test_support",
     "//ui/base/ime",
     "//ui/compositor:test_support",
     "//ui/display",
diff --git a/headless/BUILD.gn b/headless/BUILD.gn
index 24d952dbfaf9..e886b4e67901 100644
--- a/headless/BUILD.gn
+++ b/headless/BUILD.gn
@@ -403,6 +403,7 @@ jumbo_component("headless") {
     "//content/public/common:service_names",
     "//services/service_manager/public/cpp",
     "//ui/base",
+    "//ui/base/clipboard",
     "//ui/compositor",
     "//ui/display",
     "//ui/events/devices",
@@ -739,6 +740,7 @@ test("headless_browsertests") {
     "//services/network/public/mojom",
     "//testing/gmock",
     "//testing/gtest",
+    "//ui/base/clipboard",
   ]
 
   if (!is_fuchsia) {
diff --git a/headless/lib/browser/headless_clipboard.cc b/headless/lib/browser/headless_clipboard.cc
index 9b9fd0697467..ccf616ff0367 100644
--- a/headless/lib/browser/headless_clipboard.cc
+++ b/headless/lib/browser/headless_clipboard.cc
@@ -7,6 +7,7 @@
 #include "base/memory/ptr_util.h"
 #include "base/numerics/safe_conversions.h"
 #include "base/strings/utf_string_conversions.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 
 namespace headless {
 
@@ -21,7 +22,7 @@ uint64_t HeadlessClipboard::GetSequenceNumber(ui::ClipboardType type) const {
   return GetStore(type).sequence_number;
 }
 
-bool HeadlessClipboard::IsFormatAvailable(const FormatType& format,
+bool HeadlessClipboard::IsFormatAvailable(const ui::ClipboardFormatType& format,
                                           ui::ClipboardType type) const {
   const DataStore& store = GetStore(type);
   return store.data.find(format) != store.data.end();
@@ -36,15 +37,15 @@ void HeadlessClipboard::ReadAvailableTypes(ui::ClipboardType type,
                                            bool* contains_filenames) const {
   types->clear();
 
-  if (IsFormatAvailable(Clipboard::GetPlainTextFormatType(), type))
-    types->push_back(base::UTF8ToUTF16(kMimeTypeText));
-  if (IsFormatAvailable(Clipboard::GetHtmlFormatType(), type))
-    types->push_back(base::UTF8ToUTF16(kMimeTypeHTML));
+  if (IsFormatAvailable(ui::ClipboardFormatType::GetPlainTextType(), type))
+    types->push_back(base::UTF8ToUTF16(ui::kMimeTypeText));
+  if (IsFormatAvailable(ui::ClipboardFormatType::GetHtmlType(), type))
+    types->push_back(base::UTF8ToUTF16(ui::kMimeTypeHTML));
 
-  if (IsFormatAvailable(Clipboard::GetRtfFormatType(), type))
-    types->push_back(base::UTF8ToUTF16(kMimeTypeRTF));
-  if (IsFormatAvailable(Clipboard::GetBitmapFormatType(), type))
-    types->push_back(base::UTF8ToUTF16(kMimeTypePNG));
+  if (IsFormatAvailable(ui::ClipboardFormatType::GetRtfType(), type))
+    types->push_back(base::UTF8ToUTF16(ui::kMimeTypeRTF));
+  if (IsFormatAvailable(ui::ClipboardFormatType::GetBitmapType(), type))
+    types->push_back(base::UTF8ToUTF16(ui::kMimeTypePNG));
 
   *contains_filenames = false;
 }
@@ -60,7 +61,7 @@ void HeadlessClipboard::ReadAsciiText(ui::ClipboardType type,
                                       std::string* result) const {
   result->clear();
   const DataStore& store = GetStore(type);
-  auto it = store.data.find(GetPlainTextFormatType());
+  auto it = store.data.find(ui::ClipboardFormatType::GetPlainTextType());
   if (it != store.data.end())
     *result = it->second;
 }
@@ -73,7 +74,7 @@ void HeadlessClipboard::ReadHTML(ui::ClipboardType type,
   markup->clear();
   src_url->clear();
   const DataStore& store = GetStore(type);
-  auto it = store.data.find(GetHtmlFormatType());
+  auto it = store.data.find(ui::ClipboardFormatType::GetHtmlType());
   if (it != store.data.end())
     *markup = base::UTF8ToUTF16(it->second);
   *src_url = store.html_src_url;
@@ -85,7 +86,7 @@ void HeadlessClipboard::ReadRTF(ui::ClipboardType type,
                                 std::string* result) const {
   result->clear();
   const DataStore& store = GetStore(type);
-  auto it = store.data.find(GetRtfFormatType());
+  auto it = store.data.find(ui::ClipboardFormatType::GetRtfType());
   if (it != store.data.end())
     *result = it->second;
 }
@@ -101,13 +102,13 @@ void HeadlessClipboard::ReadCustomData(ui::ClipboardType clipboard_type,
 void HeadlessClipboard::ReadBookmark(base::string16* title,
                                      std::string* url) const {
   const DataStore& store = GetDefaultStore();
-  auto it = store.data.find(GetUrlWFormatType());
+  auto it = store.data.find(ui::ClipboardFormatType::GetUrlWType());
   if (it != store.data.end())
     *url = it->second;
   *title = base::UTF8ToUTF16(store.url_title);
 }
 
-void HeadlessClipboard::ReadData(const FormatType& format,
+void HeadlessClipboard::ReadData(const ui::ClipboardFormatType& format,
                                  std::string* result) const {
   result->clear();
   const DataStore& store = GetDefaultStore();
@@ -127,12 +128,12 @@ void HeadlessClipboard::WriteObjects(ui::ClipboardType type,
 
 void HeadlessClipboard::WriteText(const char* text_data, size_t text_len) {
   std::string text(text_data, text_len);
-  GetDefaultStore().data[GetPlainTextFormatType()] = text;
+  GetDefaultStore().data[ui::ClipboardFormatType::GetPlainTextType()] = text;
   // Create a dummy entry.
-  GetDefaultStore().data[GetPlainTextWFormatType()];
+  GetDefaultStore().data[ui::ClipboardFormatType::GetPlainTextType()];
   if (IsSupportedClipboardType(ui::CLIPBOARD_TYPE_SELECTION)) {
-    GetStore(ui::CLIPBOARD_TYPE_SELECTION).data[GetPlainTextFormatType()] =
-        text;
+    GetStore(ui::CLIPBOARD_TYPE_SELECTION)
+        .data[ui::ClipboardFormatType::GetPlainTextType()] = text;
   }
 }
 
@@ -142,37 +143,40 @@ void HeadlessClipboard::WriteHTML(const char* markup_data,
                                   size_t url_len) {
   base::string16 markup;
   base::UTF8ToUTF16(markup_data, markup_len, &markup);
-  GetDefaultStore().data[GetHtmlFormatType()] = base::UTF16ToUTF8(markup);
+  GetDefaultStore().data[ui::ClipboardFormatType::GetHtmlType()] =
+      base::UTF16ToUTF8(markup);
   GetDefaultStore().html_src_url = std::string(url_data, url_len);
 }
 
 void HeadlessClipboard::WriteRTF(const char* rtf_data, size_t data_len) {
-  GetDefaultStore().data[GetRtfFormatType()] = std::string(rtf_data, data_len);
+  GetDefaultStore().data[ui::ClipboardFormatType::GetRtfType()] =
+      std::string(rtf_data, data_len);
 }
 
 void HeadlessClipboard::WriteBookmark(const char* title_data,
                                       size_t title_len,
                                       const char* url_data,
                                       size_t url_len) {
-  GetDefaultStore().data[GetUrlWFormatType()] = std::string(url_data, url_len);
+  GetDefaultStore().data[ui::ClipboardFormatType::GetUrlWType()] =
+      std::string(url_data, url_len);
   GetDefaultStore().url_title = std::string(title_data, title_len);
 }
 
 void HeadlessClipboard::WriteWebSmartPaste() {
   // Create a dummy entry.
-  GetDefaultStore().data[GetWebKitSmartPasteFormatType()];
+  GetDefaultStore().data[ui::ClipboardFormatType::GetWebKitSmartPasteType()];
 }
 
 void HeadlessClipboard::WriteBitmap(const SkBitmap& bitmap) {
   // Create a dummy entry.
-  GetDefaultStore().data[GetBitmapFormatType()];
+  GetDefaultStore().data[ui::ClipboardFormatType::GetBitmapType()];
   SkBitmap& dst = GetDefaultStore().image;
   if (dst.tryAllocPixels(bitmap.info())) {
     bitmap.readPixels(dst.info(), dst.getPixels(), dst.rowBytes(), 0, 0);
   }
 }
 
-void HeadlessClipboard::WriteData(const FormatType& format,
+void HeadlessClipboard::WriteData(const ui::ClipboardFormatType& format,
                                   const char* data_data,
                                   size_t data_len) {
   GetDefaultStore().data[format] = std::string(data_data, data_len);
diff --git a/headless/lib/browser/headless_clipboard.h b/headless/lib/browser/headless_clipboard.h
index 720d553ed91c..e687ef4fd493 100644
--- a/headless/lib/browser/headless_clipboard.h
+++ b/headless/lib/browser/headless_clipboard.h
@@ -25,7 +25,7 @@ class HeadlessClipboard : public ui::Clipboard {
   // Clipboard overrides.
   void OnPreShutdown() override;
   uint64_t GetSequenceNumber(ui::ClipboardType type) const override;
-  bool IsFormatAvailable(const FormatType& format,
+  bool IsFormatAvailable(const ui::ClipboardFormatType& format,
                          ui::ClipboardType type) const override;
   void Clear(ui::ClipboardType type) override;
   void ReadAvailableTypes(ui::ClipboardType type,
@@ -45,7 +45,8 @@ class HeadlessClipboard : public ui::Clipboard {
                       const base::string16& type,
                       base::string16* result) const override;
   void ReadBookmark(base::string16* title, std::string* url) const override;
-  void ReadData(const FormatType& format, std::string* result) const override;
+  void ReadData(const ui::ClipboardFormatType& format,
+                std::string* result) const override;
   void WriteObjects(ui::ClipboardType type, const ObjectMap& objects) override;
   void WriteText(const char* text_data, size_t text_len) override;
   void WriteHTML(const char* markup_data,
@@ -59,7 +60,7 @@ class HeadlessClipboard : public ui::Clipboard {
                      size_t url_len) override;
   void WriteWebSmartPaste() override;
   void WriteBitmap(const SkBitmap& bitmap) override;
-  void WriteData(const FormatType& format,
+  void WriteData(const ui::ClipboardFormatType& format,
                  const char* data_data,
                  size_t data_len) override;
 
@@ -69,7 +70,7 @@ class HeadlessClipboard : public ui::Clipboard {
     ~DataStore();
     void Clear();
     uint64_t sequence_number;
-    std::map<FormatType, std::string> data;
+    std::map<ui::ClipboardFormatType, std::string> data;
     std::string url_title;
     std::string html_src_url;
     SkBitmap image;
diff --git a/ui/aura/BUILD.gn b/ui/aura/BUILD.gn
index b02ca41ac97e..8498f418b163 100644
--- a/ui/aura/BUILD.gn
+++ b/ui/aura/BUILD.gn
@@ -184,6 +184,7 @@ jumbo_component("aura") {
     "//services/ws/public/mojom",
     "//skia",
     "//ui/base",
+    "//ui/base/clipboard",
     "//ui/base/ime",
     "//ui/display",
     "//ui/events",
@@ -418,6 +419,7 @@ test("aura_unittests") {
     "//testing/gtest",
     "//ui/aura_extra",
     "//ui/base:test_support",
+    "//ui/base/clipboard:clipboard_types",
     "//ui/compositor:test_support",
     "//ui/compositor_extra",
     "//ui/display:test_support",
diff --git a/ui/aura/mus/os_exchange_data_provider_mus.cc b/ui/aura/mus/os_exchange_data_provider_mus.cc
index f8e327cd09b7..587516a4f863 100644
--- a/ui/aura/mus/os_exchange_data_provider_mus.cc
+++ b/ui/aura/mus/os_exchange_data_provider_mus.cc
@@ -15,6 +15,8 @@
 #include "base/strings/string_util.h"
 #include "base/strings/utf_string_conversions.h"
 #include "net/base/filename_util.h"
+#include "ui/base/clipboard/clipboard_constants.h"
+#include "ui/base/clipboard/clipboard_format_type.h"
 #include "ui/base/dragdrop/file_info.h"
 #include "ui/base/mojo/clipboard.mojom.h"
 #include "url/gurl.h"
@@ -87,8 +89,7 @@ void OSExchangeDataProviderMus::SetString(const base::string16& data) {
   if (HasString())
     return;
 
-  mime_data_[ui::Clipboard::kMimeTypeText] =
-      FromString(base::UTF16ToUTF8(data));
+  mime_data_[ui::kMimeTypeText] = FromString(base::UTF16ToUTF8(data));
 }
 
 void OSExchangeDataProviderMus::SetURL(const GURL& url,
@@ -98,10 +99,10 @@ void OSExchangeDataProviderMus::SetURL(const GURL& url,
   AddString16ToVector(spec, &data);
   AddString16ToVector(base::ASCIIToUTF16("\n"), &data);
   AddString16ToVector(title, &data);
-  mime_data_[ui::Clipboard::kMimeTypeMozillaURL] = std::move(data);
+  mime_data_[ui::kMimeTypeMozillaURL] = std::move(data);
 
-  if (!base::ContainsKey(mime_data_, ui::Clipboard::kMimeTypeText))
-    mime_data_[ui::Clipboard::kMimeTypeText] = FromString(url.spec());
+  if (!base::ContainsKey(mime_data_, ui::kMimeTypeText))
+    mime_data_[ui::kMimeTypeText] = FromString(url.spec());
 }
 
 void OSExchangeDataProviderMus::SetFilename(const base::FilePath& path) {
@@ -120,11 +121,11 @@ void OSExchangeDataProviderMus::SetFilenames(
   }
 
   std::string joined_data = base::JoinString(paths, "\n");
-  mime_data_[ui::Clipboard::kMimeTypeURIList] = FromString(joined_data);
+  mime_data_[ui::kMimeTypeURIList] = FromString(joined_data);
 }
 
 void OSExchangeDataProviderMus::SetPickledData(
-    const ui::Clipboard::FormatType& format,
+    const ui::ClipboardFormatType& format,
     const base::Pickle& pickle) {
   const unsigned char* bytes =
       reinterpret_cast<const unsigned char*>(pickle.data());
@@ -134,7 +135,7 @@ void OSExchangeDataProviderMus::SetPickledData(
 }
 
 bool OSExchangeDataProviderMus::GetString(base::string16* data) const {
-  auto it = mime_data_.find(ui::Clipboard::kMimeTypeText);
+  auto it = mime_data_.find(ui::kMimeTypeText);
   if (it != mime_data_.end())
     *data = base::UTF8ToUTF16(ToString(it->second));
   return it != mime_data_.end();
@@ -144,7 +145,7 @@ bool OSExchangeDataProviderMus::GetURLAndTitle(
     ui::OSExchangeData::FilenameToURLPolicy policy,
     GURL* url,
     base::string16* title) const {
-  auto it = mime_data_.find(ui::Clipboard::kMimeTypeMozillaURL);
+  auto it = mime_data_.find(ui::kMimeTypeMozillaURL);
   if (it == mime_data_.end()) {
     title->clear();
     return GetPlainTextURL(url) ||
@@ -177,7 +178,7 @@ bool OSExchangeDataProviderMus::GetFilename(base::FilePath* path) const {
 
 bool OSExchangeDataProviderMus::GetFilenames(
     std::vector<ui::FileInfo>* file_names) const {
-  auto it = mime_data_.find(ui::Clipboard::kMimeTypeURIList);
+  auto it = mime_data_.find(ui::kMimeTypeURIList);
   if (it == mime_data_.end())
     return false;
 
@@ -193,7 +194,7 @@ bool OSExchangeDataProviderMus::GetFilenames(
 }
 
 bool OSExchangeDataProviderMus::GetPickledData(
-    const ui::Clipboard::FormatType& format,
+    const ui::ClipboardFormatType& format,
     base::Pickle* data) const {
   auto it = mime_data_.find(format.Serialize());
   if (it == mime_data_.end())
@@ -207,15 +208,15 @@ bool OSExchangeDataProviderMus::GetPickledData(
 }
 
 bool OSExchangeDataProviderMus::HasString() const {
-  return base::ContainsKey(mime_data_, ui::Clipboard::kMimeTypeText);
+  return base::ContainsKey(mime_data_, ui::kMimeTypeText);
 }
 
 bool OSExchangeDataProviderMus::HasURL(
     ui::OSExchangeData::FilenameToURLPolicy policy) const {
-  if (base::ContainsKey(mime_data_, ui::Clipboard::kMimeTypeMozillaURL))
+  if (base::ContainsKey(mime_data_, ui::kMimeTypeMozillaURL))
     return true;
 
-  auto it = mime_data_.find(ui::Clipboard::kMimeTypeURIList);
+  auto it = mime_data_.find(ui::kMimeTypeURIList);
   if (it == mime_data_.end())
     return false;
 
@@ -230,7 +231,7 @@ bool OSExchangeDataProviderMus::HasURL(
 }
 
 bool OSExchangeDataProviderMus::HasFile() const {
-  auto it = mime_data_.find(ui::Clipboard::kMimeTypeURIList);
+  auto it = mime_data_.find(ui::kMimeTypeURIList);
   if (it == mime_data_.end())
     return false;
 
@@ -245,7 +246,7 @@ bool OSExchangeDataProviderMus::HasFile() const {
 }
 
 bool OSExchangeDataProviderMus::HasCustomFormat(
-    const ui::Clipboard::FormatType& format) const {
+    const ui::ClipboardFormatType& format) const {
   return base::ContainsKey(mime_data_, format.Serialize());
 }
 
@@ -281,12 +282,12 @@ void OSExchangeDataProviderMus::SetHtml(const base::string16& html,
   bytes.push_back(0xFF);
   bytes.push_back(0xFE);
   AddString16ToVector(html, &bytes);
-  mime_data_[ui::Clipboard::kMimeTypeHTML] = bytes;
+  mime_data_[ui::kMimeTypeHTML] = bytes;
 }
 
 bool OSExchangeDataProviderMus::GetHtml(base::string16* html,
                                         GURL* base_url) const {
-  auto it = mime_data_.find(ui::Clipboard::kMimeTypeHTML);
+  auto it = mime_data_.find(ui::kMimeTypeHTML);
   if (it == mime_data_.end())
     return false;
 
@@ -313,7 +314,7 @@ bool OSExchangeDataProviderMus::GetHtml(base::string16* html,
 }
 
 bool OSExchangeDataProviderMus::HasHtml() const {
-  return base::ContainsKey(mime_data_, ui::Clipboard::kMimeTypeHTML);
+  return base::ContainsKey(mime_data_, ui::kMimeTypeHTML);
 }
 #endif
 
diff --git a/ui/aura/mus/os_exchange_data_provider_mus.h b/ui/aura/mus/os_exchange_data_provider_mus.h
index 27a541950dd9..ce1b44a0d701 100644
--- a/ui/aura/mus/os_exchange_data_provider_mus.h
+++ b/ui/aura/mus/os_exchange_data_provider_mus.h
@@ -46,7 +46,7 @@ class AURA_EXPORT OSExchangeDataProviderMus
   void SetURL(const GURL& url, const base::string16& title) override;
   void SetFilename(const base::FilePath& path) override;
   void SetFilenames(const std::vector<ui::FileInfo>& file_names) override;
-  void SetPickledData(const ui::Clipboard::FormatType& format,
+  void SetPickledData(const ui::ClipboardFormatType& format,
                       const base::Pickle& data) override;
 
   bool GetString(base::string16* data) const override;
@@ -55,13 +55,13 @@ class AURA_EXPORT OSExchangeDataProviderMus
                       base::string16* title) const override;
   bool GetFilename(base::FilePath* path) const override;
   bool GetFilenames(std::vector<ui::FileInfo>* file_names) const override;
-  bool GetPickledData(const ui::Clipboard::FormatType& format,
+  bool GetPickledData(const ui::ClipboardFormatType& format,
                       base::Pickle* data) const override;
 
   bool HasString() const override;
   bool HasURL(ui::OSExchangeData::FilenameToURLPolicy policy) const override;
   bool HasFile() const override;
-  bool HasCustomFormat(const ui::Clipboard::FormatType& format) const override;
+  bool HasCustomFormat(const ui::ClipboardFormatType& format) const override;
 
 // Provider doesn't have a consistent interface between operating systems;
 // this wasn't seen as a problem when there was a single Provider subclass
diff --git a/ui/aura/mus/os_exchange_data_provider_mus_unittest.cc b/ui/aura/mus/os_exchange_data_provider_mus_unittest.cc
index 225a515a7546..4eea746aefcc 100644
--- a/ui/aura/mus/os_exchange_data_provider_mus_unittest.cc
+++ b/ui/aura/mus/os_exchange_data_provider_mus_unittest.cc
@@ -14,12 +14,12 @@
 #include "net/base/filename_util.h"
 #include "testing/gtest/include/gtest/gtest.h"
 #include "testing/platform_test.h"
+#include "ui/base/clipboard/clipboard_format_type.h"
 #include "ui/base/dragdrop/os_exchange_data.h"
 #include "ui/base/dragdrop/os_exchange_data_provider_factory.h"
 #include "ui/events/platform/platform_event_source.h"
 #include "url/gurl.h"
 
-using ui::Clipboard;
 using ui::OSExchangeData;
 
 namespace aura {
@@ -171,8 +171,8 @@ TEST_F(OSExchangeDataProviderMusTest, TestFileToURLConversion) {
 }
 
 TEST_F(OSExchangeDataProviderMusTest, TestPickledData) {
-  const Clipboard::FormatType kTestFormat =
-      Clipboard::GetFormatType("application/vnd.chromium.test");
+  const ui::ClipboardFormatType kTestFormat =
+      ui::ClipboardFormatType::GetType("application/vnd.chromium.test");
 
   base::Pickle saved_pickle;
   saved_pickle.WriteInt(1);
diff --git a/ui/base/BUILD.gn b/ui/base/BUILD.gn
index 0364813ec748..f1c9532d36a7 100644
--- a/ui/base/BUILD.gn
+++ b/ui/base/BUILD.gn
@@ -79,18 +79,6 @@ jumbo_component("base") {
     "accelerators/platform_accelerator_cocoa.mm",
     "class_property.cc",
     "class_property.h",
-    "clipboard/clipboard_android.cc",
-    "clipboard/clipboard_android.h",
-    "clipboard/clipboard_mac.h",
-    "clipboard/clipboard_mac.mm",
-    "clipboard/clipboard_types.h",
-    "clipboard/clipboard_util_mac.h",
-    "clipboard/clipboard_util_mac.mm",
-    "clipboard/clipboard_util_win.cc",
-    "clipboard/clipboard_util_win.h",
-    "clipboard/clipboard_win.cc",
-    "clipboard/clipboard_win.h",
-    "clipboard/custom_data_helper_mac.mm",
     "cocoa/accessibility_focus_overrider.h",
     "cocoa/accessibility_focus_overrider.mm",
     "cocoa/animation_utils.h",
@@ -324,16 +312,6 @@ jumbo_component("base") {
       "accelerators/accelerator_manager.h",
       "base_window.cc",
       "base_window.h",
-      "clipboard/clipboard.cc",
-      "clipboard/clipboard.h",
-      "clipboard/clipboard_constants.cc",
-      "clipboard/clipboard_monitor.cc",
-      "clipboard/clipboard_monitor.h",
-      "clipboard/clipboard_observer.h",
-      "clipboard/custom_data_helper.cc",
-      "clipboard/custom_data_helper.h",
-      "clipboard/scoped_clipboard_writer.cc",
-      "clipboard/scoped_clipboard_writer.h",
       "cocoa/bubble_closer.h",
       "cocoa/bubble_closer.mm",
       "cursor/cursor_util.cc",
@@ -422,6 +400,7 @@ jumbo_component("base") {
     "//net",
     "//third_party/icu",
     "//third_party/zlib:zlib",
+    "//ui/base/clipboard:clipboard_types",
     "//ui/display",
     "//ui/events",
     "//ui/events/devices",
@@ -534,6 +513,10 @@ jumbo_component("base") {
     ]
   }
 
+  if (is_mac || is_win) {
+    deps += [ "//ui/base/clipboard" ]
+  }
+
   libs = []
   if (is_win) {
     sources += [
@@ -632,20 +615,6 @@ jumbo_component("base") {
   }
 
   if (use_aura) {
-    # Aura clipboard.
-    if (use_x11 && is_desktop_linux) {
-      sources += [
-        "clipboard/clipboard_aurax11.cc",
-        "clipboard/clipboard_aurax11.h",
-      ]
-    } else if (!is_win) {
-      # This file is used for all non-X11, non-Windows aura Builds.
-      sources += [
-        "clipboard/clipboard_aura.cc",
-        "clipboard/clipboard_aura.h",
-      ]
-    }
-
     # Cursor
     sources += [
       "cursor/cursors_aura.cc",
@@ -692,8 +661,6 @@ jumbo_static_library("test_support") {
       "test/scoped_fake_nswindow_fullscreen.mm",
       "test/scoped_preferred_scroller_style_mac.h",
       "test/scoped_preferred_scroller_style_mac.mm",
-      "test/test_clipboard.cc",
-      "test/test_clipboard.h",
       "test/view_tree_validator.h",
       "test/view_tree_validator.mm",
       "test/windowed_nsnotification_observer.h",
@@ -792,8 +759,6 @@ bundle_data("ui_base_unittests_bundle_data") {
 test("ui_base_unittests") {
   sources = [
     "class_property_unittest.cc",
-    "clipboard/clipboard_mac_unittest.mm",
-    "clipboard/clipboard_util_mac_unittest.mm",
     "l10n/l10n_util_mac_unittest.mm",
     "l10n/l10n_util_unittest.cc",
     "l10n/time_format_unittest.cc",
@@ -815,7 +780,6 @@ test("ui_base_unittests") {
   if (!is_ios) {
     sources += [
       "test/scoped_fake_nswindow_fullscreen_unittest.mm",
-      "test/test_clipboard_unittest.cc",
       "test/view_tree_validator_unittest.mm",
     ]
   }
@@ -843,7 +807,6 @@ test("ui_base_unittests") {
       "accelerators/menu_label_accelerator_util_linux_unittest.cc",
       "accelerators/menu_label_accelerator_util_unittest.cc",
       "accelerators/platform_accelerator_cocoa_unittest.mm",
-      "clipboard/custom_data_helper_unittest.cc",
       "cocoa/base_view_unittest.mm",
       "cocoa/bubble_closer_unittest.mm",
       "cocoa/cocoa_base_utils_unittest.mm",
@@ -906,6 +869,8 @@ test("ui_base_unittests") {
     "//ui/base",
     "//ui/base:test_support",
     "//ui/base:ui_data_pack",
+    "//ui/base/clipboard:clipboard_test",
+    "//ui/base/clipboard:clipboard_types",
     "//ui/display",
     "//ui/events:events_base",
     "//ui/events:test_support",
diff --git a/ui/base/clipboard/BUILD.gn b/ui/base/clipboard/BUILD.gn
new file mode 100644
index 000000000000..e18f111b5944
--- /dev/null
+++ b/ui/base/clipboard/BUILD.gn
@@ -0,0 +1,165 @@
+# Copyright 2019 The Chromium Authors. All rights reserved.
+# Use of this source code is governed by a BSD-style license that can be
+# found in the LICENSE file.
+
+import("//build/config/jumbo.gni")
+import("//build/config/ui.gni")
+
+jumbo_component("clipboard_types") {
+  output_name = "ui_base_clipboard_types"
+  sources = [
+    "clipboard_constants.cc",
+    "clipboard_constants.h",
+    "clipboard_constants_mac.mm",
+    "clipboard_format_type_android.cc",
+    "clipboard_format_type_mac.mm",
+    "clipboard_format_type_win.cc",
+    "clipboard_types.h",
+  ]
+
+  if (!is_ios) {
+    if (use_aura) {
+      if ((use_x11 && is_desktop_linux) || !is_win) {
+        sources += [ "clipboard_format_type_aura.cc" ]
+      }
+    }
+
+    sources += [ "clipboard_format_type.h" ]
+  }
+
+  defines = [ "IS_BASE_CLIPBOARD_TYPES_IMPL" ]
+
+  deps = [
+    "//base",
+  ]
+
+  libs = []
+  if (is_mac) {
+    libs += [
+      "AppKit.framework",
+      "CoreFoundation.framework",
+    ]
+  }
+}
+
+jumbo_component("clipboard") {
+  output_name = "ui_base_clipboard"
+
+  sources = [
+    "clipboard.cc",
+    "clipboard.h",
+    "clipboard_android.cc",
+    "clipboard_android.h",
+    "clipboard_mac.h",
+    "clipboard_mac.mm",
+    "clipboard_monitor.cc",
+    "clipboard_monitor.h",
+    "clipboard_observer.h",
+    "clipboard_util_mac.h",
+    "clipboard_util_mac.mm",
+    "clipboard_util_win.cc",
+    "clipboard_util_win.h",
+    "clipboard_win.cc",
+    "clipboard_win.h",
+    "custom_data_helper.cc",
+    "custom_data_helper.h",
+    "scoped_clipboard_writer.cc",
+    "scoped_clipboard_writer.h",
+  ]
+
+  defines = [ "IS_BASE_CLIPBOARD_IMPL" ]
+
+  deps = [
+    "//base",
+    "//net",
+    "//skia",
+    "//ui/events/platform",
+    "//ui/gfx",
+    "//ui/gfx/geometry",
+  ]
+
+  public_deps = [
+    ":clipboard_types",
+  ]
+
+  if (use_aura) {
+    # Aura clipboard.
+    if (use_x11 && is_desktop_linux) {
+      sources += [
+        "clipboard_aurax11.cc",
+        "clipboard_aurax11.h",
+      ]
+      configs += [ "//build/config/linux:x11" ]
+      deps += [
+        "//ui/base",
+        "//ui/base/x",
+        "//ui/gfx/x",
+      ]
+    } else if (!is_win) {
+      # This file is used for all non-X11, non-Windows aura Builds.
+      sources += [
+        "clipboard_aura.cc",
+        "clipboard_aura.h",
+      ]
+    }
+  }
+
+  if (is_android) {
+    deps += [ "//ui/base:ui_base_jni_headers" ]
+  }
+
+  if (is_mac) {
+    deps += [ "//third_party/mozilla" ]
+    libs = [
+      "AppKit.framework",
+      "CoreFoundation.framework",
+    ]
+  }
+}
+
+jumbo_source_set("clipboard_test_support") {
+  testonly = true
+
+  if (!is_ios) {
+    sources = [
+      "test/test_clipboard.cc",
+      "test/test_clipboard.h",
+    ]
+  }
+
+  public_deps = [
+    ":clipboard",
+    "//base",
+    "//skia",
+  ]
+}
+
+source_set("clipboard_test") {
+  testonly = true
+
+  output_name = "ui_base_clipboard_test"
+  sources = [
+    "clipboard_mac_unittest.mm",
+    "clipboard_util_mac_unittest.mm",
+  ]
+
+  if (!is_ios) {
+    sources += [
+      "custom_data_helper_unittest.cc",
+      "test/test_clipboard_unittest.cc",
+    ]
+  }
+
+  deps = [
+    ":clipboard_test_support",
+    "//base/test:test_support",
+    "//testing/gmock",
+    "//testing/gtest",
+    "//ui/events/platform",
+    "//ui/gfx:test_support",
+  ]
+
+  if (is_mac) {
+    deps += [ "//third_party/mozilla" ]
+  }
+}
diff --git a/ui/base/clipboard/clipboard.cc b/ui/base/clipboard/clipboard.cc
index a621d64fa9e9..263441010618 100644
--- a/ui/base/clipboard/clipboard.cc
+++ b/ui/base/clipboard/clipboard.cc
@@ -156,11 +156,9 @@ void Clipboard::DispatchObject(ObjectType type, const ObjectMapParams& params) {
     }
 
     case CBF_DATA:
-      WriteData(
-          FormatType::Deserialize(
-              std::string(&(params[0].front()), params[0].size())),
-          &(params[1].front()),
-          params[1].size());
+      WriteData(ClipboardFormatType::Deserialize(
+                    std::string(&(params[0].front()), params[0].size())),
+                &(params[1].front()), params[1].size());
       break;
 
     default:
diff --git a/ui/base/clipboard/clipboard.h b/ui/base/clipboard/clipboard.h
index 60410973f823..913149dbd93e 100644
--- a/ui/base/clipboard/clipboard.h
+++ b/ui/base/clipboard/clipboard.h
@@ -13,6 +13,7 @@
 #include <vector>
 
 #include "base/compiler_specific.h"
+#include "base/component_export.h"
 #include "base/containers/flat_map.h"
 #include "base/lazy_instance.h"
 #include "base/macros.h"
@@ -24,93 +25,17 @@
 #include "base/threading/thread_checker.h"
 #include "base/time/time.h"
 #include "build/build_config.h"
+#include "ui/base/clipboard/clipboard_format_type.h"
 #include "ui/base/clipboard/clipboard_types.h"
-#include "ui/base/ui_base_export.h"
-
-#if defined(OS_WIN)
-#include <objidl.h>
-#endif
 
 class SkBitmap;
 
-#ifdef __OBJC__
-@class NSString;
-#else
-class NSString;
-#endif
-
 namespace ui {
 class TestClipboard;
 class ScopedClipboardWriter;
 
-class UI_BASE_EXPORT Clipboard : public base::ThreadChecker {
+class COMPONENT_EXPORT(BASE_CLIPBOARD) Clipboard : public base::ThreadChecker {
  public:
-  // MIME type constants.
-  static const char kMimeTypeText[];
-  static const char kMimeTypeURIList[];
-  static const char kMimeTypeDownloadURL[];
-  static const char kMimeTypeMozillaURL[];
-  static const char kMimeTypeHTML[];
-  static const char kMimeTypeRTF[];
-  static const char kMimeTypePNG[];
-  static const char kMimeTypeWebCustomData[];
-  static const char kMimeTypeWebkitSmartPaste[];
-  static const char kMimeTypePepperCustomData[];
-
-  // Platform neutral holder for native data representation of a clipboard type.
-  struct UI_BASE_EXPORT FormatType {
-    FormatType();
-    ~FormatType();
-
-    // Serializes and deserializes a FormatType for use in IPC messages.
-    std::string Serialize() const;
-    static FormatType Deserialize(const std::string& serialization);
-
-    // FormatType can be used in a set on some platforms.
-    bool operator<(const FormatType& other) const;
-
-#if defined(OS_WIN)
-    const FORMATETC& ToFormatEtc() const { return data_; }
-#elif defined(USE_AURA) || defined(OS_ANDROID) || defined(OS_FUCHSIA)
-    const std::string& ToString() const { return data_; }
-#elif defined(OS_MACOSX)
-    NSString* ToNSString() const { return data_; }
-    // Custom copy and assignment constructor to handle NSString.
-    FormatType(const FormatType& other);
-    FormatType& operator=(const FormatType& other);
-#endif
-
-    bool Equals(const FormatType& other) const;
-
-   private:
-    friend class base::NoDestructor<FormatType>;
-    friend class Clipboard;
-
-    // Platform-specific glue used internally by the Clipboard class. Each
-    // plaform should define,at least one of each of the following:
-    // 1. A constructor that wraps that native clipboard format descriptor.
-    // 2. An accessor to retrieve the wrapped descriptor.
-    // 3. A data member to hold the wrapped descriptor.
-    //
-    // Note that in some cases, the accessor for the wrapped descriptor may be
-    // public, as these format types can be used by drag and drop code as well.
-#if defined(OS_WIN)
-    explicit FormatType(UINT native_format);
-    FormatType(UINT native_format, LONG index);
-    FORMATETC data_;
-#elif defined(USE_AURA) || defined(OS_ANDROID) || defined(OS_FUCHSIA)
-    explicit FormatType(const std::string& native_format);
-    std::string data_;
-#elif defined(OS_MACOSX)
-    explicit FormatType(NSString* native_format);
-    NSString* data_;
-#else
-#error No FormatType definition.
-#endif
-
-    // Copyable and assignable, since this is essentially an opaque value type.
-  };
-
   static bool IsSupportedClipboardType(int32_t type) {
     switch (type) {
       case CLIPBOARD_TYPE_COPY_PASTE:
@@ -166,7 +91,7 @@ class UI_BASE_EXPORT Clipboard : public base::ThreadChecker {
   virtual uint64_t GetSequenceNumber(ClipboardType type) const = 0;
 
   // Tests whether the clipboard contains a certain format
-  virtual bool IsFormatAvailable(const FormatType& format,
+  virtual bool IsFormatAvailable(const ClipboardFormatType& format,
                                  ClipboardType type) const = 0;
 
   // Clear the clipboard data.
@@ -208,7 +133,7 @@ class UI_BASE_EXPORT Clipboard : public base::ThreadChecker {
 
   // Reads raw data from the clipboard with the given format type. Stores result
   // as a byte vector.
-  virtual void ReadData(const FormatType& format,
+  virtual void ReadData(const ClipboardFormatType& format,
                         std::string* result) const = 0;
 
   // Returns an estimate of the time the clipboard was last updated.  If the
@@ -218,38 +143,6 @@ class UI_BASE_EXPORT Clipboard : public base::ThreadChecker {
   // Resets the clipboard last modified time to Time::Time().
   virtual void ClearLastModifiedTime();
 
-  // Gets the FormatType corresponding to an arbitrary format string,
-  // registering it with the system if needed. Due to Windows/Linux
-  // limitiations, |format_string| must never be controlled by the user.
-  static FormatType GetFormatType(const std::string& format_string);
-
-  // Get format identifiers for various types.
-  static const FormatType& GetUrlFormatType();
-  static const FormatType& GetUrlWFormatType();
-  static const FormatType& GetMozUrlFormatType();
-  static const FormatType& GetPlainTextFormatType();
-  static const FormatType& GetPlainTextWFormatType();
-  static const FormatType& GetFilenameFormatType();
-  static const FormatType& GetFilenameWFormatType();
-  static const FormatType& GetWebKitSmartPasteFormatType();
-  // Win: MS HTML Format, Other: Generic HTML format
-  static const FormatType& GetHtmlFormatType();
-  static const FormatType& GetRtfFormatType();
-  static const FormatType& GetBitmapFormatType();
-  // TODO(raymes): Unify web custom data and pepper custom data:
-  // crbug.com/158399.
-  static const FormatType& GetWebCustomDataFormatType();
-  static const FormatType& GetPepperCustomDataFormatType();
-
-#if defined(OS_WIN)
-  // Firefox text/html
-  static const FormatType& GetTextHtmlFormatType();
-  static const FormatType& GetCFHDropFormatType();
-  static const FormatType& GetFileDescriptorFormatType();
-  static const FormatType& GetFileContentZeroFormatType();
-  static const FormatType& GetIDListFormatType();
-#endif
-
  protected:
   static Clipboard* Create();
 
@@ -258,10 +151,10 @@ class UI_BASE_EXPORT Clipboard : public base::ThreadChecker {
 
   // ObjectType designates the type of data to be stored in the clipboard. This
   // designation is shared across all OSes. The system-specific designation
-  // is defined by FormatType. A single ObjectType might be represented by
-  // several system-specific FormatTypes. For example, on Linux the CBF_TEXT
-  // ObjectType maps to "text/plain", "STRING", and several other formats. On
-  // windows it maps to CF_UNICODETEXT.
+  // is defined by ClipboardFormatType. A single ObjectType might be represented
+  // by several system-specific ClipboardFormatTypes. For example, on Linux the
+  // CBF_TEXT ObjectType maps to "text/plain", "STRING", and several other
+  // formats. On windows it maps to CF_UNICODETEXT.
   //
   // The order below is the order in which data will be written to the
   // clipboard, so more specific types must be listed before less specific
@@ -326,7 +219,7 @@ class UI_BASE_EXPORT Clipboard : public base::ThreadChecker {
 
   virtual void WriteBitmap(const SkBitmap& bitmap) = 0;
 
-  virtual void WriteData(const FormatType& format,
+  virtual void WriteData(const ClipboardFormatType& format,
                          const char* data_data,
                          size_t data_len) = 0;
 
diff --git a/ui/base/clipboard/clipboard_android.cc b/ui/base/clipboard/clipboard_android.cc
index 6fe4940555de..40730c16ef9f 100644
--- a/ui/base/clipboard/clipboard_android.cc
+++ b/ui/base/clipboard/clipboard_android.cc
@@ -18,6 +18,7 @@
 #include "base/time/time.h"
 #include "jni/Clipboard_jni.h"
 #include "third_party/skia/include/core/SkBitmap.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 #include "ui/gfx/geometry/size.h"
 
 // TODO:(andrewhayden) Support additional formats in Android: Bitmap, URI, HTML,
@@ -42,15 +43,6 @@ namespace ui {
 
 namespace {
 
-// Various formats we support.
-const char kURLFormat[] = "url";
-const char kPlainTextFormat[] = "text";
-const char kHTMLFormat[] = "html";
-const char kRTFFormat[] = "rtf";
-const char kBitmapFormat[] = "bitmap";
-const char kWebKitSmartPasteFormat[] = "webkit_smart";
-const char kBookmarkFormat[] = "bookmark";
-
 class ClipboardMap {
  public:
   ClipboardMap();
@@ -144,22 +136,24 @@ void ClipboardMap::Set(const std::string& format, const std::string& data) {
 void ClipboardMap::CommitToAndroidClipboard() {
   JNIEnv* env = AttachCurrentThread();
   base::AutoLock lock(lock_);
-  if (base::ContainsKey(map_, kHTMLFormat)) {
+  if (base::ContainsKey(map_, ClipboardFormatType::GetHtmlType().ToString())) {
     // Android's API for storing HTML content on the clipboard requires a plain-
     // text representation to be available as well.
-    if (!base::ContainsKey(map_, kPlainTextFormat))
+    if (!base::ContainsKey(map_,
+                           ClipboardFormatType::GetPlainTextType().ToString()))
       return;
 
-    ScopedJavaLocalRef<jstring> html =
-        ConvertUTF8ToJavaString(env, map_[kHTMLFormat]);
-    ScopedJavaLocalRef<jstring> text =
-        ConvertUTF8ToJavaString(env, map_[kPlainTextFormat]);
+    ScopedJavaLocalRef<jstring> html = ConvertUTF8ToJavaString(
+        env, map_[ClipboardFormatType::GetHtmlType().ToString()]);
+    ScopedJavaLocalRef<jstring> text = ConvertUTF8ToJavaString(
+        env, map_[ClipboardFormatType::GetPlainTextType().ToString()]);
 
     DCHECK(html.obj() && text.obj());
     Java_Clipboard_setHTMLText(env, clipboard_manager_, html, text);
-  } else if (base::ContainsKey(map_, kPlainTextFormat)) {
-    ScopedJavaLocalRef<jstring> str =
-        ConvertUTF8ToJavaString(env, map_[kPlainTextFormat]);
+  } else if (base::ContainsKey(
+                 map_, ClipboardFormatType::GetPlainTextType().ToString())) {
+    ScopedJavaLocalRef<jstring> str = ConvertUTF8ToJavaString(
+        env, map_[ClipboardFormatType::GetPlainTextType().ToString()]);
     DCHECK(str.obj());
     Java_Clipboard_setText(env, clipboard_manager_, str);
   } else {
@@ -224,104 +218,17 @@ void ClipboardMap::UpdateFromAndroidClipboard() {
   ScopedJavaLocalRef<jstring> jhtml =
       Java_Clipboard_getHTMLText(env, clipboard_manager_);
 
-  JNI_Clipboard_AddMapEntry(env, &map_, kPlainTextFormat, jtext);
-  JNI_Clipboard_AddMapEntry(env, &map_, kHTMLFormat, jhtml);
+  JNI_Clipboard_AddMapEntry(
+      env, &map_, ClipboardFormatType::GetPlainTextType().ToString().c_str(),
+      jtext);
+  JNI_Clipboard_AddMapEntry(
+      env, &map_, ClipboardFormatType::GetHtmlType().ToString().c_str(), jhtml);
 
   map_state_ = MapState::kUpToDate;
 }
 
 }  // namespace
 
-// Clipboard::FormatType implementation.
-Clipboard::FormatType::FormatType() {
-}
-
-Clipboard::FormatType::FormatType(const std::string& native_format)
-    : data_(native_format) {
-}
-
-Clipboard::FormatType::~FormatType() {
-}
-
-std::string Clipboard::FormatType::Serialize() const {
-  return data_;
-}
-
-// static
-Clipboard::FormatType Clipboard::FormatType::Deserialize(
-    const std::string& serialization) {
-  return FormatType(serialization);
-}
-
-bool Clipboard::FormatType::operator<(const FormatType& other) const {
-  return data_ < other.data_;
-}
-
-bool Clipboard::FormatType::Equals(const FormatType& other) const {
-  return data_ == other.data_;
-}
-
-// Various predefined FormatTypes.
-// static
-Clipboard::FormatType Clipboard::GetFormatType(
-    const std::string& format_string) {
-  return FormatType::Deserialize(format_string);
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetUrlWFormatType() {
-  static base::NoDestructor<FormatType> type(kURLFormat);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetPlainTextFormatType() {
-  static base::NoDestructor<FormatType> type(kPlainTextFormat);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetPlainTextWFormatType() {
-  static base::NoDestructor<FormatType> type(kPlainTextFormat);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetWebKitSmartPasteFormatType() {
-  static base::NoDestructor<FormatType> type(kWebKitSmartPasteFormat);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetHtmlFormatType() {
-  static base::NoDestructor<FormatType> type(kHTMLFormat);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetRtfFormatType() {
-  static base::NoDestructor<FormatType> type(kRTFFormat);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetBitmapFormatType() {
-  static base::NoDestructor<FormatType> type(kBitmapFormat);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetWebCustomDataFormatType() {
-  static base::NoDestructor<FormatType> type(kMimeTypeWebCustomData);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetPepperCustomDataFormatType() {
-  static base::NoDestructor<FormatType> type(kMimeTypePepperCustomData);
-  return *type;
-}
-
 // Clipboard factory method.
 // static
 Clipboard* Clipboard::Create() {
@@ -360,7 +267,7 @@ uint64_t ClipboardAndroid::GetSequenceNumber(ClipboardType /* type */) const {
   return g_map.Get().GetSequenceNumber();
 }
 
-bool ClipboardAndroid::IsFormatAvailable(const Clipboard::FormatType& format,
+bool ClipboardAndroid::IsFormatAvailable(const ClipboardFormatType& format,
                                          ClipboardType type) const {
   DCHECK(CalledOnValidThread());
   DCHECK_EQ(type, CLIPBOARD_TYPE_COPY_PASTE);
@@ -388,16 +295,16 @@ void ClipboardAndroid::ReadAvailableTypes(ClipboardType type,
 
   // would be nice to ask the ClipboardMap to enumerate the types it supports,
   // rather than hardcode the list here.
-  if (IsFormatAvailable(Clipboard::GetPlainTextFormatType(), type))
+  if (IsFormatAvailable(ClipboardFormatType::GetPlainTextType(), type))
     types->push_back(base::UTF8ToUTF16(kMimeTypeText));
-  if (IsFormatAvailable(Clipboard::GetHtmlFormatType(), type))
+  if (IsFormatAvailable(ClipboardFormatType::GetHtmlType(), type))
     types->push_back(base::UTF8ToUTF16(kMimeTypeHTML));
 
   // these formats aren't supported by the ClipboardMap currently, but might
   // be one day?
-  if (IsFormatAvailable(Clipboard::GetRtfFormatType(), type))
+  if (IsFormatAvailable(ClipboardFormatType::GetRtfType(), type))
     types->push_back(base::UTF8ToUTF16(kMimeTypeRTF));
-  if (IsFormatAvailable(Clipboard::GetBitmapFormatType(), type))
+  if (IsFormatAvailable(ClipboardFormatType::GetBitmapType(), type))
     types->push_back(base::UTF8ToUTF16(kMimeTypePNG));
   *contains_filenames = false;
 }
@@ -415,7 +322,7 @@ void ClipboardAndroid::ReadAsciiText(ClipboardType type,
                                      std::string* result) const {
   DCHECK(CalledOnValidThread());
   DCHECK_EQ(type, CLIPBOARD_TYPE_COPY_PASTE);
-  *result = g_map.Get().Get(kPlainTextFormat);
+  *result = g_map.Get().Get(ClipboardFormatType::GetPlainTextType().ToString());
 }
 
 // Note: |src_url| isn't really used. It is only implemented in Windows
@@ -429,7 +336,8 @@ void ClipboardAndroid::ReadHTML(ClipboardType type,
   if (src_url)
     src_url->clear();
 
-  std::string input = g_map.Get().Get(kHTMLFormat);
+  std::string input =
+      g_map.Get().Get(ClipboardFormatType::GetHtmlType().ToString());
   *markup = base::UTF8ToUTF16(input);
 
   *fragment_start = 0;
@@ -444,7 +352,8 @@ void ClipboardAndroid::ReadRTF(ClipboardType type, std::string* result) const {
 SkBitmap ClipboardAndroid::ReadImage(ClipboardType type) const {
   DCHECK(CalledOnValidThread());
   DCHECK_EQ(type, CLIPBOARD_TYPE_COPY_PASTE);
-  std::string input = g_map.Get().Get(kBitmapFormat);
+  std::string input =
+      g_map.Get().Get(ClipboardFormatType::GetBitmapType().ToString());
 
   SkBitmap bmp;
   if (!input.empty()) {
@@ -474,7 +383,7 @@ void ClipboardAndroid::ReadBookmark(base::string16* title,
   NOTIMPLEMENTED();
 }
 
-void ClipboardAndroid::ReadData(const Clipboard::FormatType& format,
+void ClipboardAndroid::ReadData(const ClipboardFormatType& format,
                                 std::string* result) const {
   DCHECK(CalledOnValidThread());
   *result = g_map.Get().Get(format.ToString());
@@ -504,14 +413,16 @@ void ClipboardAndroid::WriteObjects(ClipboardType type,
 }
 
 void ClipboardAndroid::WriteText(const char* text_data, size_t text_len) {
-  g_map.Get().Set(kPlainTextFormat, std::string(text_data, text_len));
+  g_map.Get().Set(ClipboardFormatType::GetPlainTextType().ToString(),
+                  std::string(text_data, text_len));
 }
 
 void ClipboardAndroid::WriteHTML(const char* markup_data,
                                  size_t markup_len,
                                  const char* url_data,
                                  size_t url_len) {
-  g_map.Get().Set(kHTMLFormat, std::string(markup_data, markup_len));
+  g_map.Get().Set(ClipboardFormatType::GetHtmlType().ToString(),
+                  std::string(markup_data, markup_len));
 }
 
 void ClipboardAndroid::WriteRTF(const char* rtf_data, size_t data_len) {
@@ -524,13 +435,15 @@ void ClipboardAndroid::WriteBookmark(const char* title_data,
                                      size_t title_len,
                                      const char* url_data,
                                      size_t url_len) {
-  g_map.Get().Set(kBookmarkFormat, std::string(url_data, url_len));
+  g_map.Get().Set(ClipboardFormatType::GetBookmarkType().ToString(),
+                  std::string(url_data, url_len));
 }
 
 // Write an extra flavor that signifies WebKit was the last to modify the
 // pasteboard. This flavor has no data.
 void ClipboardAndroid::WriteWebSmartPaste() {
-  g_map.Get().Set(kWebKitSmartPasteFormat, std::string());
+  g_map.Get().Set(ClipboardFormatType::GetWebKitSmartPasteType().ToString(),
+                  std::string());
 }
 
 // Note: we implement this to pass all unit tests but it is currently unclear
@@ -541,10 +454,10 @@ void ClipboardAndroid::WriteBitmap(const SkBitmap& bitmap) {
   std::string packed(reinterpret_cast<const char*>(&size), sizeof(size));
   packed += std::string(static_cast<const char*>(bitmap.getPixels()),
                         bitmap.computeByteSize());
-  g_map.Get().Set(kBitmapFormat, packed);
+  g_map.Get().Set(ClipboardFormatType::GetBitmapType().ToString(), packed);
 }
 
-void ClipboardAndroid::WriteData(const Clipboard::FormatType& format,
+void ClipboardAndroid::WriteData(const ClipboardFormatType& format,
                                  const char* data_data,
                                  size_t data_len) {
   g_map.Get().Set(format.ToString(), std::string(data_data, data_len));
diff --git a/ui/base/clipboard/clipboard_android.h b/ui/base/clipboard/clipboard_android.h
index 1ef1bee944bc..aaa1019777e4 100644
--- a/ui/base/clipboard/clipboard_android.h
+++ b/ui/base/clipboard/clipboard_android.h
@@ -13,6 +13,7 @@
 
 #include "base/android/scoped_java_ref.h"
 #include "base/callback_forward.h"
+#include "base/component_export.h"
 #include "base/macros.h"
 #include "base/time/time.h"
 
@@ -30,11 +31,12 @@ class ClipboardAndroid : public Clipboard {
                             const base::android::JavaParamRef<jobject>& obj);
 
   // Sets the callback called whenever the clipboard is modified.
-  UI_BASE_EXPORT void SetModifiedCallback(ModifiedCallback cb);
+  COMPONENT_EXPORT(BASE_CLIPBOARD)
+  void SetModifiedCallback(ModifiedCallback cb);
 
   // Sets the last modified time without calling the above callback.
-  UI_BASE_EXPORT void SetLastModifiedTimeWithoutRunningCallback(
-      base::Time time);
+  COMPONENT_EXPORT(BASE_CLIPBOARD)
+  void SetLastModifiedTimeWithoutRunningCallback(base::Time time);
 
  private:
   friend class Clipboard;
@@ -45,7 +47,7 @@ class ClipboardAndroid : public Clipboard {
   // Clipboard overrides:
   void OnPreShutdown() override;
   uint64_t GetSequenceNumber(ClipboardType type) const override;
-  bool IsFormatAvailable(const FormatType& format,
+  bool IsFormatAvailable(const ClipboardFormatType& format,
                          ClipboardType type) const override;
   void Clear(ClipboardType type) override;
   void ReadAvailableTypes(ClipboardType type,
@@ -64,7 +66,8 @@ class ClipboardAndroid : public Clipboard {
                       const base::string16& type,
                       base::string16* result) const override;
   void ReadBookmark(base::string16* title, std::string* url) const override;
-  void ReadData(const FormatType& format, std::string* result) const override;
+  void ReadData(const ClipboardFormatType& format,
+                std::string* result) const override;
   base::Time GetLastModifiedTime() const override;
   void ClearLastModifiedTime() override;
   void WriteObjects(ClipboardType type, const ObjectMap& objects) override;
@@ -80,7 +83,7 @@ class ClipboardAndroid : public Clipboard {
                      size_t url_len) override;
   void WriteWebSmartPaste() override;
   void WriteBitmap(const SkBitmap& bitmap) override;
-  void WriteData(const FormatType& format,
+  void WriteData(const ClipboardFormatType& format,
                  const char* data_data,
                  size_t data_len) override;
 
diff --git a/ui/base/clipboard/clipboard_aura.cc b/ui/base/clipboard/clipboard_aura.cc
index 202a1963b0dd..653b3ac1f6ae 100644
--- a/ui/base/clipboard/clipboard_aura.cc
+++ b/ui/base/clipboard/clipboard_aura.cc
@@ -19,6 +19,8 @@
 #include "base/strings/utf_string_conversions.h"
 #include "skia/ext/skia_utils_base.h"
 #include "third_party/skia/include/core/SkBitmap.h"
+#include "ui/base/clipboard/clipboard_constants.h"
+#include "ui/base/clipboard/clipboard_format_type.h"
 #include "ui/base/clipboard/clipboard_monitor.h"
 #include "ui/base/clipboard/custom_data_helper.h"
 #include "ui/gfx/geometry/size.h"
@@ -27,8 +29,6 @@ namespace ui {
 
 namespace {
 
-const char kMimeTypeFilename[] = "chromium/filename";
-const char kMimeTypeBitmap[] = "image/bmp";
 const size_t kMaxClipboardSize = 1;
 
 // Clipboard data format used by AuraClipboard.
@@ -404,117 +404,6 @@ class ClipboardDataBuilder {
 
 ClipboardData* ClipboardDataBuilder::current_data_ = nullptr;
 
-// Clipboard::FormatType implementation.
-Clipboard::FormatType::FormatType() {
-}
-
-Clipboard::FormatType::FormatType(const std::string& native_format)
-    : data_(native_format) {
-}
-
-Clipboard::FormatType::~FormatType() {
-}
-
-std::string Clipboard::FormatType::Serialize() const {
-  return data_;
-}
-
-// static
-Clipboard::FormatType Clipboard::FormatType::Deserialize(
-    const std::string& serialization) {
-  return FormatType(serialization);
-}
-
-bool Clipboard::FormatType::operator<(const FormatType& other) const {
-  return data_ < other.data_;
-}
-
-bool Clipboard::FormatType::Equals(const FormatType& other) const {
-  return data_ == other.data_;
-}
-
-// Various predefined FormatTypes.
-// static
-Clipboard::FormatType Clipboard::GetFormatType(
-    const std::string& format_string) {
-  return FormatType::Deserialize(format_string);
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetUrlFormatType() {
-  static base::NoDestructor<FormatType> type(kMimeTypeURIList);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetUrlWFormatType() {
-  return GetUrlFormatType();
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetMozUrlFormatType() {
-  static base::NoDestructor<FormatType> type(kMimeTypeMozillaURL);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetPlainTextFormatType() {
-  static base::NoDestructor<FormatType> type(kMimeTypeText);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetPlainTextWFormatType() {
-  return GetPlainTextFormatType();
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetFilenameFormatType() {
-  static base::NoDestructor<FormatType> type(kMimeTypeFilename);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetFilenameWFormatType() {
-  return Clipboard::GetFilenameFormatType();
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetHtmlFormatType() {
-  static base::NoDestructor<FormatType> type(kMimeTypeHTML);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetRtfFormatType() {
-  static base::NoDestructor<FormatType> type(kMimeTypeRTF);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetBitmapFormatType() {
-  static base::NoDestructor<FormatType> type(kMimeTypeBitmap);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetWebKitSmartPasteFormatType() {
-  static base::NoDestructor<FormatType> type(kMimeTypeWebkitSmartPaste);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetWebCustomDataFormatType() {
-  static base::NoDestructor<FormatType> type(kMimeTypeWebCustomData);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetPepperCustomDataFormatType() {
-  static base::NoDestructor<FormatType> type(kMimeTypePepperCustomData);
-  return *type;
-}
-
 // Clipboard factory method.
 Clipboard* Clipboard::Create() {
   return new ClipboardAura;
@@ -537,20 +426,20 @@ uint64_t ClipboardAura::GetSequenceNumber(ClipboardType type) const {
   return clipboard_internal_->sequence_number();
 }
 
-bool ClipboardAura::IsFormatAvailable(const FormatType& format,
+bool ClipboardAura::IsFormatAvailable(const ClipboardFormatType& format,
                                       ClipboardType type) const {
   DCHECK(CalledOnValidThread());
   DCHECK(IsSupportedClipboardType(type));
-  if (GetPlainTextFormatType().Equals(format) ||
-      GetUrlFormatType().Equals(format))
+  if (ClipboardFormatType::GetPlainTextType().Equals(format) ||
+      ClipboardFormatType::GetUrlType().Equals(format))
     return clipboard_internal_->IsFormatAvailable(TEXT);
-  if (GetHtmlFormatType().Equals(format))
+  if (ClipboardFormatType::GetHtmlType().Equals(format))
     return clipboard_internal_->IsFormatAvailable(HTML);
-  if (GetRtfFormatType().Equals(format))
+  if (ClipboardFormatType::GetRtfType().Equals(format))
     return clipboard_internal_->IsFormatAvailable(RTF);
-  if (GetBitmapFormatType().Equals(format))
+  if (ClipboardFormatType::GetBitmapType().Equals(format))
     return clipboard_internal_->IsFormatAvailable(BITMAP);
-  if (GetWebKitSmartPasteFormatType().Equals(format))
+  if (ClipboardFormatType::GetWebKitSmartPasteType().Equals(format))
     return clipboard_internal_->IsFormatAvailable(WEB);
   const ClipboardData* data = clipboard_internal_->GetData();
   return data && data->custom_data_format() == format.ToString();
@@ -573,13 +462,16 @@ void ClipboardAura::ReadAvailableTypes(ClipboardType type,
 
   types->clear();
   *contains_filenames = false;
-  if (IsFormatAvailable(GetPlainTextFormatType(), type))
-    types->push_back(base::UTF8ToUTF16(GetPlainTextFormatType().ToString()));
-  if (IsFormatAvailable(GetHtmlFormatType(), type))
-    types->push_back(base::UTF8ToUTF16(GetHtmlFormatType().ToString()));
-  if (IsFormatAvailable(GetRtfFormatType(), type))
-    types->push_back(base::UTF8ToUTF16(GetRtfFormatType().ToString()));
-  if (IsFormatAvailable(GetBitmapFormatType(), type))
+  if (IsFormatAvailable(ClipboardFormatType::GetPlainTextType(), type))
+    types->push_back(
+        base::UTF8ToUTF16(ClipboardFormatType::GetPlainTextType().ToString()));
+  if (IsFormatAvailable(ClipboardFormatType::GetHtmlType(), type))
+    types->push_back(
+        base::UTF8ToUTF16(ClipboardFormatType::GetHtmlType().ToString()));
+  if (IsFormatAvailable(ClipboardFormatType::GetRtfType(), type))
+    types->push_back(
+        base::UTF8ToUTF16(ClipboardFormatType::GetRtfType().ToString()));
+  if (IsFormatAvailable(ClipboardFormatType::GetBitmapType(), type))
     types->push_back(base::UTF8ToUTF16(kMimeTypePNG));
 
   if (clipboard_internal_->IsFormatAvailable(CUSTOM) &&
@@ -633,7 +525,7 @@ void ClipboardAura::ReadBookmark(base::string16* title,
   clipboard_internal_->ReadBookmark(title, url);
 }
 
-void ClipboardAura::ReadData(const FormatType& format,
+void ClipboardAura::ReadData(const ClipboardFormatType& format,
                              std::string* result) const {
   DCHECK(CalledOnValidThread());
   clipboard_internal_->ReadData(format.ToString(), result);
@@ -677,7 +569,7 @@ void ClipboardAura::WriteBitmap(const SkBitmap& bitmap) {
   ClipboardDataBuilder::WriteBitmap(bitmap);
 }
 
-void ClipboardAura::WriteData(const FormatType& format,
+void ClipboardAura::WriteData(const ClipboardFormatType& format,
                               const char* data_data,
                               size_t data_len) {
   ClipboardDataBuilder::WriteData(format.ToString(), data_data, data_len);
diff --git a/ui/base/clipboard/clipboard_aura.h b/ui/base/clipboard/clipboard_aura.h
index 1d3b2083309d..16fbfe06905b 100644
--- a/ui/base/clipboard/clipboard_aura.h
+++ b/ui/base/clipboard/clipboard_aura.h
@@ -24,7 +24,7 @@ class ClipboardAura : public Clipboard {
   // Clipboard overrides:
   void OnPreShutdown() override;
   uint64_t GetSequenceNumber(ClipboardType type) const override;
-  bool IsFormatAvailable(const FormatType& format,
+  bool IsFormatAvailable(const ClipboardFormatType& format,
                          ClipboardType type) const override;
   void Clear(ClipboardType type) override;
   void ReadAvailableTypes(ClipboardType type,
@@ -43,7 +43,8 @@ class ClipboardAura : public Clipboard {
                       const base::string16& type,
                       base::string16* result) const override;
   void ReadBookmark(base::string16* title, std::string* url) const override;
-  void ReadData(const FormatType& format, std::string* result) const override;
+  void ReadData(const ClipboardFormatType& format,
+                std::string* result) const override;
   void WriteObjects(ClipboardType type, const ObjectMap& objects) override;
   void WriteText(const char* text_data, size_t text_len) override;
   void WriteHTML(const char* markup_data,
@@ -57,7 +58,7 @@ class ClipboardAura : public Clipboard {
                      size_t url_len) override;
   void WriteWebSmartPaste() override;
   void WriteBitmap(const SkBitmap& bitmap) override;
-  void WriteData(const FormatType& format,
+  void WriteData(const ClipboardFormatType& format,
                  const char* data_data,
                  size_t data_len) override;
 
diff --git a/ui/base/clipboard/clipboard_aurax11.cc b/ui/base/clipboard/clipboard_aurax11.cc
index 447beb5bc09c..50426b06ebda 100644
--- a/ui/base/clipboard/clipboard_aurax11.cc
+++ b/ui/base/clipboard/clipboard_aurax11.cc
@@ -21,6 +21,7 @@
 #include "base/stl_util.h"
 #include "base/strings/utf_string_conversions.h"
 #include "third_party/skia/include/core/SkBitmap.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 #include "ui/base/clipboard/clipboard_monitor.h"
 #include "ui/base/clipboard/custom_data_helper.h"
 #include "ui/base/x/selection_owner.h"
@@ -42,7 +43,6 @@ namespace {
 
 const char kClipboard[] = "CLIPBOARD";
 const char kClipboardManager[] = "CLIPBOARD_MANAGER";
-const char kMimeTypeFilename[] = "chromium/filename";
 
 ///////////////////////////////////////////////////////////////////////////////
 
@@ -135,7 +135,7 @@ class TargetList {
   const AtomVector& target_list() { return target_list_; }
 
   bool ContainsText() const;
-  bool ContainsFormat(const Clipboard::FormatType& format_type) const;
+  bool ContainsFormat(const ClipboardFormatType& format_type) const;
   bool ContainsAtom(::Atom atom) const;
 
  private:
@@ -155,8 +155,7 @@ bool TargetList::ContainsText() const {
   return false;
 }
 
-bool TargetList::ContainsFormat(
-    const Clipboard::FormatType& format_type) const {
+bool TargetList::ContainsFormat(const ClipboardFormatType& format_type) const {
   ::Atom atom = gfx::GetAtom(format_type.ToString().c_str());
   return ContainsAtom(atom);
 }
@@ -168,41 +167,6 @@ bool TargetList::ContainsAtom(::Atom atom) const {
 
 }  // namespace
 
-///////////////////////////////////////////////////////////////////////////////
-
-// I would love for the FormatType to really be a wrapper around an X11 ::Atom,
-// but there are a few problems. Chromeos unit tests spawn a new X11 server for
-// each test, so Atom numeric values don't persist across tests. We could still
-// maybe deal with that if we didn't have static accessor methods everywhere.
-
-Clipboard::FormatType::FormatType() {
-}
-
-Clipboard::FormatType::FormatType(const std::string& native_format)
-    : data_(native_format) {
-}
-
-Clipboard::FormatType::~FormatType() {
-}
-
-std::string Clipboard::FormatType::Serialize() const {
-  return data_;
-}
-
-// static
-Clipboard::FormatType Clipboard::FormatType::Deserialize(
-    const std::string& serialization) {
-  return FormatType(serialization);
-}
-
-bool Clipboard::FormatType::operator<(const FormatType& other) const {
-  return data_ < other.data_;
-}
-
-bool Clipboard::FormatType::Equals(const FormatType& other) const {
-  return data_ == other.data_;
-}
-
 ///////////////////////////////////////////////////////////////////////////////
 // ClipboardAuraX11::AuraX11Details
 
@@ -259,7 +223,7 @@ class ClipboardAuraX11::AuraX11Details : public PlatformEventDispatcher {
   std::vector< ::Atom> GetTextAtoms() const;
 
   // Returns a vector with a |format| converted to an X11 atom.
-  std::vector< ::Atom> GetAtomsForFormat(const Clipboard::FormatType& format);
+  std::vector<::Atom> GetAtomsForFormat(const ClipboardFormatType& format);
 
   // Clears a certain clipboard type, whether we own it or not.
   void Clear(ClipboardType type);
@@ -448,7 +412,7 @@ std::vector<::Atom> ClipboardAuraX11::AuraX11Details::GetTextAtoms() const {
 }
 
 std::vector<::Atom> ClipboardAuraX11::AuraX11Details::GetAtomsForFormat(
-    const Clipboard::FormatType& format) {
+    const ClipboardFormatType& format) {
   std::vector< ::Atom> atoms;
   atoms.push_back(gfx::GetAtom(format.ToString().c_str()));
   return atoms;
@@ -540,89 +504,6 @@ uint32_t ClipboardAuraX11::AuraX11Details::DispatchEvent(
   return POST_DISPATCH_NONE;
 }
 
-///////////////////////////////////////////////////////////////////////////////
-// Various predefined FormatTypes.
-// static
-Clipboard::FormatType Clipboard::GetFormatType(
-    const std::string& format_string) {
-  return FormatType::Deserialize(format_string);
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetUrlFormatType() {
-  static base::NoDestructor<FormatType> type(kMimeTypeURIList);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetUrlWFormatType() {
-  return GetUrlFormatType();
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetMozUrlFormatType() {
-  static base::NoDestructor<FormatType> type(kMimeTypeMozillaURL);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetPlainTextFormatType() {
-  static base::NoDestructor<FormatType> type(kMimeTypeText);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetPlainTextWFormatType() {
-  return GetPlainTextFormatType();
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetFilenameFormatType() {
-  static base::NoDestructor<FormatType> type(kMimeTypeFilename);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetFilenameWFormatType() {
-  return Clipboard::GetFilenameFormatType();
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetHtmlFormatType() {
-  static base::NoDestructor<FormatType> type(kMimeTypeHTML);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetRtfFormatType() {
-  static base::NoDestructor<FormatType> type(kMimeTypeRTF);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetBitmapFormatType() {
-  static base::NoDestructor<FormatType> type(kMimeTypePNG);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetWebKitSmartPasteFormatType() {
-  static base::NoDestructor<FormatType> type(kMimeTypeWebkitSmartPaste);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetWebCustomDataFormatType() {
-  static base::NoDestructor<FormatType> type(kMimeTypeWebCustomData);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetPepperCustomDataFormatType() {
-  static base::NoDestructor<FormatType> type(kMimeTypePepperCustomData);
-  return *type;
-}
-
 ///////////////////////////////////////////////////////////////////////////////
 // Clipboard factory method.
 Clipboard* Clipboard::Create() {
@@ -653,14 +534,14 @@ uint64_t ClipboardAuraX11::GetSequenceNumber(ClipboardType type) const {
     return SelectionChangeObserver::GetInstance()->primary_sequence_number();
 }
 
-bool ClipboardAuraX11::IsFormatAvailable(const FormatType& format,
+bool ClipboardAuraX11::IsFormatAvailable(const ClipboardFormatType& format,
                                          ClipboardType type) const {
   DCHECK(CalledOnValidThread());
   DCHECK(IsSupportedClipboardType(type));
 
   TargetList target_list = aurax11_details_->WaitAndGetTargetsList(type);
-  if (format.Equals(GetPlainTextFormatType()) ||
-      format.Equals(GetUrlFormatType())) {
+  if (format.Equals(ClipboardFormatType::GetPlainTextType()) ||
+      format.Equals(ClipboardFormatType::GetUrlType())) {
     return target_list.ContainsText();
   }
   return target_list.ContainsFormat(format);
@@ -687,16 +568,17 @@ void ClipboardAuraX11::ReadAvailableTypes(ClipboardType type,
 
   if (target_list.ContainsText())
     types->push_back(base::UTF8ToUTF16(kMimeTypeText));
-  if (target_list.ContainsFormat(GetHtmlFormatType()))
+  if (target_list.ContainsFormat(ClipboardFormatType::GetHtmlType()))
     types->push_back(base::UTF8ToUTF16(kMimeTypeHTML));
-  if (target_list.ContainsFormat(GetRtfFormatType()))
+  if (target_list.ContainsFormat(ClipboardFormatType::GetRtfType()))
     types->push_back(base::UTF8ToUTF16(kMimeTypeRTF));
-  if (target_list.ContainsFormat(GetBitmapFormatType()))
+  if (target_list.ContainsFormat(ClipboardFormatType::GetBitmapType()))
     types->push_back(base::UTF8ToUTF16(kMimeTypePNG));
   *contains_filenames = false;
 
   SelectionData data(aurax11_details_->RequestAndWaitForTypes(
-      type, aurax11_details_->GetAtomsForFormat(GetWebCustomDataFormatType())));
+      type, aurax11_details_->GetAtomsForFormat(
+                ClipboardFormatType::GetWebCustomDataType())));
   if (data.IsValid())
     ReadCustomDataTypes(data.GetData(), data.GetSize(), types);
 }
@@ -738,7 +620,8 @@ void ClipboardAuraX11::ReadHTML(ClipboardType type,
   *fragment_end = 0;
 
   SelectionData data(aurax11_details_->RequestAndWaitForTypes(
-      type, aurax11_details_->GetAtomsForFormat(GetHtmlFormatType())));
+      type,
+      aurax11_details_->GetAtomsForFormat(ClipboardFormatType::GetHtmlType())));
   if (data.IsValid()) {
     *markup = data.GetHtml();
 
@@ -752,7 +635,8 @@ void ClipboardAuraX11::ReadRTF(ClipboardType type, std::string* result) const {
   DCHECK(CalledOnValidThread());
 
   SelectionData data(aurax11_details_->RequestAndWaitForTypes(
-      type, aurax11_details_->GetAtomsForFormat(GetRtfFormatType())));
+      type,
+      aurax11_details_->GetAtomsForFormat(ClipboardFormatType::GetRtfType())));
   if (data.IsValid())
     data.AssignTo(result);
 }
@@ -761,7 +645,8 @@ SkBitmap ClipboardAuraX11::ReadImage(ClipboardType type) const {
   DCHECK(CalledOnValidThread());
 
   SelectionData data(aurax11_details_->RequestAndWaitForTypes(
-      type, aurax11_details_->GetAtomsForFormat(GetBitmapFormatType())));
+      type, aurax11_details_->GetAtomsForFormat(
+                ClipboardFormatType::GetBitmapType())));
   if (data.IsValid()) {
     SkBitmap bitmap;
     if (gfx::PNGCodec::Decode(data.GetData(), data.GetSize(), &bitmap))
@@ -777,8 +662,8 @@ void ClipboardAuraX11::ReadCustomData(ClipboardType clipboard_type,
   DCHECK(CalledOnValidThread());
 
   SelectionData data(aurax11_details_->RequestAndWaitForTypes(
-      clipboard_type,
-      aurax11_details_->GetAtomsForFormat(GetWebCustomDataFormatType())));
+      clipboard_type, aurax11_details_->GetAtomsForFormat(
+                          ClipboardFormatType::GetWebCustomDataType())));
   if (data.IsValid())
     ReadCustomDataForType(data.GetData(), data.GetSize(), type, result);
 }
@@ -790,7 +675,7 @@ void ClipboardAuraX11::ReadBookmark(base::string16* title,
   NOTIMPLEMENTED();
 }
 
-void ClipboardAuraX11::ReadData(const FormatType& format,
+void ClipboardAuraX11::ReadData(const ClipboardFormatType& format,
                                 std::string* result) const {
   DCHECK(CalledOnValidThread());
 
@@ -854,7 +739,7 @@ void ClipboardAuraX11::WriteHTML(const char* markup_data,
 }
 
 void ClipboardAuraX11::WriteRTF(const char* rtf_data, size_t data_len) {
-  WriteData(GetRtfFormatType(), rtf_data, data_len);
+  WriteData(ClipboardFormatType::GetRtfType(), rtf_data, data_len);
 }
 
 void ClipboardAuraX11::WriteBookmark(const char* title_data,
@@ -895,12 +780,12 @@ void ClipboardAuraX11::WriteBitmap(const SkBitmap& bitmap) {
   }
 }
 
-void ClipboardAuraX11::WriteData(const FormatType& format,
+void ClipboardAuraX11::WriteData(const ClipboardFormatType& format,
                                  const char* data_data,
                                  size_t data_len) {
   // We assume that certain mapping types are only written by trusted code.
   // Therefore we must upkeep their integrity.
-  if (format.Equals(GetBitmapFormatType()))
+  if (format.Equals(ClipboardFormatType::GetBitmapType()))
     return;
 
   std::vector<unsigned char> bytes(data_data, data_data + data_len);
diff --git a/ui/base/clipboard/clipboard_aurax11.h b/ui/base/clipboard/clipboard_aurax11.h
index ba0634505049..29d860ca50b1 100644
--- a/ui/base/clipboard/clipboard_aurax11.h
+++ b/ui/base/clipboard/clipboard_aurax11.h
@@ -25,7 +25,7 @@ class ClipboardAuraX11 : public Clipboard {
   // Clipboard overrides:
   void OnPreShutdown() override;
   uint64_t GetSequenceNumber(ClipboardType type) const override;
-  bool IsFormatAvailable(const FormatType& format,
+  bool IsFormatAvailable(const ClipboardFormatType& format,
                          ClipboardType type) const override;
   void Clear(ClipboardType type) override;
   void ReadAvailableTypes(ClipboardType type,
@@ -44,7 +44,8 @@ class ClipboardAuraX11 : public Clipboard {
                       const base::string16& type,
                       base::string16* result) const override;
   void ReadBookmark(base::string16* title, std::string* url) const override;
-  void ReadData(const FormatType& format, std::string* result) const override;
+  void ReadData(const ClipboardFormatType& format,
+                std::string* result) const override;
   void WriteObjects(ClipboardType type, const ObjectMap& objects) override;
   void WriteText(const char* text_data, size_t text_len) override;
   void WriteHTML(const char* markup_data,
@@ -58,7 +59,7 @@ class ClipboardAuraX11 : public Clipboard {
                      size_t url_len) override;
   void WriteWebSmartPaste() override;
   void WriteBitmap(const SkBitmap& bitmap) override;
-  void WriteData(const FormatType& format,
+  void WriteData(const ClipboardFormatType& format,
                  const char* data_data,
                  size_t data_len) override;
 
diff --git a/ui/base/clipboard/clipboard_constants.cc b/ui/base/clipboard/clipboard_constants.cc
index 6372353925ea..649a78c14fd4 100644
--- a/ui/base/clipboard/clipboard_constants.cc
+++ b/ui/base/clipboard/clipboard_constants.cc
@@ -2,21 +2,20 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#include "ui/base/clipboard/clipboard.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 
 namespace ui {
 
-const char Clipboard::kMimeTypeText[] = "text/plain";
-const char Clipboard::kMimeTypeURIList[] = "text/uri-list";
-const char Clipboard::kMimeTypeMozillaURL[] = "text/x-moz-url";
-const char Clipboard::kMimeTypeDownloadURL[] = "downloadurl";
-const char Clipboard::kMimeTypeHTML[] = "text/html";
-const char Clipboard::kMimeTypeRTF[] = "text/rtf";
-const char Clipboard::kMimeTypePNG[] = "image/png";
+const char kMimeTypeText[] = "text/plain";
+const char kMimeTypeURIList[] = "text/uri-list";
+const char kMimeTypeMozillaURL[] = "text/x-moz-url";
+const char kMimeTypeDownloadURL[] = "downloadurl";
+const char kMimeTypeHTML[] = "text/html";
+const char kMimeTypeRTF[] = "text/rtf";
+const char kMimeTypePNG[] = "image/png";
 // TODO(dcheng): This name is temporary. See crbug.com/106449.
-const char Clipboard::kMimeTypeWebCustomData[] = "chromium/x-web-custom-data";
-const char Clipboard::kMimeTypeWebkitSmartPaste[] = "chromium/x-webkit-paste";
-const char Clipboard::kMimeTypePepperCustomData[] =
-    "chromium/x-pepper-custom-data";
+const char kMimeTypeWebCustomData[] = "chromium/x-web-custom-data";
+const char kMimeTypeWebkitSmartPaste[] = "chromium/x-webkit-paste";
+const char kMimeTypePepperCustomData[] = "chromium/x-pepper-custom-data";
 
 }  // namespace ui
diff --git a/ui/base/clipboard/clipboard_constants.h b/ui/base/clipboard/clipboard_constants.h
new file mode 100644
index 000000000000..8c499112292e
--- /dev/null
+++ b/ui/base/clipboard/clipboard_constants.h
@@ -0,0 +1,45 @@
+// Copyright 2019 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef UI_BASE_CLIPBOARD_CLIPBOARD_CONSTANTS_H_
+#define UI_BASE_CLIPBOARD_CLIPBOARD_CONSTANTS_H_
+
+#include <string>
+
+#include "base/component_export.h"
+#include "build/build_config.h"
+
+#if defined(OS_MACOSX)
+#ifdef __OBJC__
+@class NSString;
+#else
+class NSString;
+#endif
+#endif  // defined(OS_MACOSX)
+
+namespace ui {
+
+#if defined(OS_MACOSX) && !defined(USE_AURA)
+COMPONENT_EXPORT(BASE_CLIPBOARD_TYPES)
+extern NSString* const kWebCustomDataPboardType;
+#endif
+
+// MIME type constants.
+COMPONENT_EXPORT(BASE_CLIPBOARD_TYPES) extern const char kMimeTypeText[];
+COMPONENT_EXPORT(BASE_CLIPBOARD_TYPES) extern const char kMimeTypeURIList[];
+COMPONENT_EXPORT(BASE_CLIPBOARD_TYPES) extern const char kMimeTypeDownloadURL[];
+COMPONENT_EXPORT(BASE_CLIPBOARD_TYPES) extern const char kMimeTypeMozillaURL[];
+COMPONENT_EXPORT(BASE_CLIPBOARD_TYPES) extern const char kMimeTypeHTML[];
+COMPONENT_EXPORT(BASE_CLIPBOARD_TYPES) extern const char kMimeTypeRTF[];
+COMPONENT_EXPORT(BASE_CLIPBOARD_TYPES) extern const char kMimeTypePNG[];
+COMPONENT_EXPORT(BASE_CLIPBOARD_TYPES)
+extern const char kMimeTypeWebCustomData[];
+COMPONENT_EXPORT(BASE_CLIPBOARD_TYPES)
+extern const char kMimeTypeWebkitSmartPaste[];
+COMPONENT_EXPORT(BASE_CLIPBOARD_TYPES)
+extern const char kMimeTypePepperCustomData[];
+
+}  // namespace ui
+
+#endif  // UI_BASE_CLIPBOARD_CLIPBOARD_H_
diff --git a/ui/base/clipboard/custom_data_helper_mac.mm b/ui/base/clipboard/clipboard_constants_mac.mm
similarity index 75%
rename from ui/base/clipboard/custom_data_helper_mac.mm
rename to ui/base/clipboard/clipboard_constants_mac.mm
index 587d7b41a9e2..e415c44402ea 100644
--- a/ui/base/clipboard/custom_data_helper_mac.mm
+++ b/ui/base/clipboard/clipboard_constants_mac.mm
@@ -1,8 +1,8 @@
-// Copyright (c) 2011 The Chromium Authors. All rights reserved.
+// Copyright 2013 The Chromium Authors. All rights reserved.
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#include "ui/base/clipboard/custom_data_helper.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 
 #import <Foundation/Foundation.h>
 
diff --git a/ui/base/clipboard/clipboard_format_type.h b/ui/base/clipboard/clipboard_format_type.h
new file mode 100644
index 000000000000..eb5b91ff29fa
--- /dev/null
+++ b/ui/base/clipboard/clipboard_format_type.h
@@ -0,0 +1,118 @@
+// Copyright 2019 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef UI_BASE_CLIPBOARD_CLIPBOARD_FORMAT_TYPE_H_
+#define UI_BASE_CLIPBOARD_CLIPBOARD_FORMAT_TYPE_H_
+
+#include <string>
+
+#include "base/component_export.h"
+#include "base/no_destructor.h"
+#include "build/build_config.h"
+
+#if defined(OS_WIN)
+#include <objidl.h>
+#endif
+
+#ifdef __OBJC__
+@class NSString;
+#else
+class NSString;
+#endif
+
+namespace ui {
+
+// Platform neutral holder for native data representation of a clipboard type.
+struct COMPONENT_EXPORT(BASE_CLIPBOARD_TYPES) ClipboardFormatType {
+  ClipboardFormatType();
+  ~ClipboardFormatType();
+
+  // Serializes and deserializes a ClipboardFormatType for use in IPC messages.
+  std::string Serialize() const;
+  static ClipboardFormatType Deserialize(const std::string& serialization);
+
+  // Gets the ClipboardFormatType corresponding to an arbitrary format string,
+  // registering it with the system if needed. Due to Windows/Linux
+  // limitations, |format_string| must never be controlled by the user.
+  static ClipboardFormatType GetType(const std::string& format_string);
+
+  // Get format identifiers for various types.
+  static const ClipboardFormatType& GetUrlType();
+  static const ClipboardFormatType& GetUrlWType();
+  static const ClipboardFormatType& GetMozUrlType();
+  static const ClipboardFormatType& GetPlainTextType();
+  static const ClipboardFormatType& GetPlainTextWType();
+  static const ClipboardFormatType& GetFilenameType();
+  static const ClipboardFormatType& GetFilenameWType();
+  static const ClipboardFormatType& GetWebKitSmartPasteType();
+  // Win: MS HTML Format, Other: Generic HTML format
+  static const ClipboardFormatType& GetHtmlType();
+  static const ClipboardFormatType& GetRtfType();
+  static const ClipboardFormatType& GetBitmapType();
+  // TODO(raymes): Unify web custom data and pepper custom data:
+  // crbug.com/158399.
+  static const ClipboardFormatType& GetWebCustomDataType();
+  static const ClipboardFormatType& GetPepperCustomDataType();
+
+#if defined(OS_WIN)
+  // Firefox text/html
+  static const ClipboardFormatType& GetTextHtmlType();
+  static const ClipboardFormatType& GetCFHDropType();
+  static const ClipboardFormatType& GetFileDescriptorType();
+  static const ClipboardFormatType& GetFileContentZeroType();
+  static const ClipboardFormatType& GetIDListType();
+#endif
+
+#if defined(OS_ANDROID)
+  static const ClipboardFormatType& GetBookmarkType();
+#endif
+
+  // ClipboardFormatType can be used in a set on some platforms.
+  bool operator<(const ClipboardFormatType& other) const;
+
+#if defined(OS_WIN)
+  const FORMATETC& ToFormatEtc() const { return data_; }
+#elif defined(USE_AURA) || defined(OS_ANDROID) || defined(OS_FUCHSIA)
+  const std::string& ToString() const { return data_; }
+#elif defined(OS_MACOSX)
+  NSString* ToNSString() const { return data_; }
+  // Custom copy and assignment constructor to handle NSString.
+  ClipboardFormatType(const ClipboardFormatType& other);
+  ClipboardFormatType& operator=(const ClipboardFormatType& other);
+#endif
+
+  bool Equals(const ClipboardFormatType& other) const;
+
+ private:
+  friend class base::NoDestructor<ClipboardFormatType>;
+  friend struct ClipboardFormatType;
+
+  // Platform-specific glue used internally by the ClipboardFormatType struct.
+  // Each platform should define,at least one of each of the following:
+  // 1. A constructor that wraps that native clipboard format descriptor.
+  // 2. An accessor to retrieve the wrapped descriptor.
+  // 3. A data member to hold the wrapped descriptor.
+  //
+  // Note that in some cases, the accessor for the wrapped descriptor may be
+  // public, as these format types can be used by drag and drop code as well.
+#if defined(OS_WIN)
+  explicit ClipboardFormatType(UINT native_format);
+  ClipboardFormatType(UINT native_format, LONG index);
+  FORMATETC data_;
+#elif defined(USE_AURA) || defined(OS_ANDROID) || defined(OS_FUCHSIA)
+  explicit ClipboardFormatType(const std::string& native_format);
+  std::string data_;
+#elif defined(OS_MACOSX)
+  explicit ClipboardFormatType(NSString* native_format);
+  NSString* data_;
+#else
+#error No ClipboardFormatType definition.
+#endif
+
+  // Copyable and assignable, since this is essentially an opaque value type.
+};
+
+}  // namespace ui
+
+#endif  // UI_BASE_CLIPBOARD_CLIPBOARD_FORMAT_TYPE_H_
diff --git a/ui/base/clipboard/clipboard_format_type_android.cc b/ui/base/clipboard/clipboard_format_type_android.cc
new file mode 100644
index 000000000000..74a6e3f4b524
--- /dev/null
+++ b/ui/base/clipboard/clipboard_format_type_android.cc
@@ -0,0 +1,119 @@
+// Copyright 2019 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "ui/base/clipboard/clipboard_format_type.h"
+
+#include "ui/base/clipboard/clipboard_constants.h"
+
+namespace ui {
+
+namespace {
+
+// Various formats we support.
+const char kURLFormat[] = "url";
+const char kPlainTextFormat[] = "text";
+const char kHTMLFormat[] = "html";
+const char kRTFFormat[] = "rtf";
+const char kBitmapFormat[] = "bitmap";
+const char kWebKitSmartPasteFormat[] = "webkit_smart";
+const char kBookmarkFormat[] = "bookmark";
+
+}  // namespace
+
+// ClipboardFormatType implementation.
+ClipboardFormatType::ClipboardFormatType() {}
+
+ClipboardFormatType::ClipboardFormatType(const std::string& native_format)
+    : data_(native_format) {}
+
+ClipboardFormatType::~ClipboardFormatType() {}
+
+std::string ClipboardFormatType::Serialize() const {
+  return data_;
+}
+
+// static
+ClipboardFormatType ClipboardFormatType::Deserialize(
+    const std::string& serialization) {
+  return ClipboardFormatType(serialization);
+}
+
+bool ClipboardFormatType::operator<(const ClipboardFormatType& other) const {
+  return data_ < other.data_;
+}
+
+bool ClipboardFormatType::Equals(const ClipboardFormatType& other) const {
+  return data_ == other.data_;
+}
+
+// Various predefined ClipboardFormatTypes.
+
+// static
+ClipboardFormatType ClipboardFormatType::GetType(
+    const std::string& format_string) {
+  return ClipboardFormatType::Deserialize(format_string);
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetUrlWType() {
+  static base::NoDestructor<ClipboardFormatType> type(kURLFormat);
+  return *type;
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetPlainTextType() {
+  static base::NoDestructor<ClipboardFormatType> type(kPlainTextFormat);
+  return *type;
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetPlainTextWType() {
+  static base::NoDestructor<ClipboardFormatType> type(kPlainTextFormat);
+  return *type;
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetWebKitSmartPasteType() {
+  static base::NoDestructor<ClipboardFormatType> type(kWebKitSmartPasteFormat);
+  return *type;
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetHtmlType() {
+  static base::NoDestructor<ClipboardFormatType> type(kHTMLFormat);
+  return *type;
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetRtfType() {
+  static base::NoDestructor<ClipboardFormatType> type(kRTFFormat);
+  return *type;
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetBitmapType() {
+  static base::NoDestructor<ClipboardFormatType> type(kBitmapFormat);
+  return *type;
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetWebCustomDataType() {
+  static base::NoDestructor<ClipboardFormatType> type(kMimeTypeWebCustomData);
+  return *type;
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetPepperCustomDataType() {
+  static base::NoDestructor<ClipboardFormatType> type(
+      kMimeTypePepperCustomData);
+  return *type;
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetBookmarkType() {
+  static base::NoDestructor<ClipboardFormatType> type(kBookmarkFormat);
+  return *type;
+}
+
+}  // namespace ui
diff --git a/ui/base/clipboard/clipboard_format_type_aura.cc b/ui/base/clipboard/clipboard_format_type_aura.cc
new file mode 100644
index 000000000000..e68dacd6571c
--- /dev/null
+++ b/ui/base/clipboard/clipboard_format_type_aura.cc
@@ -0,0 +1,130 @@
+// Copyright 2019 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "ui/base/clipboard/clipboard_format_type.h"
+
+#include "ui/base/clipboard/clipboard_constants.h"
+
+namespace ui {
+
+namespace {
+constexpr char kMimeTypeFilename[] = "chromium/filename";
+}
+
+// I would love for the ClipboardFormatType to really be a wrapper around an X11
+// ::Atom, but there are a few problems. Chromeos unit tests spawn a new X11
+// server for each test, so Atom numeric values don't persist across tests. We
+// could still maybe deal with that if we didn't have static accessor methods
+// everywhere.
+ClipboardFormatType::ClipboardFormatType() = default;
+
+ClipboardFormatType::~ClipboardFormatType() = default;
+
+ClipboardFormatType::ClipboardFormatType(const std::string& native_format)
+    : data_(native_format) {}
+
+std::string ClipboardFormatType::Serialize() const {
+  return data_;
+}
+
+// static
+ClipboardFormatType ClipboardFormatType::Deserialize(
+    const std::string& serialization) {
+  return ClipboardFormatType(serialization);
+}
+
+bool ClipboardFormatType::operator<(const ClipboardFormatType& other) const {
+  return data_ < other.data_;
+}
+
+bool ClipboardFormatType::Equals(const ClipboardFormatType& other) const {
+  return data_ == other.data_;
+}
+
+// Various predefined ClipboardFormatTypes.
+
+// static
+ClipboardFormatType ClipboardFormatType::GetType(
+    const std::string& format_string) {
+  return ClipboardFormatType::Deserialize(format_string);
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetUrlType() {
+  static base::NoDestructor<ClipboardFormatType> type(kMimeTypeURIList);
+  return *type;
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetUrlWType() {
+  return ClipboardFormatType::GetUrlType();
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetMozUrlType() {
+  static base::NoDestructor<ClipboardFormatType> type(kMimeTypeMozillaURL);
+  return *type;
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetPlainTextType() {
+  static base::NoDestructor<ClipboardFormatType> type(kMimeTypeText);
+  return *type;
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetPlainTextWType() {
+  return ClipboardFormatType::GetPlainTextType();
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetFilenameType() {
+  static base::NoDestructor<ClipboardFormatType> type(kMimeTypeFilename);
+  return *type;
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetFilenameWType() {
+  return ClipboardFormatType::GetFilenameType();
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetHtmlType() {
+  static base::NoDestructor<ClipboardFormatType> type(kMimeTypeHTML);
+  return *type;
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetRtfType() {
+  static base::NoDestructor<ClipboardFormatType> type(kMimeTypeRTF);
+  return *type;
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetBitmapType() {
+  static base::NoDestructor<ClipboardFormatType> type(kMimeTypePNG);
+  return *type;
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetWebKitSmartPasteType() {
+  static base::NoDestructor<ClipboardFormatType> type(
+      kMimeTypeWebkitSmartPaste);
+  return *type;
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetWebCustomDataType() {
+  static base::NoDestructor<ClipboardFormatType> type(kMimeTypeWebCustomData);
+  return *type;
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetPepperCustomDataType() {
+  static base::NoDestructor<ClipboardFormatType> type(
+      kMimeTypePepperCustomData);
+  return *type;
+}
+
+}  // namespace ui
diff --git a/ui/base/clipboard/clipboard_format_type_mac.mm b/ui/base/clipboard/clipboard_format_type_mac.mm
new file mode 100644
index 000000000000..6ee040c13608
--- /dev/null
+++ b/ui/base/clipboard/clipboard_format_type_mac.mm
@@ -0,0 +1,144 @@
+// Copyright 2019 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "ui/base/clipboard/clipboard_format_type.h"
+
+#import <Cocoa/Cocoa.h>
+
+#include "base/strings/sys_string_conversions.h"
+#include "ui/base/clipboard/clipboard_constants.h"
+
+namespace ui {
+
+namespace {
+
+// Tells us if WebKit was the last to write to the pasteboard. There's no
+// actual data associated with this type.
+NSString* const kWebSmartPastePboardType = @"NeXT smart paste pasteboard type";
+
+// Pepper custom data format type.
+NSString* const kPepperCustomDataPboardType =
+    @"org.chromium.pepper-custom-data";
+
+}  // namespace
+
+// ClipboardFormatType implementation.
+ClipboardFormatType::ClipboardFormatType() : data_(nil) {}
+
+ClipboardFormatType::ClipboardFormatType(NSString* native_format)
+    : data_([native_format retain]) {}
+
+ClipboardFormatType::ClipboardFormatType(const ClipboardFormatType& other)
+    : data_([other.data_ retain]) {}
+
+ClipboardFormatType& ClipboardFormatType::operator=(
+    const ClipboardFormatType& other) {
+  if (this != &other) {
+    [data_ release];
+    data_ = [other.data_ retain];
+  }
+  return *this;
+}
+
+bool ClipboardFormatType::Equals(const ClipboardFormatType& other) const {
+  return [data_ isEqualToString:other.data_];
+}
+
+ClipboardFormatType::~ClipboardFormatType() {
+  [data_ release];
+}
+
+std::string ClipboardFormatType::Serialize() const {
+  return base::SysNSStringToUTF8(data_);
+}
+
+// static
+ClipboardFormatType ClipboardFormatType::Deserialize(
+    const std::string& serialization) {
+  return ClipboardFormatType(base::SysUTF8ToNSString(serialization));
+}
+
+bool ClipboardFormatType::operator<(const ClipboardFormatType& other) const {
+  return [data_ compare:other.data_] == NSOrderedAscending;
+}
+
+// Various predefined ClipboardFormatTypes.
+
+// static
+ClipboardFormatType ClipboardFormatType::GetType(
+    const std::string& format_string) {
+  return ClipboardFormatType::Deserialize(format_string);
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetUrlType() {
+  static base::NoDestructor<ClipboardFormatType> type(NSURLPboardType);
+  return *type;
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetUrlWType() {
+  return ClipboardFormatType::GetUrlType();
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetPlainTextType() {
+  static base::NoDestructor<ClipboardFormatType> type(NSPasteboardTypeString);
+  return *type;
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetPlainTextWType() {
+  return ClipboardFormatType::GetPlainTextType();
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetFilenameType() {
+  static base::NoDestructor<ClipboardFormatType> type(NSFilenamesPboardType);
+  return *type;
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetFilenameWType() {
+  return ClipboardFormatType::GetFilenameType();
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetHtmlType() {
+  static base::NoDestructor<ClipboardFormatType> type(NSHTMLPboardType);
+  return *type;
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetRtfType() {
+  static base::NoDestructor<ClipboardFormatType> type(NSRTFPboardType);
+  return *type;
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetBitmapType() {
+  static base::NoDestructor<ClipboardFormatType> type(NSTIFFPboardType);
+  return *type;
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetWebKitSmartPasteType() {
+  static base::NoDestructor<ClipboardFormatType> type(kWebSmartPastePboardType);
+  return *type;
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetWebCustomDataType() {
+  static base::NoDestructor<ClipboardFormatType> type(kWebCustomDataPboardType);
+  return *type;
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetPepperCustomDataType() {
+  static base::NoDestructor<ClipboardFormatType> type(
+      kPepperCustomDataPboardType);
+  return *type;
+}
+
+}  // namespace ui
diff --git a/ui/base/clipboard/clipboard_format_type_win.cc b/ui/base/clipboard/clipboard_format_type_win.cc
new file mode 100644
index 000000000000..ebb4ba850bbd
--- /dev/null
+++ b/ui/base/clipboard/clipboard_format_type_win.cc
@@ -0,0 +1,214 @@
+// Copyright 2019 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "ui/base/clipboard/clipboard_format_type.h"
+
+#include <shlobj.h>
+
+#include "base/lazy_instance.h"
+#include "base/logging.h"
+#include "base/strings/string_number_conversions.h"
+#include "base/strings/utf_string_conversions.h"
+
+namespace ui {
+
+// ClipboardFormatType implementation.
+ClipboardFormatType::ClipboardFormatType() : data_() {}
+
+ClipboardFormatType::ClipboardFormatType(UINT native_format) : data_() {
+  // There's no good way to actually initialize this in the constructor in
+  // C++03.
+  data_.cfFormat = static_cast<CLIPFORMAT>(native_format);
+  data_.dwAspect = DVASPECT_CONTENT;
+  data_.lindex = -1;
+  data_.tymed = TYMED_HGLOBAL;
+}
+
+ClipboardFormatType::ClipboardFormatType(UINT native_format, LONG index)
+    : data_() {
+  // There's no good way to actually initialize this in the constructor in
+  // C++03.
+  data_.cfFormat = static_cast<CLIPFORMAT>(native_format);
+  data_.dwAspect = DVASPECT_CONTENT;
+  data_.lindex = index;
+  data_.tymed = TYMED_HGLOBAL;
+}
+
+ClipboardFormatType::~ClipboardFormatType() {}
+
+std::string ClipboardFormatType::Serialize() const {
+  return base::IntToString(data_.cfFormat);
+}
+
+// static
+ClipboardFormatType ClipboardFormatType::Deserialize(
+    const std::string& serialization) {
+  int clipboard_format = -1;
+  if (!base::StringToInt(serialization, &clipboard_format)) {
+    NOTREACHED();
+    return ClipboardFormatType();
+  }
+  return ClipboardFormatType(clipboard_format);
+}
+
+bool ClipboardFormatType::operator<(const ClipboardFormatType& other) const {
+  return data_.cfFormat < other.data_.cfFormat;
+}
+
+bool ClipboardFormatType::Equals(const ClipboardFormatType& other) const {
+  return data_.cfFormat == other.data_.cfFormat;
+}
+
+// Various predefined ClipboardFormatTypes.
+
+// static
+ClipboardFormatType ClipboardFormatType::GetType(
+    const std::string& format_string) {
+  return ClipboardFormatType(
+      ::RegisterClipboardFormat(base::ASCIIToUTF16(format_string).c_str()));
+}
+
+// The following formats can be referenced by ClipboardUtilWin::GetPlainText.
+// For reasons (COM), they must be initialized in a thread-safe manner.
+// TODO(dcheng): We probably need to make static initialization of "known"
+// ClipboardFormatTypes thread-safe on all platforms.
+#define CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(name, ...)                        \
+  struct ClipboardFormatTypeArgumentForwarder : public ClipboardFormatType { \
+    ClipboardFormatTypeArgumentForwarder()                                   \
+        : ClipboardFormatType(__VA_ARGS__) {}                                \
+  };                                                                         \
+  static base::LazyInstance<ClipboardFormatTypeArgumentForwarder>::Leaky     \
+      name = LAZY_INSTANCE_INITIALIZER
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetUrlType() {
+  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(type,
+                                     ::RegisterClipboardFormat(CFSTR_INETURLA));
+  return type.Get();
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetUrlWType() {
+  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(type,
+                                     ::RegisterClipboardFormat(CFSTR_INETURLW));
+  return type.Get();
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetMozUrlType() {
+  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(
+      type, ::RegisterClipboardFormat(L"text/x-moz-url"));
+  return type.Get();
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetPlainTextType() {
+  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(type, CF_TEXT);
+  return type.Get();
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetPlainTextWType() {
+  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(type, CF_UNICODETEXT);
+  return type.Get();
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetFilenameType() {
+  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(
+      type, ::RegisterClipboardFormat(CFSTR_FILENAMEA));
+  return type.Get();
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetFilenameWType() {
+  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(
+      type, ::RegisterClipboardFormat(CFSTR_FILENAMEW));
+  return type.Get();
+}
+
+// MS HTML Format
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetHtmlType() {
+  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(type,
+                                     ::RegisterClipboardFormat(L"HTML Format"));
+  return type.Get();
+}
+
+// MS RTF Format
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetRtfType() {
+  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(
+      type, ::RegisterClipboardFormat(L"Rich Text Format"));
+  return type.Get();
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetBitmapType() {
+  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(type, CF_BITMAP);
+  return type.Get();
+}
+
+// Firefox text/html
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetTextHtmlType() {
+  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(type,
+                                     ::RegisterClipboardFormat(L"text/html"));
+  return type.Get();
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetCFHDropType() {
+  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(type, CF_HDROP);
+  return type.Get();
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetFileDescriptorType() {
+  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(
+      type, ::RegisterClipboardFormat(CFSTR_FILEDESCRIPTOR));
+  return type.Get();
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetFileContentZeroType() {
+  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(
+      type, ::RegisterClipboardFormat(CFSTR_FILECONTENTS), 0);
+  return type.Get();
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetIDListType() {
+  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(
+      type, ::RegisterClipboardFormat(CFSTR_SHELLIDLIST));
+  return type.Get();
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetWebKitSmartPasteType() {
+  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(
+      type, ::RegisterClipboardFormat(L"WebKit Smart Paste Format"));
+  return type.Get();
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetWebCustomDataType() {
+  // TODO(dcheng): This name is temporary. See http://crbug.com/106449.
+  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(
+      type, ::RegisterClipboardFormat(L"Chromium Web Custom MIME Data Format"));
+  return type.Get();
+}
+
+// static
+const ClipboardFormatType& ClipboardFormatType::GetPepperCustomDataType() {
+  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(
+      type, ::RegisterClipboardFormat(L"Chromium Pepper MIME Data Format"));
+  return type.Get();
+}
+#undef CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE
+
+}  // namespace ui
diff --git a/ui/base/clipboard/clipboard_mac.h b/ui/base/clipboard/clipboard_mac.h
index e902f614ed5d..65c377ab7c94 100644
--- a/ui/base/clipboard/clipboard_mac.h
+++ b/ui/base/clipboard/clipboard_mac.h
@@ -8,16 +8,16 @@
 #include <stddef.h>
 #include <stdint.h>
 
+#include "base/component_export.h"
 #include "base/gtest_prod_util.h"
 #include "base/macros.h"
 #include "ui/base/clipboard/clipboard.h"
-#include "ui/base/ui_base_export.h"
 
 @class NSPasteboard;
 
 namespace ui {
 
-class UI_BASE_EXPORT ClipboardMac : public Clipboard {
+class COMPONENT_EXPORT(BASE_CLIPBOARD) ClipboardMac : public Clipboard {
  private:
   FRIEND_TEST_ALL_PREFIXES(ClipboardMacTest, ReadImageRetina);
   FRIEND_TEST_ALL_PREFIXES(ClipboardMacTest, ReadImageNonRetina);
@@ -31,7 +31,7 @@ class UI_BASE_EXPORT ClipboardMac : public Clipboard {
   // Clipboard overrides:
   void OnPreShutdown() override;
   uint64_t GetSequenceNumber(ClipboardType type) const override;
-  bool IsFormatAvailable(const FormatType& format,
+  bool IsFormatAvailable(const ClipboardFormatType& format,
                          ClipboardType type) const override;
   void Clear(ClipboardType type) override;
   void ReadAvailableTypes(ClipboardType type,
@@ -51,7 +51,8 @@ class UI_BASE_EXPORT ClipboardMac : public Clipboard {
                       const base::string16& type,
                       base::string16* result) const override;
   void ReadBookmark(base::string16* title, std::string* url) const override;
-  void ReadData(const FormatType& format, std::string* result) const override;
+  void ReadData(const ClipboardFormatType& format,
+                std::string* result) const override;
   void WriteObjects(ClipboardType type, const ObjectMap& objects) override;
   void WriteText(const char* text_data, size_t text_len) override;
   void WriteHTML(const char* markup_data,
@@ -65,7 +66,7 @@ class UI_BASE_EXPORT ClipboardMac : public Clipboard {
                      size_t url_len) override;
   void WriteWebSmartPaste() override;
   void WriteBitmap(const SkBitmap& bitmap) override;
-  void WriteData(const FormatType& format,
+  void WriteData(const ClipboardFormatType& format,
                  const char* data_data,
                  size_t data_len) override;
 
diff --git a/ui/base/clipboard/clipboard_mac.mm b/ui/base/clipboard/clipboard_mac.mm
index 267743860cea..7ec5c99c9ffe 100644
--- a/ui/base/clipboard/clipboard_mac.mm
+++ b/ui/base/clipboard/clipboard_mac.mm
@@ -11,6 +11,7 @@
 
 #include "base/files/file_path.h"
 #include "base/logging.h"
+#include "base/mac/foundation_util.h"
 #include "base/mac/mac_util.h"
 #include "base/mac/scoped_cftyperef.h"
 #include "base/mac/scoped_nsobject.h"
@@ -22,6 +23,7 @@
 #include "skia/ext/skia_utils_mac.h"
 #import "third_party/mozilla/NSPasteboard+Utils.h"
 #include "third_party/skia/include/core/SkBitmap.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 #include "ui/base/clipboard/clipboard_util_mac.h"
 #include "ui/base/clipboard/custom_data_helper.h"
 #include "ui/gfx/canvas.h"
@@ -32,14 +34,6 @@ namespace ui {
 
 namespace {
 
-// Tells us if WebKit was the last to write to the pasteboard. There's no
-// actual data associated with this type.
-NSString* const kWebSmartPastePboardType = @"NeXT smart paste pasteboard type";
-
-// Pepper custom data format type.
-NSString* const kPepperCustomDataPboardType =
-    @"org.chromium.pepper-custom-data";
-
 NSPasteboard* GetPasteboard() {
   // The pasteboard can always be nil, since there is a finite amount of storage
   // that must be shared between all pasteboards.
@@ -49,125 +43,6 @@ NSPasteboard* GetPasteboard() {
 
 }  // namespace
 
-// Clipboard::FormatType implementation.
-Clipboard::FormatType::FormatType() : data_(nil) {
-}
-
-Clipboard::FormatType::FormatType(NSString* native_format)
-    : data_([native_format retain]) {
-}
-
-Clipboard::FormatType::FormatType(const FormatType& other)
-    : data_([other.data_ retain]) {
-}
-
-Clipboard::FormatType& Clipboard::FormatType::operator=(
-    const FormatType& other) {
-  if (this != &other) {
-    [data_ release];
-    data_ = [other.data_ retain];
-  }
-  return *this;
-}
-
-bool Clipboard::FormatType::Equals(const FormatType& other) const {
-  return [data_ isEqualToString:other.data_];
-}
-
-Clipboard::FormatType::~FormatType() {
-  [data_ release];
-}
-
-std::string Clipboard::FormatType::Serialize() const {
-  return base::SysNSStringToUTF8(data_);
-}
-
-// static
-Clipboard::FormatType Clipboard::FormatType::Deserialize(
-    const std::string& serialization) {
-  return FormatType(base::SysUTF8ToNSString(serialization));
-}
-
-bool Clipboard::FormatType::operator<(const FormatType& other) const {
-  return [data_ compare:other.data_] == NSOrderedAscending;
-}
-
-// Various predefined FormatTypes.
-// static
-Clipboard::FormatType Clipboard::GetFormatType(
-    const std::string& format_string) {
-  return FormatType::Deserialize(format_string);
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetUrlFormatType() {
-  static base::NoDestructor<FormatType> type(NSURLPboardType);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetUrlWFormatType() {
-  return GetUrlFormatType();
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetPlainTextFormatType() {
-  static base::NoDestructor<FormatType> type(NSPasteboardTypeString);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetPlainTextWFormatType() {
-  return GetPlainTextFormatType();
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetFilenameFormatType() {
-  static base::NoDestructor<FormatType> type(NSFilenamesPboardType);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetFilenameWFormatType() {
-  return GetFilenameFormatType();
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetHtmlFormatType() {
-  static base::NoDestructor<FormatType> type(NSHTMLPboardType);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetRtfFormatType() {
-  static base::NoDestructor<FormatType> type(NSRTFPboardType);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetBitmapFormatType() {
-  static base::NoDestructor<FormatType> type(NSTIFFPboardType);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetWebKitSmartPasteFormatType() {
-  static base::NoDestructor<FormatType> type(kWebSmartPastePboardType);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetWebCustomDataFormatType() {
-  static base::NoDestructor<FormatType> type(kWebCustomDataPboardType);
-  return *type;
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetPepperCustomDataFormatType() {
-  static base::NoDestructor<FormatType> type(kPepperCustomDataPboardType);
-  return *type;
-}
-
 // Clipboard factory method.
 // static
 Clipboard* Clipboard::Create() {
@@ -193,7 +68,7 @@ uint64_t ClipboardMac::GetSequenceNumber(ClipboardType type) const {
   return [pb changeCount];
 }
 
-bool ClipboardMac::IsFormatAvailable(const FormatType& format,
+bool ClipboardMac::IsFormatAvailable(const ClipboardFormatType& format,
                                      ClipboardType type) const {
   DCHECK(CalledOnValidThread());
   DCHECK_EQ(type, CLIPBOARD_TYPE_COPY_PASTE);
@@ -223,11 +98,11 @@ void ClipboardMac::ReadAvailableTypes(ClipboardType type,
                                       bool* contains_filenames) const {
   DCHECK(CalledOnValidThread());
   types->clear();
-  if (IsFormatAvailable(Clipboard::GetPlainTextFormatType(), type))
+  if (IsFormatAvailable(ClipboardFormatType::GetPlainTextType(), type))
     types->push_back(base::UTF8ToUTF16(kMimeTypeText));
-  if (IsFormatAvailable(Clipboard::GetHtmlFormatType(), type))
+  if (IsFormatAvailable(ClipboardFormatType::GetHtmlType(), type))
     types->push_back(base::UTF8ToUTF16(kMimeTypeHTML));
-  if (IsFormatAvailable(Clipboard::GetRtfFormatType(), type))
+  if (IsFormatAvailable(ClipboardFormatType::GetRtfType(), type))
     types->push_back(base::UTF8ToUTF16(kMimeTypeRTF));
 
   NSPasteboard* pb = GetPasteboard();
@@ -299,7 +174,7 @@ void ClipboardMac::ReadRTF(ClipboardType type, std::string* result) const {
   DCHECK(CalledOnValidThread());
   DCHECK_EQ(type, CLIPBOARD_TYPE_COPY_PASTE);
 
-  return ReadData(GetRtfFormatType(), result);
+  return ReadData(ClipboardFormatType::GetRtfType(), result);
 }
 
 SkBitmap ClipboardMac::ReadImage(ClipboardType type, NSPasteboard* pb) const {
@@ -387,7 +262,7 @@ void ClipboardMac::ReadBookmark(base::string16* title, std::string* url) const {
   }
 }
 
-void ClipboardMac::ReadData(const FormatType& format,
+void ClipboardMac::ReadData(const ClipboardFormatType& format,
                             std::string* result) const {
   DCHECK(CalledOnValidThread());
   NSPasteboard* pb = GetPasteboard();
@@ -433,7 +308,7 @@ void ClipboardMac::WriteHTML(const char* markup_data,
 }
 
 void ClipboardMac::WriteRTF(const char* rtf_data, size_t data_len) {
-  WriteData(GetRtfFormatType(), rtf_data, data_len);
+  WriteData(ClipboardFormatType::GetRtfType(), rtf_data, data_len);
 }
 
 void ClipboardMac::WriteBookmark(const char* title_data,
@@ -475,7 +350,7 @@ void ClipboardMac::WriteBitmap(const SkBitmap& bitmap) {
   }
 }
 
-void ClipboardMac::WriteData(const FormatType& format,
+void ClipboardMac::WriteData(const ClipboardFormatType& format,
                              const char* data_data,
                              size_t data_len) {
   NSPasteboard* pb = GetPasteboard();
@@ -488,7 +363,8 @@ void ClipboardMac::WriteData(const FormatType& format,
 // pasteboard. This flavor has no data.
 void ClipboardMac::WriteWebSmartPaste() {
   NSPasteboard* pb = GetPasteboard();
-  NSString* format = GetWebKitSmartPasteFormatType().ToNSString();
+  NSString* format =
+      ClipboardFormatType::GetWebKitSmartPasteType().ToNSString();
   [pb addTypes:@[ format ] owner:nil];
   [pb setData:nil forType:format];
 }
diff --git a/ui/base/clipboard/clipboard_monitor.h b/ui/base/clipboard/clipboard_monitor.h
index 448c0f767137..bb03186f3d3b 100644
--- a/ui/base/clipboard/clipboard_monitor.h
+++ b/ui/base/clipboard/clipboard_monitor.h
@@ -5,11 +5,11 @@
 #ifndef UI_BASE_CLIPBOARD_CLIPBOARD_MONITOR_H_
 #define UI_BASE_CLIPBOARD_CLIPBOARD_MONITOR_H_
 
+#include "base/component_export.h"
 #include "base/macros.h"
 #include "base/no_destructor.h"
 #include "base/observer_list.h"
 #include "base/threading/thread_checker.h"
-#include "ui/base/ui_base_export.h"
 
 namespace ui {
 
@@ -17,7 +17,7 @@ class ClipboardObserver;
 
 // A singleton instance to monitor and notify ClipboardObservers for clipboard
 // changes.
-class UI_BASE_EXPORT ClipboardMonitor {
+class COMPONENT_EXPORT(BASE_CLIPBOARD) ClipboardMonitor {
  public:
   static ClipboardMonitor* GetInstance();
 
diff --git a/ui/base/clipboard/clipboard_observer.h b/ui/base/clipboard/clipboard_observer.h
index 82afdd38a721..1aa813d63e6e 100644
--- a/ui/base/clipboard/clipboard_observer.h
+++ b/ui/base/clipboard/clipboard_observer.h
@@ -5,13 +5,13 @@
 #ifndef UI_BASE_CLIPBOARD_CLIPBOARD_OBSERVER_H_
 #define UI_BASE_CLIPBOARD_CLIPBOARD_OBSERVER_H_
 
+#include "base/component_export.h"
 #include "base/macros.h"
-#include "ui/base/ui_base_export.h"
 
 namespace ui {
 
 // Observer that receives the notifications of clipboard change events.
-class UI_BASE_EXPORT ClipboardObserver {
+class COMPONENT_EXPORT(BASE_CLIPBOARD) ClipboardObserver {
  public:
   // Called when clipboard data is changed.
   virtual void OnClipboardDataChanged() = 0;
diff --git a/ui/base/clipboard/clipboard_test_template.h b/ui/base/clipboard/clipboard_test_template.h
index fd0dcc60cf96..737dc6b1f5c5 100644
--- a/ui/base/clipboard/clipboard_test_template.h
+++ b/ui/base/clipboard/clipboard_test_template.h
@@ -34,8 +34,9 @@
 #include "third_party/skia/include/core/SkScalar.h"
 #include "third_party/skia/include/core/SkUnPreMultiply.h"
 #include "ui/base/clipboard/clipboard.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 #include "ui/base/clipboard/scoped_clipboard_writer.h"
-#include "ui/base/test/test_clipboard.h"
+#include "ui/base/clipboard/test/test_clipboard.h"
 #include "ui/gfx/geometry/size.h"
 #include "ui/gfx/half_float.h"
 
@@ -109,9 +110,9 @@ TYPED_TEST(ClipboardTest, ClearTest) {
 
   EXPECT_TRUE(this->GetAvailableTypes(CLIPBOARD_TYPE_COPY_PASTE).empty());
   EXPECT_FALSE(this->clipboard().IsFormatAvailable(
-      Clipboard::GetPlainTextWFormatType(), CLIPBOARD_TYPE_COPY_PASTE));
+      ClipboardFormatType::GetPlainTextWType(), CLIPBOARD_TYPE_COPY_PASTE));
   EXPECT_FALSE(this->clipboard().IsFormatAvailable(
-      Clipboard::GetPlainTextFormatType(), CLIPBOARD_TYPE_COPY_PASTE));
+      ClipboardFormatType::GetPlainTextType(), CLIPBOARD_TYPE_COPY_PASTE));
 }
 
 TYPED_TEST(ClipboardTest, TextTest) {
@@ -124,11 +125,11 @@ TYPED_TEST(ClipboardTest, TextTest) {
   }
 
   EXPECT_THAT(this->GetAvailableTypes(CLIPBOARD_TYPE_COPY_PASTE),
-              Contains(ASCIIToUTF16(Clipboard::kMimeTypeText)));
+              Contains(ASCIIToUTF16(kMimeTypeText)));
   EXPECT_TRUE(this->clipboard().IsFormatAvailable(
-      Clipboard::GetPlainTextWFormatType(), CLIPBOARD_TYPE_COPY_PASTE));
+      ClipboardFormatType::GetPlainTextWType(), CLIPBOARD_TYPE_COPY_PASTE));
   EXPECT_TRUE(this->clipboard().IsFormatAvailable(
-      Clipboard::GetPlainTextFormatType(), CLIPBOARD_TYPE_COPY_PASTE));
+      ClipboardFormatType::GetPlainTextType(), CLIPBOARD_TYPE_COPY_PASTE));
   this->clipboard().ReadText(CLIPBOARD_TYPE_COPY_PASTE, &text_result);
 
   EXPECT_EQ(text, text_result);
@@ -148,9 +149,9 @@ TYPED_TEST(ClipboardTest, HTMLTest) {
   }
 
   EXPECT_THAT(this->GetAvailableTypes(CLIPBOARD_TYPE_COPY_PASTE),
-              Contains(ASCIIToUTF16(Clipboard::kMimeTypeHTML)));
+              Contains(ASCIIToUTF16(kMimeTypeHTML)));
   EXPECT_TRUE(this->clipboard().IsFormatAvailable(
-      Clipboard::GetHtmlFormatType(), CLIPBOARD_TYPE_COPY_PASTE));
+      ClipboardFormatType::GetHtmlType(), CLIPBOARD_TYPE_COPY_PASTE));
   uint32_t fragment_start;
   uint32_t fragment_end;
   this->clipboard().ReadHTML(CLIPBOARD_TYPE_COPY_PASTE, &markup_result,
@@ -177,9 +178,9 @@ TYPED_TEST(ClipboardTest, RTFTest) {
   }
 
   EXPECT_THAT(this->GetAvailableTypes(CLIPBOARD_TYPE_COPY_PASTE),
-              Contains(ASCIIToUTF16(Clipboard::kMimeTypeRTF)));
-  EXPECT_TRUE(this->clipboard().IsFormatAvailable(Clipboard::GetRtfFormatType(),
-                                                  CLIPBOARD_TYPE_COPY_PASTE));
+              Contains(ASCIIToUTF16(kMimeTypeRTF)));
+  EXPECT_TRUE(this->clipboard().IsFormatAvailable(
+      ClipboardFormatType::GetRtfType(), CLIPBOARD_TYPE_COPY_PASTE));
   std::string result;
   this->clipboard().ReadRTF(CLIPBOARD_TYPE_COPY_PASTE, &result);
   EXPECT_EQ(rtf, result);
@@ -204,19 +205,19 @@ TYPED_TEST(ClipboardTest, MultipleBufferTest) {
   }
 
   EXPECT_THAT(this->GetAvailableTypes(CLIPBOARD_TYPE_COPY_PASTE),
-              Contains(ASCIIToUTF16(Clipboard::kMimeTypeText)));
+              Contains(ASCIIToUTF16(kMimeTypeText)));
   EXPECT_THAT(this->GetAvailableTypes(CLIPBOARD_TYPE_SELECTION),
-              Contains(ASCIIToUTF16(Clipboard::kMimeTypeHTML)));
+              Contains(ASCIIToUTF16(kMimeTypeHTML)));
 
   EXPECT_TRUE(this->clipboard().IsFormatAvailable(
-      Clipboard::GetPlainTextFormatType(), CLIPBOARD_TYPE_COPY_PASTE));
+      ClipboardFormatType::GetPlainTextType(), CLIPBOARD_TYPE_COPY_PASTE));
   EXPECT_FALSE(this->clipboard().IsFormatAvailable(
-      Clipboard::GetPlainTextFormatType(), CLIPBOARD_TYPE_SELECTION));
+      ClipboardFormatType::GetPlainTextType(), CLIPBOARD_TYPE_SELECTION));
 
   EXPECT_FALSE(this->clipboard().IsFormatAvailable(
-      Clipboard::GetHtmlFormatType(), CLIPBOARD_TYPE_COPY_PASTE));
+      ClipboardFormatType::GetHtmlType(), CLIPBOARD_TYPE_COPY_PASTE));
   EXPECT_TRUE(this->clipboard().IsFormatAvailable(
-      Clipboard::GetHtmlFormatType(), CLIPBOARD_TYPE_SELECTION));
+      ClipboardFormatType::GetHtmlType(), CLIPBOARD_TYPE_SELECTION));
 
   this->clipboard().ReadText(CLIPBOARD_TYPE_COPY_PASTE, &text_result);
   EXPECT_EQ(text, text_result);
@@ -245,9 +246,9 @@ TYPED_TEST(ClipboardTest, TrickyHTMLTest) {
   }
 
   EXPECT_THAT(this->GetAvailableTypes(CLIPBOARD_TYPE_COPY_PASTE),
-              Contains(ASCIIToUTF16(Clipboard::kMimeTypeHTML)));
+              Contains(ASCIIToUTF16(kMimeTypeHTML)));
   EXPECT_TRUE(this->clipboard().IsFormatAvailable(
-      Clipboard::GetHtmlFormatType(), CLIPBOARD_TYPE_COPY_PASTE));
+      ClipboardFormatType::GetHtmlType(), CLIPBOARD_TYPE_COPY_PASTE));
   uint32_t fragment_start;
   uint32_t fragment_end;
   this->clipboard().ReadHTML(CLIPBOARD_TYPE_COPY_PASTE, &markup_result,
@@ -275,9 +276,9 @@ TYPED_TEST(ClipboardTest, UnicodeHTMLTest) {
   }
 
   EXPECT_THAT(this->GetAvailableTypes(CLIPBOARD_TYPE_COPY_PASTE),
-              Contains(ASCIIToUTF16(Clipboard::kMimeTypeHTML)));
+              Contains(ASCIIToUTF16(kMimeTypeHTML)));
   EXPECT_TRUE(this->clipboard().IsFormatAvailable(
-      Clipboard::GetHtmlFormatType(), CLIPBOARD_TYPE_COPY_PASTE));
+      ClipboardFormatType::GetHtmlType(), CLIPBOARD_TYPE_COPY_PASTE));
   uint32_t fragment_start;
   uint32_t fragment_end;
   this->clipboard().ReadHTML(CLIPBOARD_TYPE_COPY_PASTE, &markup_result,
@@ -302,7 +303,7 @@ TYPED_TEST(ClipboardTest, BookmarkTest) {
   }
 
   EXPECT_TRUE(this->clipboard().IsFormatAvailable(
-      Clipboard::GetUrlWFormatType(), CLIPBOARD_TYPE_COPY_PASTE));
+      ClipboardFormatType::GetUrlWType(), CLIPBOARD_TYPE_COPY_PASTE));
   this->clipboard().ReadBookmark(&title_result, &url_result);
   EXPECT_EQ(title, title_result);
   EXPECT_EQ(url, url_result);
@@ -322,15 +323,15 @@ TYPED_TEST(ClipboardTest, MultiFormatTest) {
   }
 
   EXPECT_THAT(this->GetAvailableTypes(CLIPBOARD_TYPE_COPY_PASTE),
-              Contains(ASCIIToUTF16(Clipboard::kMimeTypeHTML)));
+              Contains(ASCIIToUTF16(kMimeTypeHTML)));
   EXPECT_THAT(this->GetAvailableTypes(CLIPBOARD_TYPE_COPY_PASTE),
-              Contains(ASCIIToUTF16(Clipboard::kMimeTypeText)));
+              Contains(ASCIIToUTF16(kMimeTypeText)));
   EXPECT_TRUE(this->clipboard().IsFormatAvailable(
-      Clipboard::GetHtmlFormatType(), CLIPBOARD_TYPE_COPY_PASTE));
+      ClipboardFormatType::GetHtmlType(), CLIPBOARD_TYPE_COPY_PASTE));
   EXPECT_TRUE(this->clipboard().IsFormatAvailable(
-      Clipboard::GetPlainTextWFormatType(), CLIPBOARD_TYPE_COPY_PASTE));
+      ClipboardFormatType::GetPlainTextWType(), CLIPBOARD_TYPE_COPY_PASTE));
   EXPECT_TRUE(this->clipboard().IsFormatAvailable(
-      Clipboard::GetPlainTextFormatType(), CLIPBOARD_TYPE_COPY_PASTE));
+      ClipboardFormatType::GetPlainTextType(), CLIPBOARD_TYPE_COPY_PASTE));
   uint32_t fragment_start;
   uint32_t fragment_end;
   this->clipboard().ReadHTML(CLIPBOARD_TYPE_COPY_PASTE, &markup_result,
@@ -358,11 +359,11 @@ TYPED_TEST(ClipboardTest, URLTest) {
   }
 
   EXPECT_THAT(this->GetAvailableTypes(CLIPBOARD_TYPE_COPY_PASTE),
-              Contains(ASCIIToUTF16(Clipboard::kMimeTypeText)));
+              Contains(ASCIIToUTF16(kMimeTypeText)));
   EXPECT_TRUE(this->clipboard().IsFormatAvailable(
-      Clipboard::GetPlainTextWFormatType(), CLIPBOARD_TYPE_COPY_PASTE));
+      ClipboardFormatType::GetPlainTextWType(), CLIPBOARD_TYPE_COPY_PASTE));
   EXPECT_TRUE(this->clipboard().IsFormatAvailable(
-      Clipboard::GetPlainTextFormatType(), CLIPBOARD_TYPE_COPY_PASTE));
+      ClipboardFormatType::GetPlainTextType(), CLIPBOARD_TYPE_COPY_PASTE));
   base::string16 text_result;
   this->clipboard().ReadText(CLIPBOARD_TYPE_COPY_PASTE, &text_result);
 
@@ -399,7 +400,7 @@ static void TestBitmapWrite(Clipboard* clipboard,
     scw.WriteImage(bitmap);
   }
 
-  EXPECT_TRUE(clipboard->IsFormatAvailable(Clipboard::GetBitmapFormatType(),
+  EXPECT_TRUE(clipboard->IsFormatAvailable(ClipboardFormatType::GetBitmapType(),
                                            CLIPBOARD_TYPE_COPY_PASTE));
   const SkBitmap& image = clipboard->ReadImage(CLIPBOARD_TYPE_COPY_PASTE);
   ASSERT_EQ(image.info().colorType(), kN32_SkColorType);
@@ -517,8 +518,8 @@ TYPED_TEST(ClipboardTest, Bitmap_N32_Premul_2x7) {
 }  // namespace
 
 TYPED_TEST(ClipboardTest, DataTest) {
-  const ui::Clipboard::FormatType kFormat =
-      ui::Clipboard::GetFormatType("chromium/x-test-format");
+  const ui::ClipboardFormatType kFormat =
+      ui::ClipboardFormatType::GetType("chromium/x-test-format");
   std::string payload("test string");
   base::Pickle write_pickle;
   write_pickle.WriteString(payload);
@@ -542,14 +543,14 @@ TYPED_TEST(ClipboardTest, DataTest) {
 }
 
 TYPED_TEST(ClipboardTest, MultipleDataTest) {
-  const ui::Clipboard::FormatType kFormat1 =
-      ui::Clipboard::GetFormatType("chromium/x-test-format1");
+  const ui::ClipboardFormatType kFormat1 =
+      ui::ClipboardFormatType::GetType("chromium/x-test-format1");
   std::string payload1("test string1");
   base::Pickle write_pickle1;
   write_pickle1.WriteString(payload1);
 
-  const ui::Clipboard::FormatType kFormat2 =
-      ui::Clipboard::GetFormatType("chromium/x-test-format2");
+  const ui::ClipboardFormatType kFormat2 =
+      ui::ClipboardFormatType::GetType("chromium/x-test-format2");
   std::string payload2("test string2");
   base::Pickle write_pickle2;
   write_pickle2.WriteString(payload2);
@@ -613,7 +614,7 @@ TYPED_TEST(ClipboardTest, HyperlinkTest) {
   }
 
   EXPECT_TRUE(this->clipboard().IsFormatAvailable(
-      Clipboard::GetHtmlFormatType(), CLIPBOARD_TYPE_COPY_PASTE));
+      ClipboardFormatType::GetHtmlType(), CLIPBOARD_TYPE_COPY_PASTE));
   uint32_t fragment_start;
   uint32_t fragment_end;
   this->clipboard().ReadHTML(CLIPBOARD_TYPE_COPY_PASTE, &html_result,
@@ -631,7 +632,8 @@ TYPED_TEST(ClipboardTest, WebSmartPasteTest) {
   }
 
   EXPECT_TRUE(this->clipboard().IsFormatAvailable(
-      Clipboard::GetWebKitSmartPasteFormatType(), CLIPBOARD_TYPE_COPY_PASTE));
+      ClipboardFormatType::GetWebKitSmartPasteType(),
+      CLIPBOARD_TYPE_COPY_PASTE));
 }
 
 #if defined(OS_WIN)  // Windows only tests.
@@ -752,7 +754,7 @@ TYPED_TEST(ClipboardTest, WriteHyperlinkEmptyParams) {
 
 TYPED_TEST(ClipboardTest, WritePickledData) {
   ScopedClipboardWriter scw(CLIPBOARD_TYPE_COPY_PASTE);
-  scw.WritePickledData(base::Pickle(), Clipboard::GetPlainTextFormatType());
+  scw.WritePickledData(base::Pickle(), ClipboardFormatType::GetPlainTextType());
 }
 
 TYPED_TEST(ClipboardTest, WriteImageEmptyParams) {
diff --git a/ui/base/clipboard/clipboard_util_mac.h b/ui/base/clipboard/clipboard_util_mac.h
index 29f927c3f313..d230ba829283 100644
--- a/ui/base/clipboard/clipboard_util_mac.h
+++ b/ui/base/clipboard/clipboard_util_mac.h
@@ -7,18 +7,18 @@
 
 #import <AppKit/AppKit.h>
 
+#include "base/component_export.h"
 #include "base/mac/scoped_nsobject.h"
 #include "base/memory/ref_counted.h"
 #include "ui/base/clipboard/clipboard_types.h"
-#include "ui/base/ui_base_export.h"
 
 namespace ui {
 
 // A publicly-used UTI for the name of a URL. It really should be in a system
 // header but isn't.
-UI_BASE_EXPORT extern NSString* const kUTTypeURLName;
+COMPONENT_EXPORT(BASE_CLIPBOARD) extern NSString* const kUTTypeURLName;
 
-class UI_BASE_EXPORT UniquePasteboard
+class COMPONENT_EXPORT(BASE_CLIPBOARD) UniquePasteboard
     : public base::RefCounted<UniquePasteboard> {
  public:
   UniquePasteboard();
@@ -31,7 +31,7 @@ class UI_BASE_EXPORT UniquePasteboard
   base::scoped_nsobject<NSPasteboard> pasteboard_;
 };
 
-class UI_BASE_EXPORT ClipboardUtil {
+class COMPONENT_EXPORT(BASE_CLIPBOARD) ClipboardUtil {
  public:
   // Returns an NSPasteboardItem that represents the given |url|.
   // |url| must not be nil.
diff --git a/ui/base/clipboard/clipboard_util_win.cc b/ui/base/clipboard/clipboard_util_win.cc
index 5d16a369ee7f..f42ac3d64979 100644
--- a/ui/base/clipboard/clipboard_util_win.cc
+++ b/ui/base/clipboard/clipboard_util_win.cc
@@ -17,7 +17,7 @@
 #include "base/win/scoped_hglobal.h"
 #include "base/win/shlwapi.h"
 #include "net/base/filename_util.h"
-#include "ui/base/clipboard/clipboard.h"
+#include "ui/base/clipboard/clipboard_format_type.h"
 #include "ui/base/clipboard/custom_data_helper.h"
 #include "url/gurl.h"
 
@@ -25,13 +25,13 @@ namespace ui {
 
 namespace {
 
-bool HasData(IDataObject* data_object, const Clipboard::FormatType& format) {
+bool HasData(IDataObject* data_object, const ClipboardFormatType& format) {
   FORMATETC format_etc = format.ToFormatEtc();
   return SUCCEEDED(data_object->QueryGetData(&format_etc));
 }
 
 bool GetData(IDataObject* data_object,
-             const Clipboard::FormatType& format,
+             const ClipboardFormatType& format,
              STGMEDIUM* medium) {
   FORMATETC format_etc = format.ToFormatEtc();
   return SUCCEEDED(data_object->GetData(&format_etc, medium));
@@ -44,7 +44,7 @@ bool GetUrlFromHDrop(IDataObject* data_object,
 
   bool success = false;
   STGMEDIUM medium;
-  if (!GetData(data_object, Clipboard::GetCFHDropFormatType(), &medium))
+  if (!GetData(data_object, ClipboardFormatType::GetCFHDropType(), &medium))
     return false;
 
   {
@@ -93,34 +93,34 @@ void SplitUrlAndTitle(const base::string16& str,
 
 bool ClipboardUtil::HasUrl(IDataObject* data_object, bool convert_filenames) {
   DCHECK(data_object);
-  return HasData(data_object, Clipboard::GetMozUrlFormatType()) ||
-         HasData(data_object, Clipboard::GetUrlWFormatType()) ||
-         HasData(data_object, Clipboard::GetUrlFormatType()) ||
+  return HasData(data_object, ClipboardFormatType::GetMozUrlType()) ||
+         HasData(data_object, ClipboardFormatType::GetUrlWType()) ||
+         HasData(data_object, ClipboardFormatType::GetUrlType()) ||
          (convert_filenames && HasFilenames(data_object));
 }
 
 bool ClipboardUtil::HasFilenames(IDataObject* data_object) {
   DCHECK(data_object);
-  return HasData(data_object, Clipboard::GetCFHDropFormatType()) ||
-         HasData(data_object, Clipboard::GetFilenameWFormatType()) ||
-         HasData(data_object, Clipboard::GetFilenameFormatType());
+  return HasData(data_object, ClipboardFormatType::GetCFHDropType()) ||
+         HasData(data_object, ClipboardFormatType::GetFilenameWType()) ||
+         HasData(data_object, ClipboardFormatType::GetFilenameType());
 }
 
 bool ClipboardUtil::HasFileContents(IDataObject* data_object) {
   DCHECK(data_object);
-  return HasData(data_object, Clipboard::GetFileContentZeroFormatType());
+  return HasData(data_object, ClipboardFormatType::GetFileContentZeroType());
 }
 
 bool ClipboardUtil::HasHtml(IDataObject* data_object) {
   DCHECK(data_object);
-  return HasData(data_object, Clipboard::GetHtmlFormatType()) ||
-         HasData(data_object, Clipboard::GetTextHtmlFormatType());
+  return HasData(data_object, ClipboardFormatType::GetHtmlType()) ||
+         HasData(data_object, ClipboardFormatType::GetTextHtmlType());
 }
 
 bool ClipboardUtil::HasPlainText(IDataObject* data_object) {
   DCHECK(data_object);
-  return HasData(data_object, Clipboard::GetPlainTextWFormatType()) ||
-         HasData(data_object, Clipboard::GetPlainTextFormatType());
+  return HasData(data_object, ClipboardFormatType::GetPlainTextWType()) ||
+         HasData(data_object, ClipboardFormatType::GetPlainTextType());
 }
 
 bool ClipboardUtil::GetUrl(IDataObject* data_object,
@@ -136,8 +136,8 @@ bool ClipboardUtil::GetUrl(IDataObject* data_object,
   if (GetUrlFromHDrop(data_object, url, title))
     return true;
 
-  if (GetData(data_object, Clipboard::GetMozUrlFormatType(), &store) ||
-      GetData(data_object, Clipboard::GetUrlWFormatType(), &store)) {
+  if (GetData(data_object, ClipboardFormatType::GetMozUrlType(), &store) ||
+      GetData(data_object, ClipboardFormatType::GetUrlWType(), &store)) {
     {
       // Mozilla URL format or unicode URL
       base::win::ScopedHGlobal<wchar_t*> data(store.hGlobal);
@@ -147,7 +147,7 @@ bool ClipboardUtil::GetUrl(IDataObject* data_object,
     return url->is_valid();
   }
 
-  if (GetData(data_object, Clipboard::GetUrlFormatType(), &store)) {
+  if (GetData(data_object, ClipboardFormatType::GetUrlType(), &store)) {
     {
       // URL using ascii
       base::win::ScopedHGlobal<char*> data(store.hGlobal);
@@ -176,7 +176,7 @@ bool ClipboardUtil::GetFilenames(IDataObject* data_object,
     return false;
 
   STGMEDIUM medium;
-  if (GetData(data_object, Clipboard::GetCFHDropFormatType(), &medium)) {
+  if (GetData(data_object, ClipboardFormatType::GetCFHDropType(), &medium)) {
     {
       base::win::ScopedHGlobal<HDROP> hdrop(medium.hGlobal);
       if (!hdrop.get())
@@ -195,7 +195,7 @@ bool ClipboardUtil::GetFilenames(IDataObject* data_object,
     return !filenames->empty();
   }
 
-  if (GetData(data_object, Clipboard::GetFilenameWFormatType(), &medium)) {
+  if (GetData(data_object, ClipboardFormatType::GetFilenameWType(), &medium)) {
     {
       // filename using unicode
       base::win::ScopedHGlobal<wchar_t*> data(medium.hGlobal);
@@ -206,7 +206,7 @@ bool ClipboardUtil::GetFilenames(IDataObject* data_object,
     return true;
   }
 
-  if (GetData(data_object, Clipboard::GetFilenameFormatType(), &medium)) {
+  if (GetData(data_object, ClipboardFormatType::GetFilenameType(), &medium)) {
     {
       // filename using ascii
       base::win::ScopedHGlobal<char*> data(medium.hGlobal);
@@ -227,7 +227,7 @@ bool ClipboardUtil::GetPlainText(IDataObject* data_object,
     return false;
 
   STGMEDIUM store;
-  if (GetData(data_object, Clipboard::GetPlainTextWFormatType(), &store)) {
+  if (GetData(data_object, ClipboardFormatType::GetPlainTextWType(), &store)) {
     {
       // Unicode text
       base::win::ScopedHGlobal<wchar_t*> data(store.hGlobal);
@@ -237,7 +237,7 @@ bool ClipboardUtil::GetPlainText(IDataObject* data_object,
     return true;
   }
 
-  if (GetData(data_object, Clipboard::GetPlainTextFormatType(), &store)) {
+  if (GetData(data_object, ClipboardFormatType::GetPlainTextType(), &store)) {
     {
       // ascii text
       base::win::ScopedHGlobal<char*> data(store.hGlobal);
@@ -263,8 +263,8 @@ bool ClipboardUtil::GetHtml(IDataObject* data_object,
   DCHECK(data_object && html && base_url);
 
   STGMEDIUM store;
-  if (HasData(data_object, Clipboard::GetHtmlFormatType()) &&
-      GetData(data_object, Clipboard::GetHtmlFormatType(), &store)) {
+  if (HasData(data_object, ClipboardFormatType::GetHtmlType()) &&
+      GetData(data_object, ClipboardFormatType::GetHtmlType(), &store)) {
     {
       // MS CF html
       base::win::ScopedHGlobal<char*> data(store.hGlobal);
@@ -277,10 +277,10 @@ bool ClipboardUtil::GetHtml(IDataObject* data_object,
     return true;
   }
 
-  if (!HasData(data_object, Clipboard::GetTextHtmlFormatType()))
+  if (!HasData(data_object, ClipboardFormatType::GetTextHtmlType()))
     return false;
 
-  if (!GetData(data_object, Clipboard::GetTextHtmlFormatType(), &store))
+  if (!GetData(data_object, ClipboardFormatType::GetTextHtmlType(), &store))
     return false;
 
   {
@@ -295,15 +295,15 @@ bool ClipboardUtil::GetHtml(IDataObject* data_object,
 bool ClipboardUtil::GetFileContents(IDataObject* data_object,
     base::string16* filename, std::string* file_contents) {
   DCHECK(data_object && filename && file_contents);
-  if (!HasData(data_object, Clipboard::GetFileContentZeroFormatType()) &&
-      !HasData(data_object, Clipboard::GetFileDescriptorFormatType()))
+  if (!HasData(data_object, ClipboardFormatType::GetFileContentZeroType()) &&
+      !HasData(data_object, ClipboardFormatType::GetFileDescriptorType()))
     return false;
 
   STGMEDIUM content;
   // The call to GetData can be very slow depending on what is in
   // |data_object|.
-  if (GetData(
-          data_object, Clipboard::GetFileContentZeroFormatType(), &content)) {
+  if (GetData(data_object, ClipboardFormatType::GetFileContentZeroType(),
+              &content)) {
     if (TYMED_HGLOBAL == content.tymed) {
       base::win::ScopedHGlobal<char*> data(content.hGlobal);
       file_contents->assign(data.get(), data.Size());
@@ -312,8 +312,7 @@ bool ClipboardUtil::GetFileContents(IDataObject* data_object,
   }
 
   STGMEDIUM description;
-  if (GetData(data_object,
-              Clipboard::GetFileDescriptorFormatType(),
+  if (GetData(data_object, ClipboardFormatType::GetFileDescriptorType(),
               &description)) {
     {
       base::win::ScopedHGlobal<FILEGROUPDESCRIPTOR*> fgd(description.hGlobal);
@@ -331,11 +330,12 @@ bool ClipboardUtil::GetWebCustomData(
     std::unordered_map<base::string16, base::string16>* custom_data) {
   DCHECK(data_object && custom_data);
 
-  if (!HasData(data_object, Clipboard::GetWebCustomDataFormatType()))
+  if (!HasData(data_object, ClipboardFormatType::GetWebCustomDataType()))
     return false;
 
   STGMEDIUM store;
-  if (GetData(data_object, Clipboard::GetWebCustomDataFormatType(), &store)) {
+  if (GetData(data_object, ClipboardFormatType::GetWebCustomDataType(),
+              &store)) {
     {
       base::win::ScopedHGlobal<char*> data(store.hGlobal);
       ReadCustomDataIntoMap(data.get(), data.Size(), custom_data);
diff --git a/ui/base/clipboard/clipboard_util_win.h b/ui/base/clipboard/clipboard_util_win.h
index 0a481851f14d..b4d0ae9528ff 100644
--- a/ui/base/clipboard/clipboard_util_win.h
+++ b/ui/base/clipboard/clipboard_util_win.h
@@ -13,14 +13,14 @@
 #include <unordered_map>
 #include <vector>
 
+#include "base/component_export.h"
 #include "base/strings/string16.h"
-#include "ui/base/ui_base_export.h"
 
 class GURL;
 
 namespace ui {
 
-class UI_BASE_EXPORT ClipboardUtil {
+class COMPONENT_EXPORT(BASE_CLIPBOARD) ClipboardUtil {
  public:
   /////////////////////////////////////////////////////////////////////////////
   // These methods check to see if |data_object| has the requested type.
@@ -72,7 +72,6 @@ class UI_BASE_EXPORT ClipboardUtil {
                                     size_t* fragment_start,
                                     size_t* fragment_end);
 };
-
 }
 
 #endif  // UI_BASE_CLIPBOARD_CLIPBOARD_UTIL_WIN_H_
diff --git a/ui/base/clipboard/clipboard_win.cc b/ui/base/clipboard/clipboard_win.cc
index 1857bfa07ce3..49654c95675e 100644
--- a/ui/base/clipboard/clipboard_win.cc
+++ b/ui/base/clipboard/clipboard_win.cc
@@ -28,6 +28,7 @@
 #include "skia/ext/skia_utils_base.h"
 #include "skia/ext/skia_utils_win.h"
 #include "third_party/skia/include/core/SkBitmap.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 #include "ui/base/clipboard/clipboard_util_win.h"
 #include "ui/base/clipboard/custom_data_helper.h"
 #include "ui/gfx/canvas.h"
@@ -220,201 +221,6 @@ void TrimAfterNull(StringType* result) {
 
 }  // namespace
 
-// Clipboard::FormatType implementation.
-Clipboard::FormatType::FormatType() : data_() {}
-
-Clipboard::FormatType::FormatType(UINT native_format) : data_() {
-  // There's no good way to actually initialize this in the constructor in
-  // C++03.
-  data_.cfFormat = static_cast<CLIPFORMAT>(native_format);
-  data_.dwAspect = DVASPECT_CONTENT;
-  data_.lindex = -1;
-  data_.tymed = TYMED_HGLOBAL;
-}
-
-Clipboard::FormatType::FormatType(UINT native_format, LONG index) : data_() {
-  // There's no good way to actually initialize this in the constructor in
-  // C++03.
-  data_.cfFormat = static_cast<CLIPFORMAT>(native_format);
-  data_.dwAspect = DVASPECT_CONTENT;
-  data_.lindex = index;
-  data_.tymed = TYMED_HGLOBAL;
-}
-
-Clipboard::FormatType::~FormatType() {
-}
-
-std::string Clipboard::FormatType::Serialize() const {
-  return base::IntToString(data_.cfFormat);
-}
-
-// static
-Clipboard::FormatType Clipboard::FormatType::Deserialize(
-    const std::string& serialization) {
-  int clipboard_format = -1;
-  if (!base::StringToInt(serialization, &clipboard_format)) {
-    NOTREACHED();
-    return FormatType();
-  }
-  return FormatType(clipboard_format);
-}
-
-bool Clipboard::FormatType::operator<(const FormatType& other) const {
-  return data_.cfFormat < other.data_.cfFormat;
-}
-
-bool Clipboard::FormatType::Equals(const FormatType& other) const {
-  return data_.cfFormat == other.data_.cfFormat;
-}
-
-// Various predefined FormatTypes.
-// static
-Clipboard::FormatType Clipboard::GetFormatType(
-    const std::string& format_string) {
-  return FormatType(
-      ::RegisterClipboardFormat(base::ASCIIToUTF16(format_string).c_str()));
-}
-
-// The following formats can be referenced by ClipboardUtilWin::GetPlainText.
-// For reasons (COM), they must be initialized in a thread-safe manner.
-// TODO(dcheng): We probably need to make static initialization of "known"
-// FormatTypes thread-safe on all platforms.
-#define CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(name, ...) \
-  struct FormatTypeArgumentForwarder : public FormatType { \
-    FormatTypeArgumentForwarder() : FormatType(__VA_ARGS__) { } \
-  }; \
-  static base::LazyInstance<FormatTypeArgumentForwarder>::Leaky name = \
-      LAZY_INSTANCE_INITIALIZER
-// static
-const Clipboard::FormatType& Clipboard::GetUrlFormatType() {
-  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(
-    type, ::RegisterClipboardFormat(CFSTR_INETURLA));
-  return type.Get();
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetUrlWFormatType() {
-  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(
-      type, ::RegisterClipboardFormat(CFSTR_INETURLW));
-  return type.Get();
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetMozUrlFormatType() {
-  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(
-      type, ::RegisterClipboardFormat(L"text/x-moz-url"));
-  return type.Get();
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetPlainTextFormatType() {
-  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(type, CF_TEXT);
-  return type.Get();
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetPlainTextWFormatType() {
-  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(type, CF_UNICODETEXT);
-  return type.Get();
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetFilenameFormatType() {
-  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(
-      type, ::RegisterClipboardFormat(CFSTR_FILENAMEA));
-  return type.Get();
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetFilenameWFormatType() {
-  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(
-      type, ::RegisterClipboardFormat(CFSTR_FILENAMEW));
-  return type.Get();
-}
-
-// MS HTML Format
-// static
-const Clipboard::FormatType& Clipboard::GetHtmlFormatType() {
-  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(
-      type, ::RegisterClipboardFormat(L"HTML Format"));
-  return type.Get();
-}
-
-// MS RTF Format
-// static
-const Clipboard::FormatType& Clipboard::GetRtfFormatType() {
-  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(
-      type, ::RegisterClipboardFormat(L"Rich Text Format"));
-  return type.Get();
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetBitmapFormatType() {
-  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(type, CF_BITMAP);
-  return type.Get();
-}
-
-// Firefox text/html
-// static
-const Clipboard::FormatType& Clipboard::GetTextHtmlFormatType() {
-  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(
-      type, ::RegisterClipboardFormat(L"text/html"));
-  return type.Get();
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetCFHDropFormatType() {
-  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(type, CF_HDROP);
-  return type.Get();
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetFileDescriptorFormatType() {
-  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(
-      type, ::RegisterClipboardFormat(CFSTR_FILEDESCRIPTOR));
-  return type.Get();
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetFileContentZeroFormatType() {
-  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(
-      type, ::RegisterClipboardFormat(CFSTR_FILECONTENTS), 0);
-  return type.Get();
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetIDListFormatType() {
-  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(
-      type, ::RegisterClipboardFormat(CFSTR_SHELLIDLIST));
-  return type.Get();
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetWebKitSmartPasteFormatType() {
-  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(
-      type,
-      ::RegisterClipboardFormat(L"WebKit Smart Paste Format"));
-  return type.Get();
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetWebCustomDataFormatType() {
-  // TODO(dcheng): This name is temporary. See http://crbug.com/106449.
-  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(
-      type,
-      ::RegisterClipboardFormat(L"Chromium Web Custom MIME Data Format"));
-  return type.Get();
-}
-
-// static
-const Clipboard::FormatType& Clipboard::GetPepperCustomDataFormatType() {
-  CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE(
-      type,
-      ::RegisterClipboardFormat(L"Chromium Pepper MIME Data Format"));
-  return type.Get();
-}
-#undef CR_STATIC_UI_CLIPBOARD_FORMAT_TYPE
-
 // Clipboard factory method.
 // static
 Clipboard* Clipboard::Create() {
@@ -437,7 +243,7 @@ uint64_t ClipboardWin::GetSequenceNumber(ClipboardType type) const {
   return ::GetClipboardSequenceNumber();
 }
 
-bool ClipboardWin::IsFormatAvailable(const Clipboard::FormatType& format,
+bool ClipboardWin::IsFormatAvailable(const ClipboardFormatType& format,
                                      ClipboardType type) const {
   DCHECK_EQ(type, CLIPBOARD_TYPE_COPY_PASTE);
   return ::IsClipboardFormatAvailable(format.ToFormatEtc().cfFormat) != FALSE;
@@ -462,11 +268,13 @@ void ClipboardWin::ReadAvailableTypes(ClipboardType type,
 
   types->clear();
   if (::IsClipboardFormatAvailable(
-          GetPlainTextFormatType().ToFormatEtc().cfFormat))
+          ClipboardFormatType::GetPlainTextType().ToFormatEtc().cfFormat))
     types->push_back(base::UTF8ToUTF16(kMimeTypeText));
-  if (::IsClipboardFormatAvailable(GetHtmlFormatType().ToFormatEtc().cfFormat))
+  if (::IsClipboardFormatAvailable(
+          ClipboardFormatType::GetHtmlType().ToFormatEtc().cfFormat))
     types->push_back(base::UTF8ToUTF16(kMimeTypeHTML));
-  if (::IsClipboardFormatAvailable(GetRtfFormatType().ToFormatEtc().cfFormat))
+  if (::IsClipboardFormatAvailable(
+          ClipboardFormatType::GetRtfType().ToFormatEtc().cfFormat))
     types->push_back(base::UTF8ToUTF16(kMimeTypeRTF));
   if (::IsClipboardFormatAvailable(CF_DIB))
     types->push_back(base::UTF8ToUTF16(kMimeTypePNG));
@@ -477,8 +285,8 @@ void ClipboardWin::ReadAvailableTypes(ClipboardType type,
   if (!clipboard.Acquire(GetClipboardWindow()))
     return;
 
-  HANDLE hdata =
-      ::GetClipboardData(GetWebCustomDataFormatType().ToFormatEtc().cfFormat);
+  HANDLE hdata = ::GetClipboardData(
+      ClipboardFormatType::GetWebCustomDataType().ToFormatEtc().cfFormat);
   if (!hdata)
     return;
 
@@ -555,7 +363,8 @@ void ClipboardWin::ReadHTML(ClipboardType type,
   if (!clipboard.Acquire(GetClipboardWindow()))
     return;
 
-  HANDLE data = ::GetClipboardData(GetHtmlFormatType().ToFormatEtc().cfFormat);
+  HANDLE data = ::GetClipboardData(
+      ClipboardFormatType::GetHtmlType().ToFormatEtc().cfFormat);
   if (!data)
     return;
 
@@ -594,7 +403,7 @@ void ClipboardWin::ReadHTML(ClipboardType type,
 void ClipboardWin::ReadRTF(ClipboardType type, std::string* result) const {
   DCHECK_EQ(type, CLIPBOARD_TYPE_COPY_PASTE);
 
-  ReadData(GetRtfFormatType(), result);
+  ReadData(ClipboardFormatType::GetRtfType(), result);
   TrimAfterNull(result);
 }
 
@@ -690,8 +499,8 @@ void ClipboardWin::ReadCustomData(ClipboardType clipboard_type,
   if (!clipboard.Acquire(GetClipboardWindow()))
     return;
 
-  HANDLE hdata =
-      ::GetClipboardData(GetWebCustomDataFormatType().ToFormatEtc().cfFormat);
+  HANDLE hdata = ::GetClipboardData(
+      ClipboardFormatType::GetWebCustomDataType().ToFormatEtc().cfFormat);
   if (!hdata)
     return;
 
@@ -711,7 +520,8 @@ void ClipboardWin::ReadBookmark(base::string16* title, std::string* url) const {
   if (!clipboard.Acquire(GetClipboardWindow()))
     return;
 
-  HANDLE data = ::GetClipboardData(GetUrlWFormatType().ToFormatEtc().cfFormat);
+  HANDLE data = ::GetClipboardData(
+      ClipboardFormatType::GetUrlWType().ToFormatEtc().cfFormat);
   if (!data)
     return;
 
@@ -723,7 +533,7 @@ void ClipboardWin::ReadBookmark(base::string16* title, std::string* url) const {
   ParseBookmarkClipboardFormat(bookmark, title, url);
 }
 
-void ClipboardWin::ReadData(const FormatType& format,
+void ClipboardWin::ReadData(const ClipboardFormatType& format,
                             std::string* result) const {
   if (!result) {
     NOTREACHED();
@@ -779,11 +589,12 @@ void ClipboardWin::WriteHTML(const char* markup_data,
   std::string html_fragment = ClipboardUtil::HtmlToCFHtml(markup, url);
   HGLOBAL glob = CreateGlobalData(html_fragment);
 
-  WriteToClipboard(Clipboard::GetHtmlFormatType().ToFormatEtc().cfFormat, glob);
+  WriteToClipboard(ClipboardFormatType::GetHtmlType().ToFormatEtc().cfFormat,
+                   glob);
 }
 
 void ClipboardWin::WriteRTF(const char* rtf_data, size_t data_len) {
-  WriteData(GetRtfFormatType(), rtf_data, data_len);
+  WriteData(ClipboardFormatType::GetRtfType(), rtf_data, data_len);
 }
 
 void ClipboardWin::WriteBookmark(const char* title_data,
@@ -797,13 +608,15 @@ void ClipboardWin::WriteBookmark(const char* title_data,
   base::string16 wide_bookmark = base::UTF8ToUTF16(bookmark);
   HGLOBAL glob = CreateGlobalData(wide_bookmark);
 
-  WriteToClipboard(GetUrlWFormatType().ToFormatEtc().cfFormat, glob);
+  WriteToClipboard(ClipboardFormatType::GetUrlWType().ToFormatEtc().cfFormat,
+                   glob);
 }
 
 void ClipboardWin::WriteWebSmartPaste() {
   DCHECK(clipboard_owner_->hwnd() != NULL);
-  ::SetClipboardData(GetWebKitSmartPasteFormatType().ToFormatEtc().cfFormat,
-                     NULL);
+  ::SetClipboardData(
+      ClipboardFormatType::GetWebKitSmartPasteType().ToFormatEtc().cfFormat,
+      NULL);
 }
 
 void ClipboardWin::WriteBitmap(const SkBitmap& in_bitmap) {
@@ -849,7 +662,7 @@ void ClipboardWin::WriteBitmap(const SkBitmap& in_bitmap) {
   ::ReleaseDC(NULL, dc);
 }
 
-void ClipboardWin::WriteData(const FormatType& format,
+void ClipboardWin::WriteData(const ClipboardFormatType& format,
                              const char* data_data,
                              size_t data_len) {
   HGLOBAL hdata = ::GlobalAlloc(GMEM_MOVEABLE, data_len);
diff --git a/ui/base/clipboard/clipboard_win.h b/ui/base/clipboard/clipboard_win.h
index 54e34d7f5ce8..68e3ce81e13f 100644
--- a/ui/base/clipboard/clipboard_win.h
+++ b/ui/base/clipboard/clipboard_win.h
@@ -35,7 +35,7 @@ class ClipboardWin : public Clipboard {
   // Clipboard overrides:
   void OnPreShutdown() override;
   uint64_t GetSequenceNumber(ClipboardType type) const override;
-  bool IsFormatAvailable(const FormatType& format,
+  bool IsFormatAvailable(const ClipboardFormatType& format,
                          ClipboardType type) const override;
   void Clear(ClipboardType type) override;
   void ReadAvailableTypes(ClipboardType type,
@@ -54,7 +54,8 @@ class ClipboardWin : public Clipboard {
                       const base::string16& type,
                       base::string16* result) const override;
   void ReadBookmark(base::string16* title, std::string* url) const override;
-  void ReadData(const FormatType& format, std::string* result) const override;
+  void ReadData(const ClipboardFormatType& format,
+                std::string* result) const override;
   void WriteObjects(ClipboardType type, const ObjectMap& objects) override;
   void WriteText(const char* text_data, size_t text_len) override;
   void WriteHTML(const char* markup_data,
@@ -68,7 +69,7 @@ class ClipboardWin : public Clipboard {
                      size_t url_len) override;
   void WriteWebSmartPaste() override;
   void WriteBitmap(const SkBitmap& bitmap) override;
-  void WriteData(const FormatType& format,
+  void WriteData(const ClipboardFormatType& format,
                  const char* data_data,
                  size_t data_len) override;
 
diff --git a/ui/base/clipboard/custom_data_helper.h b/ui/base/clipboard/custom_data_helper.h
index 6da8234aaa31..7d980f0a8c52 100644
--- a/ui/base/clipboard/custom_data_helper.h
+++ b/ui/base/clipboard/custom_data_helper.h
@@ -15,46 +15,39 @@
 #include <unordered_map>
 #include <vector>
 
+#include "base/component_export.h"
 #include "base/containers/flat_map.h"
 #include "base/strings/string16.h"
 #include "build/build_config.h"
-#include "ui/base/ui_base_export.h"
 
 namespace base {
 class Pickle;
 }
 
-#if defined(OS_MACOSX)
-#ifdef __OBJC__
-@class NSString;
-#else
-class NSString;
-#endif
-#endif  // defined(OS_MACOSX)
-
 namespace ui {
 
-#if defined(OS_MACOSX) && !defined(USE_AURA)
-UI_BASE_EXPORT extern NSString* const kWebCustomDataPboardType;
-#endif
-
-UI_BASE_EXPORT void ReadCustomDataTypes(const void* data,
-                                        size_t data_length,
-                                        std::vector<base::string16>* types);
-UI_BASE_EXPORT void ReadCustomDataForType(const void* data,
-                                          size_t data_length,
-                                          const base::string16& type,
-                                          base::string16* result);
-UI_BASE_EXPORT void ReadCustomDataIntoMap(
+COMPONENT_EXPORT(BASE_CLIPBOARD)
+void ReadCustomDataTypes(const void* data,
+                         size_t data_length,
+                         std::vector<base::string16>* types);
+COMPONENT_EXPORT(BASE_CLIPBOARD)
+void ReadCustomDataForType(const void* data,
+                           size_t data_length,
+                           const base::string16& type,
+                           base::string16* result);
+COMPONENT_EXPORT(BASE_CLIPBOARD)
+void ReadCustomDataIntoMap(
     const void* data,
     size_t data_length,
     std::unordered_map<base::string16, base::string16>* result);
 
-UI_BASE_EXPORT void WriteCustomDataToPickle(
+COMPONENT_EXPORT(BASE_CLIPBOARD)
+void WriteCustomDataToPickle(
     const std::unordered_map<base::string16, base::string16>& data,
     base::Pickle* pickle);
 
-UI_BASE_EXPORT void WriteCustomDataToPickle(
+COMPONENT_EXPORT(BASE_CLIPBOARD)
+void WriteCustomDataToPickle(
     const base::flat_map<base::string16, base::string16>& data,
     base::Pickle* pickle);
 
diff --git a/ui/base/clipboard/scoped_clipboard_writer.cc b/ui/base/clipboard/scoped_clipboard_writer.cc
index 12680a66d17c..8baaaa728ef7 100644
--- a/ui/base/clipboard/scoped_clipboard_writer.cc
+++ b/ui/base/clipboard/scoped_clipboard_writer.cc
@@ -11,6 +11,7 @@
 #include "base/pickle.h"
 #include "base/strings/utf_string_conversions.h"
 #include "net/base/escape.h"
+#include "ui/base/clipboard/clipboard_format_type.h"
 #include "ui/gfx/geometry/size.h"
 
 namespace ui {
@@ -105,7 +106,7 @@ void ScopedClipboardWriter::WriteImage(const SkBitmap& bitmap) {
 
 void ScopedClipboardWriter::WritePickledData(
     const base::Pickle& pickle,
-    const Clipboard::FormatType& format) {
+    const ClipboardFormatType& format) {
   std::string format_string = format.Serialize();
   Clipboard::ObjectMapParam format_parameter(format_string.begin(),
                                              format_string.end());
diff --git a/ui/base/clipboard/scoped_clipboard_writer.h b/ui/base/clipboard/scoped_clipboard_writer.h
index 385900eb67de..084d5fe141f7 100644
--- a/ui/base/clipboard/scoped_clipboard_writer.h
+++ b/ui/base/clipboard/scoped_clipboard_writer.h
@@ -13,11 +13,11 @@
 
 #include <string>
 
+#include "base/component_export.h"
 #include "base/macros.h"
 #include "base/strings/string16.h"
 #include "third_party/skia/include/core/SkBitmap.h"
 #include "ui/base/clipboard/clipboard.h"
-#include "ui/base/ui_base_export.h"
 
 namespace base {
 class Pickle;
@@ -27,7 +27,7 @@ namespace ui {
 
 // This class is a wrapper for |Clipboard| that handles packing data
 // into a Clipboard::ObjectMap.
-class UI_BASE_EXPORT ScopedClipboardWriter {
+class COMPONENT_EXPORT(BASE_CLIPBOARD) ScopedClipboardWriter {
  public:
   // Create an instance that is a simple wrapper around the clipboard of the
   // given type.
@@ -59,7 +59,7 @@ class UI_BASE_EXPORT ScopedClipboardWriter {
 
   // Adds arbitrary pickled data to clipboard.
   void WritePickledData(const base::Pickle& pickle,
-                        const Clipboard::FormatType& format);
+                        const ClipboardFormatType& format);
 
   // Adds custom data to clipboard.
   void WriteData(const std::string& type, const std::string& data);
diff --git a/ui/base/test/test_clipboard.cc b/ui/base/clipboard/test/test_clipboard.cc
similarity index 79%
rename from ui/base/test/test_clipboard.cc
rename to ui/base/clipboard/test/test_clipboard.cc
index eaf9d06697e1..09c74bb49eb9 100644
--- a/ui/base/test/test_clipboard.cc
+++ b/ui/base/clipboard/test/test_clipboard.cc
@@ -2,23 +2,22 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#include "ui/base/test/test_clipboard.h"
+#include "ui/base/clipboard/test/test_clipboard.h"
 
 #include <stddef.h>
 #include "base/memory/ptr_util.h"
 #include "base/numerics/safe_conversions.h"
 #include "base/strings/utf_string_conversions.h"
 #include "skia/ext/skia_utils_base.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 #include "ui/base/clipboard/clipboard_monitor.h"
 
 namespace ui {
 
 TestClipboard::TestClipboard()
-    : default_store_type_(CLIPBOARD_TYPE_COPY_PASTE) {
-}
+    : default_store_type_(CLIPBOARD_TYPE_COPY_PASTE) {}
 
-TestClipboard::~TestClipboard() {
-}
+TestClipboard::~TestClipboard() {}
 
 Clipboard* TestClipboard::CreateForCurrentThread() {
   base::AutoLock lock(Clipboard::clipboard_map_lock_.Get());
@@ -38,7 +37,7 @@ uint64_t TestClipboard::GetSequenceNumber(ClipboardType type) const {
   return GetStore(type).sequence_number;
 }
 
-bool TestClipboard::IsFormatAvailable(const FormatType& format,
+bool TestClipboard::IsFormatAvailable(const ClipboardFormatType& format,
                                       ClipboardType type) const {
   const DataStore& store = GetStore(type);
   return store.data.find(format) != store.data.end();
@@ -53,14 +52,14 @@ void TestClipboard::ReadAvailableTypes(ClipboardType type,
                                        bool* contains_filenames) const {
   types->clear();
 
-  if (IsFormatAvailable(Clipboard::GetPlainTextFormatType(), type))
+  if (IsFormatAvailable(ClipboardFormatType::GetPlainTextType(), type))
     types->push_back(base::UTF8ToUTF16(kMimeTypeText));
-  if (IsFormatAvailable(Clipboard::GetHtmlFormatType(), type))
+  if (IsFormatAvailable(ClipboardFormatType::GetHtmlType(), type))
     types->push_back(base::UTF8ToUTF16(kMimeTypeHTML));
 
-  if (IsFormatAvailable(Clipboard::GetRtfFormatType(), type))
+  if (IsFormatAvailable(ClipboardFormatType::GetRtfType(), type))
     types->push_back(base::UTF8ToUTF16(kMimeTypeRTF));
-  if (IsFormatAvailable(Clipboard::GetBitmapFormatType(), type))
+  if (IsFormatAvailable(ClipboardFormatType::GetBitmapType(), type))
     types->push_back(base::UTF8ToUTF16(kMimeTypePNG));
 
   *contains_filenames = false;
@@ -76,7 +75,7 @@ void TestClipboard::ReadAsciiText(ClipboardType type,
                                   std::string* result) const {
   result->clear();
   const DataStore& store = GetStore(type);
-  auto it = store.data.find(GetPlainTextFormatType());
+  auto it = store.data.find(ClipboardFormatType::GetPlainTextType());
   if (it != store.data.end())
     *result = it->second;
 }
@@ -89,7 +88,7 @@ void TestClipboard::ReadHTML(ClipboardType type,
   markup->clear();
   src_url->clear();
   const DataStore& store = GetStore(type);
-  auto it = store.data.find(GetHtmlFormatType());
+  auto it = store.data.find(ClipboardFormatType::GetHtmlType());
   if (it != store.data.end())
     *markup = base::UTF8ToUTF16(it->second);
   *src_url = store.html_src_url;
@@ -100,7 +99,7 @@ void TestClipboard::ReadHTML(ClipboardType type,
 void TestClipboard::ReadRTF(ClipboardType type, std::string* result) const {
   result->clear();
   const DataStore& store = GetStore(type);
-  auto it = store.data.find(GetRtfFormatType());
+  auto it = store.data.find(ClipboardFormatType::GetRtfType());
   if (it != store.data.end())
     *result = it->second;
 }
@@ -111,19 +110,18 @@ SkBitmap TestClipboard::ReadImage(ClipboardType type) const {
 
 void TestClipboard::ReadCustomData(ClipboardType clipboard_type,
                                    const base::string16& type,
-                                   base::string16* result) const {
-}
+                                   base::string16* result) const {}
 
 void TestClipboard::ReadBookmark(base::string16* title,
                                  std::string* url) const {
   const DataStore& store = GetDefaultStore();
-  auto it = store.data.find(GetUrlWFormatType());
+  auto it = store.data.find(ClipboardFormatType::GetUrlWType());
   if (it != store.data.end())
     *url = it->second;
   *title = base::UTF8ToUTF16(store.url_title);
 }
 
-void TestClipboard::ReadData(const FormatType& format,
+void TestClipboard::ReadData(const ClipboardFormatType& format,
                              std::string* result) const {
   result->clear();
   const DataStore& store = GetDefaultStore();
@@ -150,11 +148,12 @@ void TestClipboard::WriteObjects(ClipboardType type, const ObjectMap& objects) {
 
 void TestClipboard::WriteText(const char* text_data, size_t text_len) {
   std::string text(text_data, text_len);
-  GetDefaultStore().data[GetPlainTextFormatType()] = text;
+  GetDefaultStore().data[ClipboardFormatType::GetPlainTextType()] = text;
   // Create a dummy entry.
-  GetDefaultStore().data[GetPlainTextWFormatType()];
+  GetDefaultStore().data[ClipboardFormatType::GetPlainTextWType()];
   if (IsSupportedClipboardType(CLIPBOARD_TYPE_SELECTION))
-    GetStore(CLIPBOARD_TYPE_SELECTION).data[GetPlainTextFormatType()] = text;
+    GetStore(CLIPBOARD_TYPE_SELECTION)
+        .data[ClipboardFormatType::GetPlainTextType()] = text;
   ui::ClipboardMonitor::GetInstance()->NotifyClipboardDataChanged();
 }
 
@@ -164,31 +163,33 @@ void TestClipboard::WriteHTML(const char* markup_data,
                               size_t url_len) {
   base::string16 markup;
   base::UTF8ToUTF16(markup_data, markup_len, &markup);
-  GetDefaultStore().data[GetHtmlFormatType()] = base::UTF16ToUTF8(markup);
+  GetDefaultStore().data[ClipboardFormatType::GetHtmlType()] =
+      base::UTF16ToUTF8(markup);
   GetDefaultStore().html_src_url = std::string(url_data, url_len);
 }
 
 void TestClipboard::WriteRTF(const char* rtf_data, size_t data_len) {
-  GetDefaultStore().data[GetRtfFormatType()] = std::string(rtf_data, data_len);
+  GetDefaultStore().data[ClipboardFormatType::GetRtfType()] =
+      std::string(rtf_data, data_len);
 }
 
 void TestClipboard::WriteBookmark(const char* title_data,
                                   size_t title_len,
                                   const char* url_data,
                                   size_t url_len) {
-  GetDefaultStore().data[GetUrlWFormatType()] = std::string(url_data, url_len);
+  GetDefaultStore().data[ClipboardFormatType::GetUrlWType()] =
+      std::string(url_data, url_len);
   GetDefaultStore().url_title = std::string(title_data, title_len);
 }
 
 void TestClipboard::WriteWebSmartPaste() {
   // Create a dummy entry.
-  GetDefaultStore().data[GetWebKitSmartPasteFormatType()];
+  GetDefaultStore().data[ClipboardFormatType::GetWebKitSmartPasteType()];
 }
 
 void TestClipboard::WriteBitmap(const SkBitmap& bitmap) {
   // Create a dummy entry.
-  GetDefaultStore().data[GetBitmapFormatType()];
-
+  GetDefaultStore().data[ClipboardFormatType::GetBitmapType()];
   SkBitmap& dst = GetDefaultStore().image;
   // Either points bitmap at in_bitmap, or allocates and converts pixels.
   if (!skia::SkBitmapToN32OpaqueOrPremul(bitmap, &dst)) {
@@ -197,19 +198,17 @@ void TestClipboard::WriteBitmap(const SkBitmap& bitmap) {
   }
 }
 
-void TestClipboard::WriteData(const FormatType& format,
+void TestClipboard::WriteData(const ClipboardFormatType& format,
                               const char* data_data,
                               size_t data_len) {
   GetDefaultStore().data[format] = std::string(data_data, data_len);
 }
 
-TestClipboard::DataStore::DataStore() : sequence_number(0) {
-}
+TestClipboard::DataStore::DataStore() : sequence_number(0) {}
 
 TestClipboard::DataStore::DataStore(const DataStore& other) = default;
 
-TestClipboard::DataStore::~DataStore() {
-}
+TestClipboard::DataStore::~DataStore() {}
 
 void TestClipboard::DataStore::Clear() {
   data.clear();
diff --git a/ui/base/test/test_clipboard.h b/ui/base/clipboard/test/test_clipboard.h
similarity index 89%
rename from ui/base/test/test_clipboard.h
rename to ui/base/clipboard/test/test_clipboard.h
index ae1c3cbbc833..9da9ac95fa02 100644
--- a/ui/base/test/test_clipboard.h
+++ b/ui/base/clipboard/test/test_clipboard.h
@@ -2,8 +2,8 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#ifndef UI_BASE_TEST_TEST_CLIPBOARD_H_
-#define UI_BASE_TEST_TEST_CLIPBOARD_H_
+#ifndef UI_BASE_CLIPBOARD_TEST_TEST_CLIPBOARD_H_
+#define UI_BASE_CLIPBOARD_TEST_TEST_CLIPBOARD_H_
 
 #include <stddef.h>
 #include <stdint.h>
@@ -34,7 +34,7 @@ class TestClipboard : public Clipboard {
   // Clipboard overrides.
   void OnPreShutdown() override;
   uint64_t GetSequenceNumber(ClipboardType type) const override;
-  bool IsFormatAvailable(const FormatType& format,
+  bool IsFormatAvailable(const ClipboardFormatType& format,
                          ClipboardType type) const override;
   void Clear(ClipboardType type) override;
   void ReadAvailableTypes(ClipboardType type,
@@ -53,7 +53,8 @@ class TestClipboard : public Clipboard {
                       const base::string16& type,
                       base::string16* result) const override;
   void ReadBookmark(base::string16* title, std::string* url) const override;
-  void ReadData(const FormatType& format, std::string* result) const override;
+  void ReadData(const ClipboardFormatType& format,
+                std::string* result) const override;
   base::Time GetLastModifiedTime() const override;
   void ClearLastModifiedTime() override;
   void WriteObjects(ClipboardType type, const ObjectMap& objects) override;
@@ -69,7 +70,7 @@ class TestClipboard : public Clipboard {
                      size_t url_len) override;
   void WriteWebSmartPaste() override;
   void WriteBitmap(const SkBitmap& bitmap) override;
-  void WriteData(const FormatType& format,
+  void WriteData(const ClipboardFormatType& format,
                  const char* data_data,
                  size_t data_len) override;
 
@@ -80,7 +81,7 @@ class TestClipboard : public Clipboard {
     ~DataStore();
     void Clear();
     uint64_t sequence_number;
-    base::flat_map<FormatType, std::string> data;
+    base::flat_map<ClipboardFormatType, std::string> data;
     std::string url_title;
     std::string html_src_url;
     SkBitmap image;
@@ -101,4 +102,4 @@ class TestClipboard : public Clipboard {
 
 }  // namespace ui
 
-#endif  // UI_BASE_TEST_TEST_CLIPBOARD_H_
+#endif  // UI_BASE_CLIPBOARD_TEST_TEST_CLIPBOARD_H_
diff --git a/ui/base/test/test_clipboard_unittest.cc b/ui/base/clipboard/test/test_clipboard_unittest.cc
similarity index 94%
rename from ui/base/test/test_clipboard_unittest.cc
rename to ui/base/clipboard/test/test_clipboard_unittest.cc
index 09019693b29c..9bd22ee4e7ad 100644
--- a/ui/base/test/test_clipboard_unittest.cc
+++ b/ui/base/clipboard/test/test_clipboard_unittest.cc
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#include "ui/base/test/test_clipboard.h"
+#include "ui/base/clipboard/test/test_clipboard.h"
 
 #include "testing/gtest/include/gtest/gtest.h"
 
diff --git a/ui/base/dragdrop/os_exchange_data.cc b/ui/base/dragdrop/os_exchange_data.cc
index bae9df1a8bba..11cf7dbe66da 100644
--- a/ui/base/dragdrop/os_exchange_data.cc
+++ b/ui/base/dragdrop/os_exchange_data.cc
@@ -6,6 +6,7 @@
 
 #include "base/pickle.h"
 #include "build/build_config.h"
+#include "ui/base/clipboard/clipboard_format_type.h"
 #include "ui/base/dragdrop/os_exchange_data_provider_factory.h"
 #include "url/gurl.h"
 
@@ -56,7 +57,7 @@ void OSExchangeData::SetFilenames(
   provider_->SetFilenames(filenames);
 }
 
-void OSExchangeData::SetPickledData(const Clipboard::FormatType& format,
+void OSExchangeData::SetPickledData(const ClipboardFormatType& format,
                                     const base::Pickle& data) {
   provider_->SetPickledData(format, data);
 }
@@ -79,7 +80,7 @@ bool OSExchangeData::GetFilenames(std::vector<FileInfo>* filenames) const {
   return provider_->GetFilenames(filenames);
 }
 
-bool OSExchangeData::GetPickledData(const Clipboard::FormatType& format,
+bool OSExchangeData::GetPickledData(const ClipboardFormatType& format,
                                     base::Pickle* data) const {
   return provider_->GetPickledData(format, data);
 }
@@ -96,14 +97,13 @@ bool OSExchangeData::HasFile() const {
   return provider_->HasFile();
 }
 
-bool OSExchangeData::HasCustomFormat(
-    const Clipboard::FormatType& format) const {
+bool OSExchangeData::HasCustomFormat(const ClipboardFormatType& format) const {
   return provider_->HasCustomFormat(format);
 }
 
 bool OSExchangeData::HasAnyFormat(
     int formats,
-    const std::set<Clipboard::FormatType>& format_types) const {
+    const std::set<ClipboardFormatType>& format_types) const {
   if ((formats & STRING) != 0 && HasString())
     return true;
   if ((formats & URL) != 0 && HasURL(CONVERT_FILENAMES))
diff --git a/ui/base/dragdrop/os_exchange_data.h b/ui/base/dragdrop/os_exchange_data.h
index 3bb6feffc1ba..cd915154ea10 100644
--- a/ui/base/dragdrop/os_exchange_data.h
+++ b/ui/base/dragdrop/os_exchange_data.h
@@ -17,7 +17,6 @@
 
 #include "base/files/file_path.h"
 #include "base/macros.h"
-#include "ui/base/clipboard/clipboard.h"
 #include "ui/base/dragdrop/download_file_interface.h"
 #include "ui/base/ui_base_export.h"
 
@@ -34,6 +33,7 @@ class Vector2d;
 
 namespace ui {
 
+struct ClipboardFormatType;
 struct FileInfo;
 
 ///////////////////////////////////////////////////////////////////////////////
@@ -96,7 +96,7 @@ class UI_BASE_EXPORT OSExchangeData {
     virtual void SetURL(const GURL& url, const base::string16& title) = 0;
     virtual void SetFilename(const base::FilePath& path) = 0;
     virtual void SetFilenames(const std::vector<FileInfo>& file_names) = 0;
-    virtual void SetPickledData(const Clipboard::FormatType& format,
+    virtual void SetPickledData(const ClipboardFormatType& format,
                                 const base::Pickle& data) = 0;
 
     virtual bool GetString(base::string16* data) const = 0;
@@ -105,13 +105,13 @@ class UI_BASE_EXPORT OSExchangeData {
                                 base::string16* title) const = 0;
     virtual bool GetFilename(base::FilePath* path) const = 0;
     virtual bool GetFilenames(std::vector<FileInfo>* file_names) const = 0;
-    virtual bool GetPickledData(const Clipboard::FormatType& format,
+    virtual bool GetPickledData(const ClipboardFormatType& format,
                                 base::Pickle* data) const = 0;
 
     virtual bool HasString() const = 0;
     virtual bool HasURL(FilenameToURLPolicy policy) const = 0;
     virtual bool HasFile() const = 0;
-    virtual bool HasCustomFormat(const Clipboard::FormatType& format) const = 0;
+    virtual bool HasCustomFormat(const ClipboardFormatType& format) const = 0;
 
 #if defined(USE_X11) || defined(OS_WIN)
     virtual void SetFileContents(const base::FilePath& filename,
@@ -174,7 +174,7 @@ class UI_BASE_EXPORT OSExchangeData {
   void SetFilenames(
       const std::vector<FileInfo>& file_names);
   // Adds pickled data of the specified format.
-  void SetPickledData(const Clipboard::FormatType& format,
+  void SetPickledData(const ClipboardFormatType& format,
                       const base::Pickle& data);
 
   // These functions retrieve data of the specified type. If data exists, the
@@ -190,7 +190,7 @@ class UI_BASE_EXPORT OSExchangeData {
   // Return the path of a file, if available.
   bool GetFilename(base::FilePath* path) const;
   bool GetFilenames(std::vector<FileInfo>* file_names) const;
-  bool GetPickledData(const Clipboard::FormatType& format,
+  bool GetPickledData(const ClipboardFormatType& format,
                       base::Pickle* data) const;
 
   // Test whether or not data of certain types is present, without actually
@@ -198,12 +198,12 @@ class UI_BASE_EXPORT OSExchangeData {
   bool HasString() const;
   bool HasURL(FilenameToURLPolicy policy) const;
   bool HasFile() const;
-  bool HasCustomFormat(const Clipboard::FormatType& format) const;
+  bool HasCustomFormat(const ClipboardFormatType& format) const;
 
   // Returns true if this OSExchangeData has data in any of the formats in
   // |formats| or any custom format in |custom_formats|.
   bool HasAnyFormat(int formats,
-                    const std::set<Clipboard::FormatType>& types) const;
+                    const std::set<ClipboardFormatType>& types) const;
 
 #if defined(OS_WIN)
   // Adds the bytes of a file (CFSTR_FILECONTENTS and CFSTR_FILEDESCRIPTOR on
diff --git a/ui/base/dragdrop/os_exchange_data_provider_aura.cc b/ui/base/dragdrop/os_exchange_data_provider_aura.cc
index 200d0c88ce32..40dbe89567b3 100644
--- a/ui/base/dragdrop/os_exchange_data_provider_aura.cc
+++ b/ui/base/dragdrop/os_exchange_data_provider_aura.cc
@@ -8,8 +8,7 @@
 #include "base/memory/ptr_util.h"
 #include "base/strings/utf_string_conversions.h"
 #include "net/base/filename_util.h"
-#include "ui/base/clipboard/clipboard.h"
-#include "ui/base/clipboard/scoped_clipboard_writer.h"
+#include "ui/base/clipboard/clipboard_format_type.h"
 #include "ui/base/dragdrop/file_info.h"
 
 namespace ui {
@@ -75,7 +74,7 @@ void OSExchangeDataProviderAura::SetFilenames(
 }
 
 void OSExchangeDataProviderAura::SetPickledData(
-    const Clipboard::FormatType& format,
+    const ClipboardFormatType& format,
     const base::Pickle& data) {
   pickle_data_[format] = data;
   formats_ |= OSExchangeData::PICKLED_DATA;
@@ -123,7 +122,7 @@ bool OSExchangeDataProviderAura::GetFilenames(
 }
 
 bool OSExchangeDataProviderAura::GetPickledData(
-    const Clipboard::FormatType& format,
+    const ClipboardFormatType& format,
     base::Pickle* data) const {
   PickleData::const_iterator i = pickle_data_.find(format);
   if (i == pickle_data_.end())
@@ -152,7 +151,7 @@ bool OSExchangeDataProviderAura::HasFile() const {
 }
 
 bool OSExchangeDataProviderAura::HasCustomFormat(
-    const Clipboard::FormatType& format) const {
+    const ClipboardFormatType& format) const {
   return pickle_data_.find(format) != pickle_data_.end();
 }
 
diff --git a/ui/base/dragdrop/os_exchange_data_provider_aura.h b/ui/base/dragdrop/os_exchange_data_provider_aura.h
index fe752434082c..2b7cd149bfcb 100644
--- a/ui/base/dragdrop/os_exchange_data_provider_aura.h
+++ b/ui/base/dragdrop/os_exchange_data_provider_aura.h
@@ -17,7 +17,7 @@
 
 namespace ui {
 
-class Clipboard;
+struct ClipboardFormatType;
 
 // OSExchangeData::Provider implementation for aura on linux.
 class UI_BASE_EXPORT OSExchangeDataProviderAura
@@ -34,7 +34,7 @@ class UI_BASE_EXPORT OSExchangeDataProviderAura
   void SetURL(const GURL& url, const base::string16& title) override;
   void SetFilename(const base::FilePath& path) override;
   void SetFilenames(const std::vector<FileInfo>& filenames) override;
-  void SetPickledData(const Clipboard::FormatType& format,
+  void SetPickledData(const ClipboardFormatType& format,
                       const base::Pickle& data) override;
   bool GetString(base::string16* data) const override;
   bool GetURLAndTitle(OSExchangeData::FilenameToURLPolicy policy,
@@ -42,13 +42,12 @@ class UI_BASE_EXPORT OSExchangeDataProviderAura
                       base::string16* title) const override;
   bool GetFilename(base::FilePath* path) const override;
   bool GetFilenames(std::vector<FileInfo>* filenames) const override;
-  bool GetPickledData(const Clipboard::FormatType& format,
+  bool GetPickledData(const ClipboardFormatType& format,
                       base::Pickle* data) const override;
   bool HasString() const override;
   bool HasURL(OSExchangeData::FilenameToURLPolicy policy) const override;
   bool HasFile() const override;
-  bool HasCustomFormat(const Clipboard::FormatType& format) const
-      override;
+  bool HasCustomFormat(const ClipboardFormatType& format) const override;
 
   void SetHtml(const base::string16& html, const GURL& base_url) override;
   bool GetHtml(base::string16* html, GURL* base_url) const override;
@@ -59,7 +58,7 @@ class UI_BASE_EXPORT OSExchangeDataProviderAura
   gfx::Vector2d GetDragImageOffset() const override;
 
  private:
-  typedef std::map<Clipboard::FormatType, base::Pickle> PickleData;
+  typedef std::map<ClipboardFormatType, base::Pickle> PickleData;
 
   // Returns true if |formats_| contains a file format and the file name can be
   // parsed as a URL.
diff --git a/ui/base/dragdrop/os_exchange_data_provider_aurax11.cc b/ui/base/dragdrop/os_exchange_data_provider_aurax11.cc
index 144c8babf500..c92301055164 100644
--- a/ui/base/dragdrop/os_exchange_data_provider_aurax11.cc
+++ b/ui/base/dragdrop/os_exchange_data_provider_aurax11.cc
@@ -12,8 +12,8 @@
 #include "base/strings/string_util.h"
 #include "base/strings/utf_string_conversions.h"
 #include "net/base/filename_util.h"
-#include "ui/base/clipboard/clipboard.h"
-#include "ui/base/clipboard/scoped_clipboard_writer.h"
+#include "ui/base/clipboard/clipboard_constants.h"
+#include "ui/base/clipboard/clipboard_format_type.h"
 #include "ui/base/dragdrop/file_info.h"
 #include "ui/base/x/selection_utils.h"
 #include "ui/events/platform/platform_event_source.h"
@@ -117,7 +117,7 @@ void OSExchangeDataProviderAuraX11::SetString(const base::string16& text_data) {
   scoped_refptr<base::RefCountedMemory> mem(
       base::RefCountedString::TakeString(&utf8));
 
-  format_map_.Insert(gfx::GetAtom(Clipboard::kMimeTypeText), mem);
+  format_map_.Insert(gfx::GetAtom(kMimeTypeText), mem);
   format_map_.Insert(gfx::GetAtom(kText), mem);
   format_map_.Insert(gfx::GetAtom(kString), mem);
   format_map_.Insert(gfx::GetAtom(kUtf8String), mem);
@@ -138,7 +138,7 @@ void OSExchangeDataProviderAuraX11::SetURL(const GURL& url,
     scoped_refptr<base::RefCountedMemory> mem(
         base::RefCountedBytes::TakeVector(&data));
 
-    format_map_.Insert(gfx::GetAtom(Clipboard::kMimeTypeMozillaURL), mem);
+    format_map_.Insert(gfx::GetAtom(kMimeTypeMozillaURL), mem);
 
     // Set a string fallback as well.
     SetString(spec);
@@ -182,11 +182,11 @@ void OSExchangeDataProviderAuraX11::SetFilenames(
   std::string joined_data = base::JoinString(paths, "\n");
   scoped_refptr<base::RefCountedMemory> mem(
       base::RefCountedString::TakeString(&joined_data));
-  format_map_.Insert(gfx::GetAtom(Clipboard::kMimeTypeURIList), mem);
+  format_map_.Insert(gfx::GetAtom(kMimeTypeURIList), mem);
 }
 
 void OSExchangeDataProviderAuraX11::SetPickledData(
-    const Clipboard::FormatType& format,
+    const ClipboardFormatType& format,
     const base::Pickle& pickle) {
   const unsigned char* data =
       reinterpret_cast<const unsigned char*>(pickle.data());
@@ -235,7 +235,7 @@ bool OSExchangeDataProviderAuraX11::GetURLAndTitle(
     // but that doesn't match the assumptions of the rest of the system which
     // expect single types.
 
-    if (data.GetType() == gfx::GetAtom(Clipboard::kMimeTypeMozillaURL)) {
+    if (data.GetType() == gfx::GetAtom(kMimeTypeMozillaURL)) {
       // Mozilla URLs are (UTF16: URL, newline, title).
       base::string16 unparsed;
       data.AssignTo(&unparsed);
@@ -252,7 +252,7 @@ bool OSExchangeDataProviderAuraX11::GetURLAndTitle(
         *url = GURL(tokens[0]);
         return true;
       }
-    } else if (data.GetType() == gfx::GetAtom(Clipboard::kMimeTypeURIList)) {
+    } else if (data.GetType() == gfx::GetAtom(kMimeTypeURIList)) {
       std::vector<std::string> tokens = ui::ParseURIList(data);
       for (const std::string& token : tokens) {
         GURL test_url(token);
@@ -302,7 +302,7 @@ bool OSExchangeDataProviderAuraX11::GetFilenames(
 }
 
 bool OSExchangeDataProviderAuraX11::GetPickledData(
-    const Clipboard::FormatType& format,
+    const ClipboardFormatType& format,
     base::Pickle* pickle) const {
   std::vector< ::Atom> requested_types;
   requested_types.push_back(gfx::GetAtom(format.ToString().c_str()));
@@ -339,11 +339,10 @@ bool OSExchangeDataProviderAuraX11::HasURL(
   // Windows does and stuffs all the data into one mime type.
   ui::SelectionData data(format_map_.GetFirstOf(requested_types));
   if (data.IsValid()) {
-    if (data.GetType() == gfx::GetAtom(Clipboard::kMimeTypeMozillaURL)) {
+    if (data.GetType() == gfx::GetAtom(kMimeTypeMozillaURL)) {
       // File managers shouldn't be using this type, so this is a URL.
       return true;
-    } else if (data.GetType() ==
-               gfx::GetAtom(ui::Clipboard::kMimeTypeURIList)) {
+    } else if (data.GetType() == gfx::GetAtom(ui::kMimeTypeURIList)) {
       std::vector<std::string> tokens = ui::ParseURIList(data);
       for (const std::string& token : tokens) {
         if (!GURL(token).SchemeIsFile() ||
@@ -384,7 +383,7 @@ bool OSExchangeDataProviderAuraX11::HasFile() const {
 }
 
 bool OSExchangeDataProviderAuraX11::HasCustomFormat(
-    const Clipboard::FormatType& format) const {
+    const ClipboardFormatType& format) const {
   std::vector< ::Atom> url_atoms;
   url_atoms.push_back(gfx::GetAtom(format.ToString().c_str()));
   std::vector< ::Atom> requested_types;
@@ -398,7 +397,7 @@ void OSExchangeDataProviderAuraX11::SetFileContents(
     const std::string& file_contents) {
   DCHECK(!filename.empty());
   DCHECK(format_map_.end() ==
-         format_map_.find(gfx::GetAtom(Clipboard::kMimeTypeMozillaURL)));
+         format_map_.find(gfx::GetAtom(kMimeTypeMozillaURL)));
 
   file_contents_name_ = filename;
 
@@ -439,13 +438,13 @@ void OSExchangeDataProviderAuraX11::SetHtml(const base::string16& html,
   scoped_refptr<base::RefCountedMemory> mem(
       base::RefCountedBytes::TakeVector(&bytes));
 
-  format_map_.Insert(gfx::GetAtom(Clipboard::kMimeTypeHTML), mem);
+  format_map_.Insert(gfx::GetAtom(kMimeTypeHTML), mem);
 }
 
 bool OSExchangeDataProviderAuraX11::GetHtml(base::string16* html,
                                             GURL* base_url) const {
   std::vector< ::Atom> url_atoms;
-  url_atoms.push_back(gfx::GetAtom(Clipboard::kMimeTypeHTML));
+  url_atoms.push_back(gfx::GetAtom(kMimeTypeHTML));
   std::vector< ::Atom> requested_types;
   GetAtomIntersection(url_atoms, GetTargets(), &requested_types);
 
@@ -461,7 +460,7 @@ bool OSExchangeDataProviderAuraX11::GetHtml(base::string16* html,
 
 bool OSExchangeDataProviderAuraX11::HasHtml() const {
   std::vector< ::Atom> url_atoms;
-  url_atoms.push_back(gfx::GetAtom(Clipboard::kMimeTypeHTML));
+  url_atoms.push_back(gfx::GetAtom(kMimeTypeHTML));
   std::vector< ::Atom> requested_types;
   GetAtomIntersection(url_atoms, GetTargets(), &requested_types);
 
diff --git a/ui/base/dragdrop/os_exchange_data_provider_aurax11.h b/ui/base/dragdrop/os_exchange_data_provider_aurax11.h
index f8e60b31ac61..b1106d929b34 100644
--- a/ui/base/dragdrop/os_exchange_data_provider_aurax11.h
+++ b/ui/base/dragdrop/os_exchange_data_provider_aurax11.h
@@ -23,7 +23,6 @@
 
 namespace ui {
 
-class Clipboard;
 class OSExchangeDataProviderAuraX11Test;
 
 // OSExchangeData::Provider implementation for aura on linux.
@@ -65,7 +64,7 @@ class UI_BASE_EXPORT OSExchangeDataProviderAuraX11
   void SetURL(const GURL& url, const base::string16& title) override;
   void SetFilename(const base::FilePath& path) override;
   void SetFilenames(const std::vector<FileInfo>& filenames) override;
-  void SetPickledData(const Clipboard::FormatType& format,
+  void SetPickledData(const ClipboardFormatType& format,
                       const base::Pickle& pickle) override;
   bool GetString(base::string16* data) const override;
   bool GetURLAndTitle(OSExchangeData::FilenameToURLPolicy policy,
@@ -73,12 +72,12 @@ class UI_BASE_EXPORT OSExchangeDataProviderAuraX11
                       base::string16* title) const override;
   bool GetFilename(base::FilePath* path) const override;
   bool GetFilenames(std::vector<FileInfo>* filenames) const override;
-  bool GetPickledData(const Clipboard::FormatType& format,
+  bool GetPickledData(const ClipboardFormatType& format,
                       base::Pickle* pickle) const override;
   bool HasString() const override;
   bool HasURL(OSExchangeData::FilenameToURLPolicy policy) const override;
   bool HasFile() const override;
-  bool HasCustomFormat(const Clipboard::FormatType& format) const override;
+  bool HasCustomFormat(const ClipboardFormatType& format) const override;
 
   void SetFileContents(const base::FilePath& filename,
                        const std::string& file_contents) override;
@@ -97,7 +96,7 @@ class UI_BASE_EXPORT OSExchangeDataProviderAuraX11
 
  private:
   friend class OSExchangeDataProviderAuraX11Test;
-  typedef std::map<Clipboard::FormatType, base::Pickle> PickleData;
+  typedef std::map<ClipboardFormatType, base::Pickle> PickleData;
 
   // Returns true if |formats_| contains a string format and the string can be
   // parsed as a URL.
diff --git a/ui/base/dragdrop/os_exchange_data_provider_aurax11_unittest.cc b/ui/base/dragdrop/os_exchange_data_provider_aurax11_unittest.cc
index 9403c2a626a3..ac42a4dccfa6 100644
--- a/ui/base/dragdrop/os_exchange_data_provider_aurax11_unittest.cc
+++ b/ui/base/dragdrop/os_exchange_data_provider_aurax11_unittest.cc
@@ -8,6 +8,7 @@
 #include "base/strings/utf_string_conversions.h"
 #include "base/test/scoped_task_environment.h"
 #include "testing/gtest/include/gtest/gtest.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 #include "ui/base/dragdrop/file_info.h"
 #include "ui/events/platform/x11/x11_event_source_glib.h"
 #include "ui/gfx/x/x11_atom_cache.h"
@@ -32,8 +33,7 @@ class OSExchangeDataProviderAuraX11Test : public testing::Test {
     scoped_refptr<base::RefCountedMemory> mem(
         base::RefCountedString::TakeString(&contents_copy));
 
-    provider.format_map_.Insert(gfx::GetAtom(ui::Clipboard::kMimeTypeURIList),
-                                mem);
+    provider.format_map_.Insert(gfx::GetAtom(ui::kMimeTypeURIList), mem);
   }
 
  protected:
diff --git a/ui/base/dragdrop/os_exchange_data_provider_mac.h b/ui/base/dragdrop/os_exchange_data_provider_mac.h
index edc52f42540a..5ba2a691e380 100644
--- a/ui/base/dragdrop/os_exchange_data_provider_mac.h
+++ b/ui/base/dragdrop/os_exchange_data_provider_mac.h
@@ -35,7 +35,7 @@ class UI_BASE_EXPORT OSExchangeDataProviderMac
   void SetURL(const GURL& url, const base::string16& title) override;
   void SetFilename(const base::FilePath& path) override;
   void SetFilenames(const std::vector<FileInfo>& filenames) override;
-  void SetPickledData(const Clipboard::FormatType& format,
+  void SetPickledData(const ClipboardFormatType& format,
                       const base::Pickle& data) override;
   bool GetString(base::string16* data) const override;
   bool GetURLAndTitle(OSExchangeData::FilenameToURLPolicy policy,
@@ -43,12 +43,12 @@ class UI_BASE_EXPORT OSExchangeDataProviderMac
                       base::string16* title) const override;
   bool GetFilename(base::FilePath* path) const override;
   bool GetFilenames(std::vector<FileInfo>* filenames) const override;
-  bool GetPickledData(const Clipboard::FormatType& format,
+  bool GetPickledData(const ClipboardFormatType& format,
                       base::Pickle* data) const override;
   bool HasString() const override;
   bool HasURL(OSExchangeData::FilenameToURLPolicy policy) const override;
   bool HasFile() const override;
-  bool HasCustomFormat(const Clipboard::FormatType& format) const override;
+  bool HasCustomFormat(const ClipboardFormatType& format) const override;
   void SetDragImage(const gfx::ImageSkia& image,
                     const gfx::Vector2d& cursor_offset) override;
   gfx::ImageSkia GetDragImage() const override;
diff --git a/ui/base/dragdrop/os_exchange_data_provider_mac.mm b/ui/base/dragdrop/os_exchange_data_provider_mac.mm
index 4a626b30093b..68e89f0ff156 100644
--- a/ui/base/dragdrop/os_exchange_data_provider_mac.mm
+++ b/ui/base/dragdrop/os_exchange_data_provider_mac.mm
@@ -12,6 +12,8 @@
 #include "base/strings/sys_string_conversions.h"
 #include "base/strings/utf_string_conversions.h"
 #import "third_party/mozilla/NSPasteboard+Utils.h"
+#include "ui/base/clipboard/clipboard_constants.h"
+#include "ui/base/clipboard/clipboard_format_type.h"
 #import "ui/base/clipboard/clipboard_util_mac.h"
 #include "ui/base/clipboard/custom_data_helper.h"
 #import "ui/base/dragdrop/cocoa_dnd_util.h"
@@ -78,7 +80,7 @@ void OSExchangeDataProviderMac::SetFilenames(
 }
 
 void OSExchangeDataProviderMac::SetPickledData(
-    const Clipboard::FormatType& format,
+    const ClipboardFormatType& format,
     const base::Pickle& data) {
   NSData* ns_data = [NSData dataWithBytes:data.data() length:data.size()];
   [pasteboard_->get() setData:ns_data forType:format.ToNSString()];
@@ -160,7 +162,7 @@ bool OSExchangeDataProviderMac::GetFilenames(
 }
 
 bool OSExchangeDataProviderMac::GetPickledData(
-    const Clipboard::FormatType& format,
+    const ClipboardFormatType& format,
     base::Pickle* data) const {
   DCHECK(data);
   NSData* ns_data = [pasteboard_->get() dataForType:format.ToNSString()];
@@ -189,7 +191,7 @@ bool OSExchangeDataProviderMac::HasFile() const {
 }
 
 bool OSExchangeDataProviderMac::HasCustomFormat(
-    const Clipboard::FormatType& format) const {
+    const ClipboardFormatType& format) const {
   return [[pasteboard_->get() types] containsObject:format.ToNSString()];
 }
 
diff --git a/ui/base/dragdrop/os_exchange_data_provider_win.cc b/ui/base/dragdrop/os_exchange_data_provider_win.cc
index 83f6da002e89..82172fe54462 100644
--- a/ui/base/dragdrop/os_exchange_data_provider_win.cc
+++ b/ui/base/dragdrop/os_exchange_data_provider_win.cc
@@ -26,7 +26,7 @@
 #include "net/base/filename_util.h"
 #include "skia/ext/skia_utils_win.h"
 #include "third_party/skia/include/core/SkBitmap.h"
-#include "ui/base/clipboard/clipboard.h"
+#include "ui/base/clipboard/clipboard_format_type.h"
 #include "ui/base/clipboard/clipboard_util_win.h"
 #include "ui/base/dragdrop/file_info.h"
 #include "ui/base/l10n/l10n_util.h"
@@ -38,9 +38,9 @@
 
 namespace ui {
 
-static const Clipboard::FormatType& GetRendererTaintFormatType() {
-  static base::NoDestructor<Clipboard::FormatType> format(
-      ui::Clipboard::GetFormatType("chromium/x-renderer-taint"));
+static const ClipboardFormatType& GetRendererTaintFormatType() {
+  static base::NoDestructor<ClipboardFormatType> format(
+      ui::ClipboardFormatType::GetType("chromium/x-renderer-taint"));
   return *format;
 }
 
@@ -306,12 +306,12 @@ bool OSExchangeDataProviderWin::DidOriginateFromRenderer() const {
 void OSExchangeDataProviderWin::SetString(const base::string16& data) {
   STGMEDIUM* storage = GetStorageForString(data);
   data_->contents_.push_back(std::make_unique<DataObjectImpl::StoredDataInfo>(
-      Clipboard::GetPlainTextWFormatType().ToFormatEtc(), storage));
+      ClipboardFormatType::GetPlainTextWType().ToFormatEtc(), storage));
 
   // Also add the UTF8-encoded version.
   storage = GetStorageForString(base::UTF16ToUTF8(data));
   data_->contents_.push_back(std::make_unique<DataObjectImpl::StoredDataInfo>(
-      Clipboard::GetPlainTextFormatType().ToFormatEtc(), storage));
+      ClipboardFormatType::GetPlainTextType().ToFormatEtc(), storage));
 }
 
 void OSExchangeDataProviderWin::SetURL(const GURL& url,
@@ -328,7 +328,7 @@ void OSExchangeDataProviderWin::SetURL(const GURL& url,
   x_moz_url_str += title;
   STGMEDIUM* storage = GetStorageForString(x_moz_url_str);
   data_->contents_.push_back(std::make_unique<DataObjectImpl::StoredDataInfo>(
-      Clipboard::GetMozUrlFormatType().ToFormatEtc(), storage));
+      ClipboardFormatType::GetMozUrlType().ToFormatEtc(), storage));
 
   // Add a .URL shortcut file for dragging to Explorer.
   base::string16 valid_file_name;
@@ -340,10 +340,10 @@ void OSExchangeDataProviderWin::SetURL(const GURL& url,
   // Add a UniformResourceLocator link for apps like IE and Word.
   storage = GetStorageForString(base::UTF8ToUTF16(url.spec()));
   data_->contents_.push_back(std::make_unique<DataObjectImpl::StoredDataInfo>(
-      Clipboard::GetUrlWFormatType().ToFormatEtc(), storage));
+      ClipboardFormatType::GetUrlWType().ToFormatEtc(), storage));
   storage = GetStorageForString(url.spec());
   data_->contents_.push_back(std::make_unique<DataObjectImpl::StoredDataInfo>(
-      Clipboard::GetUrlFormatType().ToFormatEtc(), storage));
+      ClipboardFormatType::GetUrlType().ToFormatEtc(), storage));
 
   // TODO(beng): add CF_HTML.
   // http://code.google.com/p/chromium/issues/detail?id=6767GetIDListStorageForFileName
@@ -360,7 +360,7 @@ void OSExchangeDataProviderWin::SetFilename(const base::FilePath& path) {
   if (!storage)
     return;
   data_->contents_.push_back(std::make_unique<DataObjectImpl::StoredDataInfo>(
-      Clipboard::GetIDListFormatType().ToFormatEtc(), storage));
+      ClipboardFormatType::GetIDListType().ToFormatEtc(), storage));
 }
 
 void OSExchangeDataProviderWin::SetFilenames(
@@ -370,11 +370,11 @@ void OSExchangeDataProviderWin::SetFilenames(
     return;
 
   data_->contents_.push_back(std::make_unique<DataObjectImpl::StoredDataInfo>(
-      Clipboard::GetCFHDropFormatType().ToFormatEtc(), storage));
+      ClipboardFormatType::GetCFHDropType().ToFormatEtc(), storage));
 }
 
 void OSExchangeDataProviderWin::SetPickledData(
-    const Clipboard::FormatType& format,
+    const ClipboardFormatType& format,
     const base::Pickle& data) {
   STGMEDIUM* storage = GetStorageForBytes(data.data(), data.size());
   data_->contents_.push_back(std::make_unique<DataObjectImpl::StoredDataInfo>(
@@ -387,12 +387,12 @@ void OSExchangeDataProviderWin::SetFileContents(
   // Add CFSTR_FILEDESCRIPTOR
   STGMEDIUM* storage = GetStorageForFileDescriptor(filename);
   data_->contents_.push_back(std::make_unique<DataObjectImpl::StoredDataInfo>(
-      Clipboard::GetFileDescriptorFormatType().ToFormatEtc(), storage));
+      ClipboardFormatType::GetFileDescriptorType().ToFormatEtc(), storage));
 
   // Add CFSTR_FILECONTENTS
   storage = GetStorageForBytes(file_contents.data(), file_contents.length());
   data_->contents_.push_back(std::make_unique<DataObjectImpl::StoredDataInfo>(
-      Clipboard::GetFileContentZeroFormatType().ToFormatEtc(), storage));
+      ClipboardFormatType::GetFileContentZeroType().ToFormatEtc(), storage));
 }
 
 void OSExchangeDataProviderWin::SetHtml(const base::string16& html,
@@ -404,12 +404,12 @@ void OSExchangeDataProviderWin::SetHtml(const base::string16& html,
   std::string cf_html = ClipboardUtil::HtmlToCFHtml(utf8_html, url);
   STGMEDIUM* storage = GetStorageForBytes(cf_html.c_str(), cf_html.size());
   data_->contents_.push_back(std::make_unique<DataObjectImpl::StoredDataInfo>(
-      Clipboard::GetHtmlFormatType().ToFormatEtc(), storage));
+      ClipboardFormatType::GetHtmlType().ToFormatEtc(), storage));
 
   STGMEDIUM* storage_plain = GetStorageForBytes(utf8_html.c_str(),
                                                 utf8_html.size());
   data_->contents_.push_back(std::make_unique<DataObjectImpl::StoredDataInfo>(
-      Clipboard::GetTextHtmlFormatType().ToFormatEtc(), storage_plain));
+      ClipboardFormatType::GetTextHtmlType().ToFormatEtc(), storage_plain));
 }
 
 bool OSExchangeDataProviderWin::GetString(base::string16* data) const {
@@ -459,7 +459,7 @@ bool OSExchangeDataProviderWin::GetFilenames(
 }
 
 bool OSExchangeDataProviderWin::GetPickledData(
-    const Clipboard::FormatType& format,
+    const ClipboardFormatType& format,
     base::Pickle* data) const {
   DCHECK(data);
   bool success = false;
@@ -523,7 +523,7 @@ bool OSExchangeDataProviderWin::HasHtml() const {
 }
 
 bool OSExchangeDataProviderWin::HasCustomFormat(
-    const Clipboard::FormatType& format) const {
+    const ClipboardFormatType& format) const {
   FORMATETC format_etc = format.ToFormatEtc();
   return (source_object_->QueryGetData(&format_etc) == S_OK);
 }
@@ -540,7 +540,7 @@ void OSExchangeDataProviderWin::SetDownloadFileInfo(
 
   // Add CF_HDROP.
   auto info = std::make_unique<DataObjectImpl::StoredDataInfo>(
-      Clipboard::GetCFHDropFormatType().ToFormatEtc(), storage);
+      ClipboardFormatType::GetCFHDropType().ToFormatEtc(), storage);
   info->downloader = download.downloader;
   data_->contents_.push_back(std::move(info));
 
diff --git a/ui/base/dragdrop/os_exchange_data_provider_win.h b/ui/base/dragdrop/os_exchange_data_provider_win.h
index a47c93b1f6aa..96fa77ec7633 100644
--- a/ui/base/dragdrop/os_exchange_data_provider_win.h
+++ b/ui/base/dragdrop/os_exchange_data_provider_win.h
@@ -154,7 +154,7 @@ class UI_BASE_EXPORT OSExchangeDataProviderWin
   void SetURL(const GURL& url, const base::string16& title) override;
   void SetFilename(const base::FilePath& path) override;
   void SetFilenames(const std::vector<FileInfo>& filenames) override;
-  void SetPickledData(const Clipboard::FormatType& format,
+  void SetPickledData(const ClipboardFormatType& format,
                       const base::Pickle& data) override;
   void SetFileContents(const base::FilePath& filename,
                        const std::string& file_contents) override;
@@ -166,7 +166,7 @@ class UI_BASE_EXPORT OSExchangeDataProviderWin
                       base::string16* title) const override;
   bool GetFilename(base::FilePath* path) const override;
   bool GetFilenames(std::vector<FileInfo>* filenames) const override;
-  bool GetPickledData(const Clipboard::FormatType& format,
+  bool GetPickledData(const ClipboardFormatType& format,
                       base::Pickle* data) const override;
   bool GetFileContents(base::FilePath* filename,
                        std::string* file_contents) const override;
@@ -176,7 +176,7 @@ class UI_BASE_EXPORT OSExchangeDataProviderWin
   bool HasFile() const override;
   bool HasFileContents() const override;
   bool HasHtml() const override;
-  bool HasCustomFormat(const Clipboard::FormatType& format) const override;
+  bool HasCustomFormat(const ClipboardFormatType& format) const override;
   void SetDownloadFileInfo(
       const OSExchangeData::DownloadFileInfo& download_info) override;
   void SetDragImage(const gfx::ImageSkia& image_skia,
diff --git a/ui/base/dragdrop/os_exchange_data_unittest.cc b/ui/base/dragdrop/os_exchange_data_unittest.cc
index 9291ca57f517..93e8ed6a0e40 100644
--- a/ui/base/dragdrop/os_exchange_data_unittest.cc
+++ b/ui/base/dragdrop/os_exchange_data_unittest.cc
@@ -12,6 +12,7 @@
 #include "net/base/filename_util.h"
 #include "testing/gtest/include/gtest/gtest.h"
 #include "testing/platform_test.h"
+#include "ui/base/clipboard/clipboard_format_type.h"
 #include "ui/base/dragdrop/file_info.h"
 #include "ui/base/dragdrop/os_exchange_data.h"
 #include "ui/events/platform/platform_event_source.h"
@@ -142,8 +143,8 @@ TEST_F(OSExchangeDataTest, TestFileToURLConversion) {
 }
 
 TEST_F(OSExchangeDataTest, TestPickledData) {
-  const Clipboard::FormatType kTestFormat =
-      Clipboard::GetFormatType("application/vnd.chromium.test");
+  const ui::ClipboardFormatType kTestFormat =
+      ui::ClipboardFormatType::GetType("application/vnd.chromium.test");
 
   base::Pickle saved_pickle;
   saved_pickle.WriteInt(1);
diff --git a/ui/base/dragdrop/os_exchange_data_win_unittest.cc b/ui/base/dragdrop/os_exchange_data_win_unittest.cc
index 09bf9b0d6a3e..161c2519a9be 100644
--- a/ui/base/dragdrop/os_exchange_data_win_unittest.cc
+++ b/ui/base/dragdrop/os_exchange_data_win_unittest.cc
@@ -10,7 +10,7 @@
 #include "base/strings/utf_string_conversions.h"
 #include "base/win/scoped_hglobal.h"
 #include "testing/gtest/include/gtest/gtest.h"
-#include "ui/base/clipboard/clipboard.h"
+#include "ui/base/clipboard/clipboard_format_type.h"
 #include "ui/base/dragdrop/file_info.h"
 #include "ui/base/dragdrop/os_exchange_data_provider_win.h"
 #include "url/gurl.h"
@@ -322,7 +322,7 @@ TEST(OSExchangeDataWinTest, CFHtml) {
   expected_cf_html += base::WideToUTF8(html);
   expected_cf_html.append("<!--EndFragment-->\r\n</body>\r\n</html>");
 
-  FORMATETC format = Clipboard::GetHtmlFormatType().ToFormatEtc();
+  FORMATETC format = ClipboardFormatType::GetHtmlType().ToFormatEtc();
   STGMEDIUM medium;
   IDataObject* data_object = OSExchangeDataProviderWin::GetIDataObject(data);
   EXPECT_EQ(S_OK, data_object->GetData(&format, &medium));
diff --git a/ui/base/mojo/BUILD.gn b/ui/base/mojo/BUILD.gn
index bdedff6d9807..c2199fc54240 100644
--- a/ui/base/mojo/BUILD.gn
+++ b/ui/base/mojo/BUILD.gn
@@ -32,5 +32,6 @@ source_set("lib") {
     "//base",
     "//mojo/public/cpp/bindings",
     "//ui/base",
+    "//ui/base/clipboard",
   ]
 }
diff --git a/ui/base/mojo/clipboard_client.cc b/ui/base/mojo/clipboard_client.cc
index 0424a79d09ac..258ff49641ee 100644
--- a/ui/base/mojo/clipboard_client.cc
+++ b/ui/base/mojo/clipboard_client.cc
@@ -30,7 +30,7 @@ uint64_t ClipboardClient::GetSequenceNumber(ClipboardType type) const {
   return sequence_number;
 }
 
-bool ClipboardClient::IsFormatAvailable(const FormatType& format,
+bool ClipboardClient::IsFormatAvailable(const ClipboardFormatType& format,
                                         ClipboardType type) const {
   mojo::SyncCallRestrictions::ScopedAllowSyncCall allow_sync_call;
   bool result = false;
@@ -96,7 +96,7 @@ void ClipboardClient::ReadBookmark(base::string16* title,
   clipboard_->ReadBookmark(title, url);
 }
 
-void ClipboardClient::ReadData(const FormatType& format,
+void ClipboardClient::ReadData(const ClipboardFormatType& format,
                                std::string* result) const {
   mojo::SyncCallRestrictions::ScopedAllowSyncCall allow_sync_call;
   clipboard_->ReadData(format.Serialize(), result);
@@ -157,7 +157,7 @@ void ClipboardClient::WriteBitmap(const SkBitmap& bitmap) {
   clipboard_->WriteBitmap(out_bitmap);
 }
 
-void ClipboardClient::WriteData(const FormatType& format,
+void ClipboardClient::WriteData(const ClipboardFormatType& format,
                                 const char* data_data,
                                 size_t data_len) {
   mojo::SyncCallRestrictions::ScopedAllowSyncCall allow_sync_call;
diff --git a/ui/base/mojo/clipboard_client.h b/ui/base/mojo/clipboard_client.h
index ac093c3569c2..809804e7c200 100644
--- a/ui/base/mojo/clipboard_client.h
+++ b/ui/base/mojo/clipboard_client.h
@@ -22,7 +22,7 @@ class ClipboardClient : public Clipboard {
   // Clipboard overrides:
   void OnPreShutdown() override;
   uint64_t GetSequenceNumber(ClipboardType type) const override;
-  bool IsFormatAvailable(const FormatType& format,
+  bool IsFormatAvailable(const ClipboardFormatType& format,
                          ClipboardType type) const override;
   void Clear(ClipboardType type) override;
   void ReadAvailableTypes(ClipboardType type,
@@ -41,7 +41,8 @@ class ClipboardClient : public Clipboard {
                       const base::string16& type,
                       base::string16* result) const override;
   void ReadBookmark(base::string16* title, std::string* url) const override;
-  void ReadData(const FormatType& format, std::string* result) const override;
+  void ReadData(const ClipboardFormatType& format,
+                std::string* result) const override;
   void WriteObjects(ClipboardType type, const ObjectMap& objects) override;
   void WriteText(const char* text_data, size_t text_len) override;
   void WriteHTML(const char* markup_data,
@@ -55,7 +56,7 @@ class ClipboardClient : public Clipboard {
                      size_t url_len) override;
   void WriteWebSmartPaste() override;
   void WriteBitmap(const SkBitmap& bitmap) override;
-  void WriteData(const FormatType& format,
+  void WriteData(const ClipboardFormatType& format,
                  const char* data_data,
                  size_t data_len) override;
 
diff --git a/ui/base/mojo/clipboard_host.cc b/ui/base/mojo/clipboard_host.cc
index 410ea26c966f..769dde85fb9b 100644
--- a/ui/base/mojo/clipboard_host.cc
+++ b/ui/base/mojo/clipboard_host.cc
@@ -33,7 +33,7 @@ void ClipboardHost::GetSequenceNumber(ClipboardType type,
 void ClipboardHost::IsFormatAvailable(const std::string& format,
                                       ClipboardType type,
                                       IsFormatAvailableCallback callback) {
-  auto format_type = Clipboard::FormatType::Deserialize(format);
+  auto format_type = ClipboardFormatType::Deserialize(format);
   bool result = clipboard_->IsFormatAvailable(format_type, type);
   std::move(callback).Run(result);
 }
@@ -52,11 +52,11 @@ void ClipboardHost::ReadAvailableTypes(ClipboardType type,
 
 void ClipboardHost::ReadText(ClipboardType type, ReadTextCallback callback) {
   base::string16 result;
-  if (clipboard_->IsFormatAvailable(Clipboard::GetPlainTextWFormatType(),
+  if (clipboard_->IsFormatAvailable(ClipboardFormatType::GetPlainTextWType(),
                                     type)) {
     clipboard_->ReadText(type, &result);
-  } else if (clipboard_->IsFormatAvailable(Clipboard::GetPlainTextFormatType(),
-                                           type)) {
+  } else if (clipboard_->IsFormatAvailable(
+                 ClipboardFormatType::GetPlainTextType(), type)) {
     std::string ascii;
     clipboard_->ReadAsciiText(type, &ascii);
     result = base::ASCIIToUTF16(ascii);
@@ -111,7 +111,7 @@ void ClipboardHost::ReadBookmark(ReadBookmarkCallback callback) {
 void ClipboardHost::ReadData(const std::string& format,
                              ReadDataCallback callback) {
   std::string result;
-  clipboard_->ReadData(Clipboard::FormatType::Deserialize(format), &result);
+  clipboard_->ReadData(ClipboardFormatType::Deserialize(format), &result);
   std::move(callback).Run(std::move(result));
 }
 
diff --git a/ui/base/x/selection_owner.h b/ui/base/x/selection_owner.h
index e1c5a95392e6..0eef264c10e6 100644
--- a/ui/base/x/selection_owner.h
+++ b/ui/base/x/selection_owner.h
@@ -22,9 +22,9 @@ namespace ui {
 
 class XScopedEventSelector;
 
-extern const char kIncr[];
-extern const char kSaveTargets[];
-extern const char kTargets[];
+UI_BASE_EXPORT extern const char kIncr[];
+UI_BASE_EXPORT extern const char kSaveTargets[];
+UI_BASE_EXPORT extern const char kTargets[];
 
 // Owns a specific X11 selection on an X window.
 //
diff --git a/ui/base/x/selection_utils.cc b/ui/base/x/selection_utils.cc
index c0947ea7821d..eaf0f96779b2 100644
--- a/ui/base/x/selection_utils.cc
+++ b/ui/base/x/selection_utils.cc
@@ -14,7 +14,7 @@
 #include "base/strings/string_split.h"
 #include "base/strings/string_util.h"
 #include "base/strings/utf_string_conversions.h"
-#include "ui/base/clipboard/clipboard.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 #include "ui/gfx/x/x11_atom_cache.h"
 
 namespace ui {
@@ -37,14 +37,14 @@ std::vector<::Atom> GetTextAtomsFrom() {
 
 std::vector<::Atom> GetURLAtomsFrom() {
   std::vector< ::Atom> atoms;
-  atoms.push_back(gfx::GetAtom(Clipboard::kMimeTypeURIList));
-  atoms.push_back(gfx::GetAtom(Clipboard::kMimeTypeMozillaURL));
+  atoms.push_back(gfx::GetAtom(kMimeTypeURIList));
+  atoms.push_back(gfx::GetAtom(kMimeTypeMozillaURL));
   return atoms;
 }
 
 std::vector<::Atom> GetURIListAtomsFrom() {
   std::vector< ::Atom> atoms;
-  atoms.push_back(gfx::GetAtom(Clipboard::kMimeTypeURIList));
+  atoms.push_back(gfx::GetAtom(kMimeTypeURIList));
   return atoms;
 }
 
@@ -198,7 +198,7 @@ std::string SelectionData::GetText() const {
 base::string16 SelectionData::GetHtml() const {
   base::string16 markup;
 
-  if (type_ == gfx::GetAtom(Clipboard::kMimeTypeHTML)) {
+  if (type_ == gfx::GetAtom(kMimeTypeHTML)) {
     const unsigned char* data = GetData();
     size_t size = GetSize();
 
diff --git a/ui/base/x/selection_utils.h b/ui/base/x/selection_utils.h
index 2d2e99bb8130..695429464399 100644
--- a/ui/base/x/selection_utils.h
+++ b/ui/base/x/selection_utils.h
@@ -9,16 +9,15 @@
 #include <map>
 
 #include "base/memory/ref_counted_memory.h"
-#include "ui/base/clipboard/clipboard.h"
 #include "ui/base/ui_base_export.h"
 #include "ui/gfx/x/x11.h"
 
 namespace ui {
 class SelectionData;
 
-extern const char kString[];
-extern const char kText[];
-extern const char kUtf8String[];
+UI_BASE_EXPORT extern const char kString[];
+UI_BASE_EXPORT extern const char kText[];
+UI_BASE_EXPORT extern const char kUtf8String[];
 
 // Returns a list of all text atoms that we handle.
 UI_BASE_EXPORT std::vector<::Atom> GetTextAtomsFrom();
diff --git a/ui/views/BUILD.gn b/ui/views/BUILD.gn
index a1868f58cfce..84c990ad956a 100644
--- a/ui/views/BUILD.gn
+++ b/ui/views/BUILD.gn
@@ -498,6 +498,7 @@ jumbo_component("views") {
     "//skia",
     "//third_party/icu",
     "//ui/accessibility",
+    "//ui/base/clipboard",
     "//ui/display",
     "//ui/native_theme",
     "//ui/native_theme:native_theme_browser",
@@ -513,6 +514,7 @@ jumbo_component("views") {
     "//components/vector_icons",
     "//ui/accessibility:ax_enums_mojo",
     "//ui/base",
+    "//ui/base/clipboard",
     "//ui/base/ime",
     "//ui/compositor",
     "//ui/display",
@@ -882,6 +884,7 @@ jumbo_source_set("test_support_internal") {
     "//testing/gtest",
     "//ui/base",
     "//ui/base:test_support",
+    "//ui/base/clipboard:clipboard_test_support",
     "//ui/base/ime",
     "//ui/compositor",
     "//ui/compositor:test_support",
@@ -1063,6 +1066,7 @@ source_set("views_unittests_sources") {
     "//ui/accessibility",
     "//ui/base",
     "//ui/base:test_support",
+    "//ui/base/clipboard",
     "//ui/base/ime",
     "//ui/compositor:test_support",
     "//ui/events:dom_keycode_converter",
diff --git a/ui/views/cocoa/drag_drop_client_mac_unittest.mm b/ui/views/cocoa/drag_drop_client_mac_unittest.mm
index 4f49c8bd3825..f78a6f0af563 100644
--- a/ui/views/cocoa/drag_drop_client_mac_unittest.mm
+++ b/ui/views/cocoa/drag_drop_client_mac_unittest.mm
@@ -130,7 +130,7 @@ class DragDropView : public View {
   // View:
   bool GetDropFormats(
       int* formats,
-      std::set<ui::Clipboard::FormatType>* format_types) override {
+      std::set<ui::ClipboardFormatType>* format_types) override {
     *formats |= formats_;
     return true;
   }
diff --git a/ui/views/controls/menu/menu_controller.cc b/ui/views/controls/menu/menu_controller.cc
index 237a19181f21..a3325e7eb169 100644
--- a/ui/views/controls/menu/menu_controller.cc
+++ b/ui/views/controls/menu/menu_controller.cc
@@ -921,7 +921,7 @@ void MenuController::ViewHierarchyChanged(
 bool MenuController::GetDropFormats(
     SubmenuView* source,
     int* formats,
-    std::set<ui::Clipboard::FormatType>* format_types) {
+    std::set<ui::ClipboardFormatType>* format_types) {
   return source->GetMenuItem()->GetDelegate()->GetDropFormats(
       source->GetMenuItem(), formats, format_types);
 }
diff --git a/ui/views/controls/menu/menu_controller.h b/ui/views/controls/menu/menu_controller.h
index 94538e47b29c..ce76201a5e26 100644
--- a/ui/views/controls/menu/menu_controller.h
+++ b/ui/views/controls/menu/menu_controller.h
@@ -164,7 +164,7 @@ class VIEWS_EXPORT MenuController
 
   bool GetDropFormats(SubmenuView* source,
                       int* formats,
-                      std::set<ui::Clipboard::FormatType>* format_types);
+                      std::set<ui::ClipboardFormatType>* format_types);
   bool AreDropTypesRequired(SubmenuView* source);
   bool CanDrop(SubmenuView* source, const ui::OSExchangeData& data);
   void OnDragEntered(SubmenuView* source, const ui::DropTargetEvent& event);
diff --git a/ui/views/controls/menu/menu_delegate.cc b/ui/views/controls/menu/menu_delegate.cc
index f8a91bcd5c71..d6157d86a7b2 100644
--- a/ui/views/controls/menu/menu_delegate.cc
+++ b/ui/views/controls/menu/menu_delegate.cc
@@ -81,7 +81,7 @@ bool MenuDelegate::CanDrop(MenuItemView* menu, const OSExchangeData& data) {
 bool MenuDelegate::GetDropFormats(
     MenuItemView* menu,
     int* formats,
-    std::set<ui::Clipboard::FormatType>* format_types) {
+    std::set<ui::ClipboardFormatType>* format_types) {
   return false;
 }
 
diff --git a/ui/views/controls/menu/menu_delegate.h b/ui/views/controls/menu/menu_delegate.h
index 69a8ed510b6e..68c22a5462f0 100644
--- a/ui/views/controls/menu/menu_delegate.h
+++ b/ui/views/controls/menu/menu_delegate.h
@@ -150,10 +150,9 @@ class VIEWS_EXPORT MenuDelegate {
   virtual bool CanDrop(MenuItemView* menu, const OSExchangeData& data);
 
   // See view for a description of this method.
-  virtual bool GetDropFormats(
-      MenuItemView* menu,
-      int* formats,
-      std::set<ui::Clipboard::FormatType>* format_types);
+  virtual bool GetDropFormats(MenuItemView* menu,
+                              int* formats,
+                              std::set<ui::ClipboardFormatType>* format_types);
 
   // See view for a description of this method.
   virtual bool AreDropTypesRequired(MenuItemView* menu);
diff --git a/ui/views/controls/menu/submenu_view.cc b/ui/views/controls/menu/submenu_view.cc
index 04c38f5c3647..c5f28fd3668c 100644
--- a/ui/views/controls/menu/submenu_view.cc
+++ b/ui/views/controls/menu/submenu_view.cc
@@ -241,7 +241,7 @@ void SubmenuView::PaintChildren(const PaintInfo& paint_info) {
 
 bool SubmenuView::GetDropFormats(
     int* formats,
-    std::set<ui::Clipboard::FormatType>* format_types) {
+    std::set<ui::ClipboardFormatType>* format_types) {
   DCHECK(GetMenuItem()->GetMenuController());
   return GetMenuItem()->GetMenuController()->GetDropFormats(this, formats,
                                                             format_types);
diff --git a/ui/views/controls/menu/submenu_view.h b/ui/views/controls/menu/submenu_view.h
index 37056577fe9b..23c26fcb9bcb 100644
--- a/ui/views/controls/menu/submenu_view.h
+++ b/ui/views/controls/menu/submenu_view.h
@@ -78,9 +78,8 @@ class VIEWS_EXPORT SubmenuView : public View,
   void PaintChildren(const PaintInfo& paint_info) override;
 
   // Drag and drop methods. These are forwarded to the MenuController.
-  bool GetDropFormats(
-      int* formats,
-      std::set<ui::Clipboard::FormatType>* format_types) override;
+  bool GetDropFormats(int* formats,
+                      std::set<ui::ClipboardFormatType>* format_types) override;
   bool AreDropTypesRequired() override;
   bool CanDrop(const OSExchangeData& data) override;
   void OnDragEntered(const ui::DropTargetEvent& event) override;
diff --git a/ui/views/controls/textfield/textfield.cc b/ui/views/controls/textfield/textfield.cc
index 2ff60335add8..ee360abeefa4 100644
--- a/ui/views/controls/textfield/textfield.cc
+++ b/ui/views/controls/textfield/textfield.cc
@@ -914,7 +914,7 @@ bool Textfield::SkipDefaultKeyEventProcessing(const ui::KeyEvent& event) {
 
 bool Textfield::GetDropFormats(
     int* formats,
-    std::set<ui::Clipboard::FormatType>* format_types) {
+    std::set<ui::ClipboardFormatType>* format_types) {
   if (!enabled() || read_only())
     return false;
   // TODO(msw): Can we support URL, FILENAME, etc.?
@@ -926,7 +926,7 @@ bool Textfield::GetDropFormats(
 
 bool Textfield::CanDrop(const OSExchangeData& data) {
   int formats;
-  std::set<ui::Clipboard::FormatType> format_types;
+  std::set<ui::ClipboardFormatType> format_types;
   GetDropFormats(&formats, &format_types);
   return enabled() && !read_only() && data.HasAnyFormat(formats, format_types);
 }
diff --git a/ui/views/controls/textfield/textfield.h b/ui/views/controls/textfield/textfield.h
index f5d0914d43eb..1e91cce6f04f 100644
--- a/ui/views/controls/textfield/textfield.h
+++ b/ui/views/controls/textfield/textfield.h
@@ -264,9 +264,8 @@ class VIEWS_EXPORT Textfield : public View,
   bool CanHandleAccelerators() const override;
   void AboutToRequestFocusFromTabTraversal(bool reverse) override;
   bool SkipDefaultKeyEventProcessing(const ui::KeyEvent& event) override;
-  bool GetDropFormats(
-      int* formats,
-      std::set<ui::Clipboard::FormatType>* format_types) override;
+  bool GetDropFormats(int* formats,
+                      std::set<ui::ClipboardFormatType>* format_types) override;
   bool CanDrop(const ui::OSExchangeData& data) override;
   int OnDragUpdated(const ui::DropTargetEvent& event) override;
   void OnDragExited() override;
diff --git a/ui/views/controls/textfield/textfield_controller.h b/ui/views/controls/textfield/textfield_controller.h
index 041abebadeb2..f5ecb1da07cf 100644
--- a/ui/views/controls/textfield/textfield_controller.h
+++ b/ui/views/controls/textfield/textfield_controller.h
@@ -8,6 +8,8 @@
 #include <set>
 
 #include "base/strings/string16.h"
+#include "ui/base/clipboard/clipboard_format_type.h"
+#include "ui/base/clipboard/clipboard_types.h"
 #include "ui/base/dragdrop/os_exchange_data.h"
 #include "ui/views/views_export.h"
 
@@ -76,7 +78,7 @@ class VIEWS_EXPORT TextfieldController {
   // Enables the controller to append to the accepted drop formats.
   virtual void AppendDropFormats(
       int* formats,
-      std::set<ui::Clipboard::FormatType>* format_types) {}
+      std::set<ui::ClipboardFormatType>* format_types) {}
 
   // Called when a drop of dragged data happens on the textfield. This method is
   // called before regular handling of the drop. If this returns a drag
diff --git a/ui/views/controls/textfield/textfield_unittest.cc b/ui/views/controls/textfield/textfield_unittest.cc
index 879ebf11a838..52012ae9719a 100644
--- a/ui/views/controls/textfield/textfield_unittest.cc
+++ b/ui/views/controls/textfield/textfield_unittest.cc
@@ -1705,7 +1705,7 @@ TEST_F(TextfieldTest, DragAndDrop_AcceptDrop) {
   base::string16 string(ASCIIToUTF16("string "));
   data.SetString(string);
   int formats = 0;
-  std::set<ui::Clipboard::FormatType> format_types;
+  std::set<ui::ClipboardFormatType> format_types;
 
   // Ensure that disabled textfields do not accept drops.
   textfield_->SetEnabled(false);
@@ -1739,7 +1739,7 @@ TEST_F(TextfieldTest, DragAndDrop_AcceptDrop) {
   // Ensure that textfields do not accept non-OSExchangeData::STRING types.
   ui::OSExchangeData bad_data;
   bad_data.SetFilename(base::FilePath(FILE_PATH_LITERAL("x")));
-  ui::Clipboard::FormatType fmt = ui::Clipboard::GetBitmapFormatType();
+  ui::ClipboardFormatType fmt = ui::ClipboardFormatType::GetBitmapType();
   bad_data.SetPickledData(fmt, base::Pickle());
   bad_data.SetFileContents(base::FilePath(L"x"), "x");
   bad_data.SetHtml(base::string16(ASCIIToUTF16("x")), GURL("x.org"));
@@ -1803,7 +1803,7 @@ TEST_F(TextfieldTest, DragAndDrop_ToTheRight) {
   ui::OSExchangeData data;
   int formats = 0;
   int operations = 0;
-  std::set<ui::Clipboard::FormatType> format_types;
+  std::set<ui::ClipboardFormatType> format_types;
 
   // Start dragging "ello".
   textfield_->SelectRange(gfx::Range(1, 5));
@@ -1854,7 +1854,7 @@ TEST_F(TextfieldTest, DragAndDrop_ToTheLeft) {
   ui::OSExchangeData data;
   int formats = 0;
   int operations = 0;
-  std::set<ui::Clipboard::FormatType> format_types;
+  std::set<ui::ClipboardFormatType> format_types;
 
   // Start dragging " worl".
   textfield_->SelectRange(gfx::Range(5, 10));
diff --git a/ui/views/mus/drag_interactive_uitest.cc b/ui/views/mus/drag_interactive_uitest.cc
index 92dc07d7a7dc..13f5ba377be4 100644
--- a/ui/views/mus/drag_interactive_uitest.cc
+++ b/ui/views/mus/drag_interactive_uitest.cc
@@ -60,7 +60,7 @@ class TargetView : public views::View {
   // views::View overrides:
   bool GetDropFormats(
       int* formats,
-      std::set<ui::Clipboard::FormatType>* format_types) override {
+      std::set<ui::ClipboardFormatType>* format_types) override {
     *formats = ui::OSExchangeData::STRING;
     return true;
   }
diff --git a/ui/views/test/scoped_views_test_helper.cc b/ui/views/test/scoped_views_test_helper.cc
index 05393894bdb3..d67af1e8d48a 100644
--- a/ui/views/test/scoped_views_test_helper.cc
+++ b/ui/views/test/scoped_views_test_helper.cc
@@ -8,8 +8,8 @@
 
 #include "base/memory/ptr_util.h"
 #include "ui/base/clipboard/clipboard.h"
+#include "ui/base/clipboard/test/test_clipboard.h"
 #include "ui/base/ime/input_method_initializer.h"
-#include "ui/base/test/test_clipboard.h"
 #include "ui/views/test/platform_test_helper.h"
 #include "ui/views/test/test_views_delegate.h"
 #include "ui/views/test/views_test_helper.h"
diff --git a/ui/views/view.cc b/ui/views/view.cc
index b2429b98c421..9b0a39564a04 100644
--- a/ui/views/view.cc
+++ b/ui/views/view.cc
@@ -1360,7 +1360,7 @@ gfx::Point View::GetKeyboardContextMenuLocation() {
 // Drag and drop ---------------------------------------------------------------
 
 bool View::GetDropFormats(int* formats,
-                          std::set<ui::Clipboard::FormatType>* format_types) {
+                          std::set<ui::ClipboardFormatType>* format_types) {
   return false;
 }
 
diff --git a/ui/views/view.h b/ui/views/view.h
index 998c87a3d6f9..505f8c43daf2 100644
--- a/ui/views/view.h
+++ b/ui/views/view.h
@@ -23,6 +23,7 @@
 #include "ui/accessibility/ax_enums.mojom.h"
 #include "ui/base/accelerators/accelerator.h"
 #include "ui/base/class_property.h"
+#include "ui/base/clipboard/clipboard_format_type.h"
 #include "ui/base/dragdrop/drag_drop_types.h"
 #include "ui/base/dragdrop/drop_target_event.h"
 #include "ui/base/dragdrop/os_exchange_data.h"
@@ -1064,9 +1065,8 @@ class VIEWS_EXPORT View : public ui::LayerDelegate,
   // |formats| is a bitmask of the formats defined bye OSExchangeData::Format.
   // The default implementation returns false, which means the view doesn't
   // support dropping.
-  virtual bool GetDropFormats(
-      int* formats,
-      std::set<ui::Clipboard::FormatType>* format_types);
+  virtual bool GetDropFormats(int* formats,
+                              std::set<ui::ClipboardFormatType>* format_types);
 
   // Override and return true if the data must be available before any drop
   // methods should be invoked. The default is false.
diff --git a/ui/views/widget/desktop_aura/desktop_drag_drop_client_aurax11.cc b/ui/views/widget/desktop_aura/desktop_drag_drop_client_aurax11.cc
index f0da4f881422..959e80f2f045 100644
--- a/ui/views/widget/desktop_aura/desktop_drag_drop_client_aurax11.cc
+++ b/ui/views/widget/desktop_aura/desktop_drag_drop_client_aurax11.cc
@@ -17,7 +17,7 @@
 #include "ui/aura/client/drag_drop_delegate.h"
 #include "ui/aura/window.h"
 #include "ui/aura/window_tree_host.h"
-#include "ui/base/clipboard/clipboard.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 #include "ui/base/dragdrop/drop_target_event.h"
 #include "ui/base/dragdrop/os_exchange_data.h"
 #include "ui/base/dragdrop/os_exchange_data_provider_aurax11.h"
@@ -774,7 +774,7 @@ int DesktopDragDropClientAuraX11::StartDragAndDrop(
     actions.push_back(gfx::GetAtom(kXdndActionDirectSave));
     ui::SetStringProperty(
         xwindow_, gfx::GetAtom(kXdndDirectSave0),
-        gfx::GetAtom(ui::Clipboard::kMimeTypeText),
+        gfx::GetAtom(ui::kMimeTypeText),
         source_provider_->file_contents_name().AsUTF8Unsafe());
   }
   ui::SetAtomArrayProperty(xwindow_, kXdndActionList, "ATOM", actions);
diff --git a/ui/views/widget/drop_helper.cc b/ui/views/widget/drop_helper.cc
index f201f7311bd5..62f39b691fc9 100644
--- a/ui/views/widget/drop_helper.cc
+++ b/ui/views/widget/drop_helper.cc
@@ -102,7 +102,7 @@ View* DropHelper::CalculateTargetViewImpl(
   }
 #else
   int formats = 0;
-  std::set<ui::Clipboard::FormatType> format_types;
+  std::set<ui::ClipboardFormatType> format_types;
   while (view && view != target_view_) {
     if (view->enabled() &&
         view->GetDropFormats(&formats, &format_types) &&
-- 
2.17.1

