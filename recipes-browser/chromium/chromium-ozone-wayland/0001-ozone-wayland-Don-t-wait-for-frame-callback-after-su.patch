Upstream-Status: Submitted [https://crrev.com/c/1570028]

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From bbcdde0419246202a052abc436bcc73a600d1ff8 Mon Sep 17 00:00:00 2001
From: Maksim Sisov <msisov@igalia.com>
Date: Wed, 8 May 2019 14:14:16 +0300
Subject: [PATCH] [ozone/wayland] Don't wait for frame callback after
 submission

Right now, the surface waits until the frame callback is fired,
which results in undesired wait when the display compositor
can submit new frame (the AsyncSwapBuffers takes about ~10ms).

Instead, notify the client on successfull submission
right after the buffer is attached, but as soon as
a new frame comes, do not submit it, but rather wait
the frame callback.

The advantage of this approach is that the browser process
does not block the display compositor's scheduler and allows
it to operate as fast as possible (the AsyncSwapBuffers
takes about ~0.6-1ms).

Bug: 943096
Change-Id: I808896350a8cd33b87e956b0cec51d8fa0ff1cdb
---
 .../wayland/gpu/gbm_surfaceless_wayland.cc    |  57 +++++----
 .../wayland/gpu/gbm_surfaceless_wayland.h     |   2 +-
 .../wayland/host/wayland_buffer_manager.cc    | 111 +++++++++++-------
 3 files changed, 94 insertions(+), 76 deletions(-)

diff --git a/ui/ozone/platform/wayland/gpu/gbm_surfaceless_wayland.cc b/ui/ozone/platform/wayland/gpu/gbm_surfaceless_wayland.cc
index 97199961a743..b685692cb506 100644
--- a/ui/ozone/platform/wayland/gpu/gbm_surfaceless_wayland.cc
+++ b/ui/ozone/platform/wayland/gpu/gbm_surfaceless_wayland.cc
@@ -194,33 +194,33 @@ void GbmSurfacelessWayland::PendingFrame::Flush() {
 
 void GbmSurfacelessWayland::SubmitFrame() {
   DCHECK(!unsubmitted_frames_.empty());
+  DCHECK(unsubmitted_frames_.front()->ready);
+  DCHECK(last_swap_buffers_result_);
 
-  if (unsubmitted_frames_.front()->ready && !submitted_frame_) {
-    submitted_frame_ = std::move(unsubmitted_frames_.front());
-    unsubmitted_frames_.erase(unsubmitted_frames_.begin());
+  auto frame = std::move(unsubmitted_frames_.front());
+  unsubmitted_frames_.erase(unsubmitted_frames_.begin());
 
-    bool schedule_planes_succeeded =
-        submitted_frame_->ScheduleOverlayPlanes(widget_);
+  bool schedule_planes_succeeded = frame->ScheduleOverlayPlanes(widget_);
 
-    if (!schedule_planes_succeeded) {
-      last_swap_buffers_result_ = false;
+  if (!schedule_planes_succeeded) {
+    last_swap_buffers_result_ = false;
 
-      std::move(submitted_frame_->completion_callback)
-          .Run(gfx::SwapResult::SWAP_FAILED, nullptr);
-      // Notify the caller, the buffer is never presented on a screen.
-      std::move(submitted_frame_->presentation_callback)
-          .Run(gfx::PresentationFeedback::Failure());
+    std::move(frame->completion_callback)
+        .Run(gfx::SwapResult::SWAP_FAILED, nullptr);
+    // Notify the caller, the buffer is never presented on a screen.
+    std::move(frame->presentation_callback)
+        .Run(gfx::PresentationFeedback::Failure());
+    return;
+  }
 
-      submitted_frame_.reset();
-      return;
-    }
+  auto* frame_ptr = frame.get();
+  submitted_frames_.push_back(std::move(frame));
 
-    submitted_frame_->buffer_id = planes_.back().pixmap->GetUniqueId();
-    connection_->CommitBuffer(widget_, submitted_frame_->buffer_id,
-                              submitted_frame_->damage_region_);
+  frame_ptr->buffer_id = planes_.back().pixmap->GetUniqueId();
+  connection_->CommitBuffer(widget_, frame_ptr->buffer_id,
+                            frame_ptr->damage_region_);
 
-    planes_.clear();
-  }
+  planes_.clear();
 }
 
 EGLSyncKHR GbmSurfacelessWayland::InsertFence(bool implicit) {
@@ -238,19 +238,16 @@ void GbmSurfacelessWayland::FenceRetired(PendingFrame* frame) {
 
 void GbmSurfacelessWayland::OnSubmission(uint32_t buffer_id,
                                          const gfx::SwapResult& swap_result) {
-  submitted_frame_->overlays.clear();
-
-  DCHECK_EQ(submitted_frame_->buffer_id, buffer_id);
-  std::move(submitted_frame_->completion_callback).Run(swap_result, nullptr);
+  auto frame = std::move(submitted_frames_.front());
+  submitted_frames_.erase(submitted_frames_.begin());
+  frame->overlays.clear();
 
-  pending_presentation_frames_.push_back(std::move(submitted_frame_));
+  DCHECK_EQ(frame->buffer_id, buffer_id);
+  std::move(frame->completion_callback).Run(swap_result, nullptr);
 
-  if (swap_result != gfx::SwapResult::SWAP_ACK) {
-    last_swap_buffers_result_ = false;
-    return;
-  }
+  pending_presentation_frames_.push_back(std::move(frame));
 
-  SubmitFrame();
+  last_swap_buffers_result_ = swap_result == gfx::SwapResult::SWAP_ACK;
 }
 
 void GbmSurfacelessWayland::OnPresentation(
diff --git a/ui/ozone/platform/wayland/gpu/gbm_surfaceless_wayland.h b/ui/ozone/platform/wayland/gpu/gbm_surfaceless_wayland.h
index dfd3d91fb731..e866b65bdbfc 100644
--- a/ui/ozone/platform/wayland/gpu/gbm_surfaceless_wayland.h
+++ b/ui/ozone/platform/wayland/gpu/gbm_surfaceless_wayland.h
@@ -99,8 +99,8 @@ class GbmSurfacelessWayland : public gl::SurfacelessEGL {
   // The native surface. Deleting this is allowed to free the EGLNativeWindow.
   gfx::AcceleratedWidget widget_;
   std::vector<std::unique_ptr<PendingFrame>> unsubmitted_frames_;
+  std::vector<std::unique_ptr<PendingFrame>> submitted_frames_;
   std::vector<std::unique_ptr<PendingFrame>> pending_presentation_frames_;
-  std::unique_ptr<PendingFrame> submitted_frame_;
   bool has_implicit_external_sync_;
   bool last_swap_buffers_result_ = true;
   bool use_egl_fence_sync_ = true;
diff --git a/ui/ozone/platform/wayland/host/wayland_buffer_manager.cc b/ui/ozone/platform/wayland/host/wayland_buffer_manager.cc
index 994396db16f0..d751aa649f4d 100644
--- a/ui/ozone/platform/wayland/host/wayland_buffer_manager.cc
+++ b/ui/ozone/platform/wayland/host/wayland_buffer_manager.cc
@@ -56,8 +56,6 @@ class WaylandBufferManager::Surface {
   ~Surface() = default;
 
   bool CommitBuffer(uint32_t buffer_id, const gfx::Rect& damage_region) {
-    DCHECK(!submitted_buffer_);
-
     WaylandBuffer* buffer = GetBuffer(buffer_id);
     if (!buffer)
       return false;
@@ -69,15 +67,26 @@ class WaylandBufferManager::Surface {
     // zwp linux dmabuf protocol version, the wl_buffer can be created
     // immediately without asynchronous wait 2) the wl_buffer can have been
     // created by this time.
-    while (!buffer->wl_buffer) {
+    //
+    // Another case, which always happen is waiting until the frame callback is
+    // completed. Thus, wait here when the Wayland compositor fires the frame
+    // callback.
+    while (!buffer->wl_buffer || !!wl_frame_callback_) {
       // If the wl_buffer has been attached, but the wl_buffer still has been
       // null, it means the Wayland server failed to create the buffer and we
       // have to fail here.
-      if (buffer->attached ||
+      if ((buffer->attached && !buffer->wl_buffer) ||
           wl_display_roundtrip(connection_->display()) == -1)
         return false;
     }
 
+    // Once the BufferRelease is called. The buffer will be released.
+    DCHECK(buffer->released);
+    buffer->released = false;
+
+    prev_submitted_buffer_ = submitted_buffer_;
+    submitted_buffer_ = buffer;
+
     AttachAndDamageBuffer(buffer, damage_region);
 
     SetupFrameCallback();
@@ -86,6 +95,7 @@ class WaylandBufferManager::Surface {
     CommitSurface();
 
     connection_->ScheduleFlush();
+
     return true;
   }
 
@@ -96,8 +106,6 @@ class WaylandBufferManager::Surface {
   }
 
   size_t DestroyBuffer(uint32_t buffer_id) {
-    if (submitted_buffer_ && submitted_buffer_->buffer_id == buffer_id)
-      submitted_buffer_ = nullptr;
     auto result = buffers_.erase(buffer_id);
     return result;
   }
@@ -112,6 +120,9 @@ class WaylandBufferManager::Surface {
     DCHECK(!buffer->wl_buffer);
     buffer->wl_buffer = std::move(new_buffer);
     buffer->attached = true;
+
+    if (buffer->wl_buffer)
+      SetupBufferReleaseListener(buffer);
   }
 
   void ClearState() {
@@ -144,16 +155,22 @@ class WaylandBufferManager::Surface {
 
     // A wl_buffer backed by a dmabuf created on the GPU side.
     wl::Object<struct wl_buffer> wl_buffer;
+
     // Tells if the buffer has the wl_buffer attached. This can be used to
     // identify potential problems, when the Wayland compositor fails to create
     // wl_buffers.
     bool attached = false;
 
-    gfx::PresentationFeedback feedback;
+    // Tells if the buffer has already been released aka not busy, and the
+    // surface can tell the gpu about successful swap.
+    bool released = true;
 
-    bool swapped = false;
+    // Tells if the Wayland compositor has already presented the buffer contents
+    // on screen.
     bool presented = false;
 
+    gfx::PresentationFeedback feedback;
+
     DISALLOW_COPY_AND_ASSIGN(WaylandBuffer);
   };
 
@@ -172,8 +189,6 @@ class WaylandBufferManager::Surface {
         surface, pending_damage_region.x(), pending_damage_region.y(),
         pending_damage_region.width(), pending_damage_region.height());
     wl_surface_attach(surface, buffer->wl_buffer.get(), 0, 0);
-
-    submitted_buffer_ = buffer;
   }
 
   void CommitSurface() { wl_surface_commit(window_->surface()); }
@@ -204,6 +219,13 @@ class WaylandBufferManager::Surface {
         presentation_feedbacks_.back().second.get(), &feedback_listener, this);
   }
 
+  void SetupBufferReleaseListener(WaylandBuffer* buffer) {
+    static struct wl_buffer_listener buffer_listener = {
+        &Surface::BufferRelease,
+    };
+    wl_buffer_add_listener(buffer->wl_buffer.get(), &buffer_listener, this);
+  }
+
   WaylandBuffer* GetBuffer(uint32_t buffer_id) {
     auto it = buffers_.find(buffer_id);
     return it != buffers_.end() ? it->second.get() : nullptr;
@@ -212,63 +234,62 @@ class WaylandBufferManager::Surface {
   void OnFrameCallback(struct wl_callback* callback) {
     DCHECK(wl_frame_callback_.get() == callback);
     wl_frame_callback_.reset();
+  }
 
-    if (!submitted_buffer_)
-      return;
+  // wl_callback_listener
+  static void FrameCallbackDone(void* data,
+                                struct wl_callback* callback,
+                                uint32_t time) {
+    Surface* self = static_cast<Surface*>(data);
+    DCHECK(self);
+    self->OnFrameCallback(callback);
+  }
 
-    // TODO(msisov): remove these once pending buffers logic goes to the
-    // manager as long as it will always notify about successful swap once the
-    // surface is committed.
-    DCHECK(submitted_buffer_);
-    WaylandBuffer* buffer = submitted_buffer_;
-    submitted_buffer_ = nullptr;
+  // wl_buffer_listener
+  static void BufferRelease(void* data, struct wl_buffer* wl_buffer) {
+    Surface* self = static_cast<Surface*>(data);
+    DCHECK(self);
+    auto* buffer = self->prev_submitted_buffer_;
+    CHECK(buffer && buffer->wl_buffer.get() == wl_buffer)
+        << "This is a severe error";
+    self->OnSubmission(buffer);
+  }
 
-    buffer->swapped = true;
-    DCHECK(connection_);
+  void OnSubmission(WaylandBuffer* buffer) {
+    DCHECK(buffer);
     connection_->OnSubmission(window_->GetWidget(), buffer->buffer_id,
                               gfx::SwapResult::SWAP_ACK);
+    buffer->released = true;
 
     // If presentation feedback is not supported, use a fake feedback. This
     // literally means there are no presentation feedback callbacks created.
     if (!connection_->presentation()) {
-      DCHECK(presentation_feedbacks_.empty() && !buffer->presented);
+      DCHECK(presentation_feedbacks_.empty());
       OnPresentation(
           buffer->buffer_id,
           gfx::PresentationFeedback(base::TimeTicks::Now(), base::TimeDelta(),
                                     GetPresentationKindFlags(0)));
     } else if (buffer->presented) {
-      // If the buffer has been presented before the frame callback aka
-      // completion callback (in the future, release callback is going to be
-      // used), present the feedback to the GPU.
+      // If buffer has already been presented, it couldn't run the presentation
+      // callback, because chromium does not allow the presentation to come
+      // earlier than the submission callback. Thus, trigger saved feedback
+      // here.
       OnPresentation(buffer->buffer_id, buffer->feedback);
-    } else {
-      DCHECK(!presentation_feedbacks_.empty());
     }
   }
 
-  // wl_callback_listener
-  static void FrameCallbackDone(void* data,
-                                struct wl_callback* callback,
-                                uint32_t time) {
-    Surface* self = static_cast<Surface*>(data);
-    DCHECK(self);
-    self->OnFrameCallback(callback);
-  }
-
   void OnPresentation(uint32_t buffer_id,
                       const gfx::PresentationFeedback& feedback) {
     WaylandBuffer* buffer = GetBuffer(buffer_id);
     DCHECK(buffer);
 
-    if (buffer->swapped) {
-      DCHECK(connection_);
-      connection_->OnPresentation(window_->GetWidget(), buffer_id, feedback);
+    buffer->presented = true;
+    buffer->feedback = feedback;
 
-      buffer->swapped = false;
+    if (buffer->released) {
+      connection_->OnPresentation(window_->GetWidget(), buffer_id,
+                                  std::move(buffer->feedback));
       buffer->presented = false;
-    } else {
-      buffer->presented = true;
-      buffer->feedback = feedback;
     }
   }
 
@@ -322,9 +343,6 @@ class WaylandBufferManager::Surface {
   // Non-owned pointer to the connection.
   WaylandConnection* const connection_;
 
-  // A buffer the surface has committed. Reset on frame callback.
-  WaylandBuffer* submitted_buffer_ = nullptr;
-
   // A container of created buffers.
   base::flat_map<uint32_t, std::unique_ptr<WaylandBuffer>> buffers_;
 
@@ -337,6 +355,9 @@ class WaylandBufferManager::Surface {
   // shown.
   PresentationFeedbackQueue presentation_feedbacks_;
 
+  WaylandBuffer* submitted_buffer_ = nullptr;
+  WaylandBuffer* prev_submitted_buffer_ = nullptr;
+
   DISALLOW_COPY_AND_ASSIGN(Surface);
 };
 
-- 
2.20.1

