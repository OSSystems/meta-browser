Upstream-Status: Backport

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From 2b102c86c7add0c9d9fe032d00d016b3c55b2438 Mon Sep 17 00:00:00 2001
From: Nick Diego Yamane <nickdiego@igalia.com>
Date: Fri, 15 Mar 2019 23:42:03 +0000
Subject: [PATCH 02/11] ozone/wayland: Clean up data device related code

This CL cleans up, improve readability and fixes
some styling/convention inconsistencies in wayland
data device related code in ozone/wayland, such as:

 - Use more meaningful names for DataDevice's sync
 callback and related variables, in this case used
 to defer data reading from data device's pipe file
 descriptor. Also, use local variables to store wayland
 callback structs, making it more consistent with other
 ozone wayland classes;
 - Move data source factory method into data device
 manager, which is its actual factory in wayland
 API/protocol;
 - Improve and expand WaylandDataSource class variable
 names making it easier to distinguish between clipboard
 and drag&drop instances;
 - Fix lint errors in files touched by this change;

Bug: 875164
Change-Id: I9af0e09908d94ada285f60592bba70ff0cc3904f
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/1521887
Commit-Queue: Nick Yamane <nickdiego@igalia.com>
Reviewed-by: Maksim Sisov <msisov@igalia.com>
Cr-Commit-Position: refs/heads/master@{#641350}
---
 .../platform/wayland/wayland_connection.cc    | 40 ++++++--------
 .../platform/wayland/wayland_connection.h     | 11 ++--
 .../platform/wayland/wayland_data_device.cc   | 52 ++++++++++---------
 .../platform/wayland/wayland_data_device.h    | 20 ++++---
 .../wayland/wayland_data_device_manager.cc    |  7 ++-
 .../wayland/wayland_data_device_manager.h     |  5 +-
 6 files changed, 73 insertions(+), 62 deletions(-)

diff --git a/ui/ozone/platform/wayland/wayland_connection.cc b/ui/ozone/platform/wayland/wayland_connection.cc
index 05e23b51a446..2044e47791f0 100644
--- a/ui/ozone/platform/wayland/wayland_connection.cc
+++ b/ui/ozone/platform/wayland/wayland_connection.cc
@@ -7,6 +7,9 @@
 #include <xdg-shell-unstable-v5-client-protocol.h>
 #include <xdg-shell-unstable-v6-client-protocol.h>
 
+#include <algorithm>
+#include <utility>
+
 #include "base/bind.h"
 #include "base/logging.h"
 #include "base/memory/ptr_util.h"
@@ -36,15 +39,7 @@ constexpr uint32_t kMaxXdgShellVersion = 1;
 constexpr uint32_t kMaxDeviceManagerVersion = 3;
 constexpr uint32_t kMaxWpPresentationVersion = 1;
 constexpr uint32_t kMaxTextInputManagerVersion = 1;
-
 constexpr uint32_t kMinWlOutputVersion = 2;
-
-std::unique_ptr<WaylandDataSource> CreateWaylandDataSource(
-    WaylandDataDeviceManager* data_device_manager,
-    WaylandConnection* connection) {
-  wl_data_source* data_source = data_device_manager->CreateSource();
-  return std::make_unique<WaylandDataSource>(data_source, connection);
-}
 }  // namespace
 
 WaylandConnection::WaylandConnection()
@@ -259,11 +254,11 @@ PlatformClipboard* WaylandConnection::GetPlatformClipboard() {
 void WaylandConnection::OfferClipboardData(
     const PlatformClipboard::DataMap& data_map,
     PlatformClipboard::OfferDataClosure callback) {
-  if (!data_source_) {
-    data_source_ = CreateWaylandDataSource(data_device_manager_.get(), this);
-    data_source_->WriteToClipboard(data_map);
+  if (!clipboard_data_source_) {
+    clipboard_data_source_ = data_device_manager_->CreateSource();
+    clipboard_data_source_->WriteToClipboard(data_map);
   }
-  data_source_->UpdateDataMap(data_map);
+  clipboard_data_source_->UpdateDataMap(data_map);
   std::move(callback).Run();
 }
 
@@ -279,7 +274,7 @@ void WaylandConnection::RequestClipboardData(
 }
 
 bool WaylandConnection::IsSelectionOwner() {
-  return !!data_source_;
+  return !!clipboard_data_source_;
 }
 
 void WaylandConnection::SetSequenceNumberUpdateCb(
@@ -311,13 +306,11 @@ void WaylandConnection::SetTerminateGpuCallback(
 
 void WaylandConnection::StartDrag(const ui::OSExchangeData& data,
                                   int operation) {
-  if (!drag_data_source_) {
-    drag_data_source_ =
-        CreateWaylandDataSource(data_device_manager_.get(), this);
-  }
-  drag_data_source_->Offer(data);
-  drag_data_source_->SetAction(operation);
-  data_device_->StartDrag(*(drag_data_source_->data_source()), data);
+  if (!dragdrop_data_source_)
+    dragdrop_data_source_ = data_device_manager_->CreateSource();
+  dragdrop_data_source_->Offer(data);
+  dragdrop_data_source_->SetAction(operation);
+  data_device_->StartDrag(*(dragdrop_data_source_->data_source()), data);
 }
 
 void WaylandConnection::FinishDragSession(uint32_t dnd_action,
@@ -325,7 +318,7 @@ void WaylandConnection::FinishDragSession(uint32_t dnd_action,
   if (source_window)
     source_window->OnDragSessionClose(dnd_action);
   data_device_->ResetSourceData();
-  drag_data_source_.reset();
+  dragdrop_data_source_.reset();
 }
 
 void WaylandConnection::DeliverDragData(const std::string& mime_type,
@@ -354,8 +347,9 @@ void WaylandConnection::GetAvailableMimeTypes(
 }
 
 void WaylandConnection::DataSourceCancelled() {
-  SetClipboardData(std::string(), std::string());
-  data_source_.reset();
+  DCHECK(clipboard_data_source_);
+  SetClipboardData({}, {});
+  clipboard_data_source_.reset();
 }
 
 void WaylandConnection::SetClipboardData(const std::string& contents,
diff --git a/ui/ozone/platform/wayland/wayland_connection.h b/ui/ozone/platform/wayland/wayland_connection.h
index 86228edc6bfe..a6bc2b4c65a0 100644
--- a/ui/ozone/platform/wayland/wayland_connection.h
+++ b/ui/ozone/platform/wayland/wayland_connection.h
@@ -6,6 +6,9 @@
 #define UI_OZONE_PLATFORM_WAYLAND_WAYLAND_CONNECTION_H_
 
 #include <map>
+#include <memory>
+#include <string>
+#include <vector>
 
 #include "base/files/file.h"
 #include "base/message_loop/message_pump_libevent.h"
@@ -32,7 +35,7 @@ class WaylandShmBufferManager;
 class WaylandOutputManager;
 class WaylandWindow;
 
-// TODO: factor out PlatformClipboard to a separate class.
+// TODO(crbug.com/942203): factor out PlatformClipboard to a separate class.
 class WaylandConnection : public PlatformEventSource,
                           public PlatformClipboard,
                           public ozone::mojom::WaylandConnection,
@@ -114,7 +117,7 @@ class WaylandConnection : public PlatformEventSource,
   WaylandPointer* pointer() const { return pointer_.get(); }
 
   WaylandDataSource* drag_data_source() const {
-    return drag_data_source_.get();
+    return dragdrop_data_source_.get();
   }
 
   WaylandOutputManager* wayland_output_manager() const {
@@ -237,8 +240,8 @@ class WaylandConnection : public PlatformEventSource,
 
   std::unique_ptr<WaylandDataDeviceManager> data_device_manager_;
   std::unique_ptr<WaylandDataDevice> data_device_;
-  std::unique_ptr<WaylandDataSource> data_source_;
-  std::unique_ptr<WaylandDataSource> drag_data_source_;
+  std::unique_ptr<WaylandDataSource> clipboard_data_source_;
+  std::unique_ptr<WaylandDataSource> dragdrop_data_source_;
   std::unique_ptr<WaylandKeyboard> keyboard_;
   std::unique_ptr<WaylandOutputManager> wayland_output_manager_;
   std::unique_ptr<WaylandPointer> pointer_;
diff --git a/ui/ozone/platform/wayland/wayland_data_device.cc b/ui/ozone/platform/wayland/wayland_data_device.cc
index 92e96de09489..225cf5370e6d 100644
--- a/ui/ozone/platform/wayland/wayland_data_device.cc
+++ b/ui/ozone/platform/wayland/wayland_data_device.cc
@@ -4,6 +4,9 @@
 
 #include "ui/ozone/platform/wayland/wayland_data_device.h"
 
+#include <algorithm>
+#include <utility>
+
 #include "base/bind.h"
 #include "base/memory/shared_memory.h"
 #include "base/strings/string16.h"
@@ -67,10 +70,6 @@ void AddToOSExchangeData(const std::string& data,
 }  // namespace
 
 // static
-const wl_callback_listener WaylandDataDevice::callback_listener_ = {
-    WaylandDataDevice::SyncCallback,
-};
-
 WaylandDataDevice::WaylandDataDevice(WaylandConnection* connection,
                                      wl_data_device* data_device)
     : data_device_(data_device),
@@ -99,10 +98,10 @@ void WaylandDataDevice::RequestSelectionData(const std::string& mime_type) {
 
   // Ensure there is not pending operation to be performed by the compositor,
   // otherwise read(..) can block awaiting data to be sent to pipe.
-  read_from_fd_closure_ =
+  deferred_read_closure_ =
       base::BindOnce(&WaylandDataDevice::ReadClipboardDataFromFD,
                      base::Unretained(this), std::move(fd), mime_type);
-  RegisterSyncCallback();
+  RegisterDeferredReadCallback();
 }
 
 void WaylandDataDevice::RequestDragData(
@@ -116,10 +115,10 @@ void WaylandDataDevice::RequestDragData(
 
   // Ensure there is not pending operation to be performed by the compositor,
   // otherwise read(..) can block awaiting data to be sent to pipe.
-  read_from_fd_closure_ = base::BindOnce(&WaylandDataDevice::ReadDragDataFromFD,
-                                         base::Unretained(this), std::move(fd),
-                                         std::move(callback));
-  RegisterSyncCallback();
+  deferred_read_closure_ = base::BindOnce(
+      &WaylandDataDevice::ReadDragDataFromFD, base::Unretained(this),
+      std::move(fd), std::move(callback));
+  RegisterDeferredReadCallback();
 }
 
 void WaylandDataDevice::DeliverDragData(const std::string& mime_type,
@@ -195,13 +194,6 @@ void WaylandDataDevice::ReadDragDataFromFD(
   std::move(callback).Run(contents);
 }
 
-void WaylandDataDevice::RegisterSyncCallback() {
-  DCHECK(!sync_callback_);
-  sync_callback_.reset(wl_display_sync(connection_->display()));
-  wl_callback_add_listener(sync_callback_.get(), &callback_listener_, this);
-  wl_display_flush(connection_->display());
-}
-
 void WaylandDataDevice::ReadDataFromFD(base::ScopedFD fd,
                                        std::string* contents) {
   DCHECK(contents);
@@ -363,15 +355,25 @@ void WaylandDataDevice::OnSelection(void* data,
   self->selection_offer_->EnsureTextMimeTypeIfNeeded();
 }
 
-void WaylandDataDevice::SyncCallback(void* data,
-                                     struct wl_callback* cb,
-                                     uint32_t time) {
-  WaylandDataDevice* data_device = static_cast<WaylandDataDevice*>(data);
-  DCHECK(data_device);
+void WaylandDataDevice::RegisterDeferredReadCallback() {
+  static const wl_callback_listener kDeferredReadListener = {
+      WaylandDataDevice::DeferredReadCallback};
 
-  std::move(data_device->read_from_fd_closure_).Run();
-  DCHECK(data_device->read_from_fd_closure_.is_null());
-  data_device->sync_callback_.reset();
+  DCHECK(!deferred_read_callback_);
+  deferred_read_callback_.reset(wl_display_sync(connection_->display()));
+  wl_callback_add_listener(deferred_read_callback_.get(),
+                           &kDeferredReadListener, this);
+  wl_display_flush(connection_->display());
+}
+
+void WaylandDataDevice::DeferredReadCallback(void* data,
+                                             struct wl_callback* cb,
+                                             uint32_t time) {
+  auto* data_device = static_cast<WaylandDataDevice*>(data);
+  DCHECK(data_device);
+  DCHECK(!data_device->deferred_read_closure_.is_null());
+  std::move(data_device->deferred_read_closure_).Run();
+  data_device->deferred_read_callback_.reset();
 }
 
 void WaylandDataDevice::CreateDragImage(const SkBitmap* bitmap) {
diff --git a/ui/ozone/platform/wayland/wayland_data_device.h b/ui/ozone/platform/wayland/wayland_data_device.h
index c3953993e08b..6efad52af789 100644
--- a/ui/ozone/platform/wayland/wayland_data_device.h
+++ b/ui/ozone/platform/wayland/wayland_data_device.h
@@ -6,8 +6,11 @@
 #define UI_OZONE_PLATFORM_WAYLAND_WAYLAND_DATA_DEVICE_H_
 
 #include <wayland-client.h>
+
 #include <list>
+#include <memory>
 #include <string>
+#include <vector>
 
 #include "base/callback.h"
 #include "base/files/scoped_file.h"
@@ -67,9 +70,6 @@ class WaylandDataDevice {
       base::ScopedFD fd,
       base::OnceCallback<void(const std::string&)> callback);
 
-  // Registers display sync callback. Once it's called, it's reset.
-  void RegisterSyncCallback();
-
   // Helper function to read data from fd.
   void ReadDataFromFD(base::ScopedFD fd, std::string* contents);
 
@@ -108,7 +108,14 @@ class WaylandDataDevice {
                           wl_data_device* data_device,
                           wl_data_offer* id);
 
-  static void SyncCallback(void* data, struct wl_callback* cb, uint32_t time);
+  // Registers DeferredReadCallback as display sync callback listener, to
+  // ensure there is no pending operation to be performed by the compositor,
+  // otherwise read(..) could block awaiting data to be sent to pipe. It is
+  // reset once it's called.
+  void RegisterDeferredReadCallback();
+  static void DeferredReadCallback(void* data,
+                                   struct wl_callback* cb,
+                                   uint32_t time);
 
   bool CreateSHMBuffer(const gfx::Size& size);
   void CreateDragImage(const SkBitmap* bitmap);
@@ -151,9 +158,8 @@ class WaylandDataDevice {
   WaylandWindow* window_ = nullptr;
 
   // Make sure server has written data on the pipe, before block on read().
-  static const wl_callback_listener callback_listener_;
-  base::OnceClosure read_from_fd_closure_;
-  wl::Object<wl_callback> sync_callback_;
+  base::OnceClosure deferred_read_closure_;
+  wl::Object<wl_callback> deferred_read_callback_;
 
   bool is_handling_dropped_data_ = false;
   bool is_leaving_ = false;
diff --git a/ui/ozone/platform/wayland/wayland_data_device_manager.cc b/ui/ozone/platform/wayland/wayland_data_device_manager.cc
index 4c20f3fb4a31..25737b78ee81 100644
--- a/ui/ozone/platform/wayland/wayland_data_device_manager.cc
+++ b/ui/ozone/platform/wayland/wayland_data_device_manager.cc
@@ -5,6 +5,7 @@
 #include "ui/ozone/platform/wayland/wayland_data_device_manager.h"
 
 #include "ui/ozone/platform/wayland/wayland_connection.h"
+#include "ui/ozone/platform/wayland/wayland_data_source.h"
 
 namespace ui {
 
@@ -24,8 +25,10 @@ wl_data_device* WaylandDataDeviceManager::GetDevice() {
                                                 connection_->seat());
 }
 
-wl_data_source* WaylandDataDeviceManager::CreateSource() {
-  return wl_data_device_manager_create_data_source(device_manager_.get());
+std::unique_ptr<WaylandDataSource> WaylandDataDeviceManager::CreateSource() {
+  wl_data_source* data_source =
+      wl_data_device_manager_create_data_source(device_manager_.get());
+  return std::make_unique<WaylandDataSource>(data_source, connection_);
 }
 
 }  // namespace ui
diff --git a/ui/ozone/platform/wayland/wayland_data_device_manager.h b/ui/ozone/platform/wayland/wayland_data_device_manager.h
index f444d7d38575..18f5b077638b 100644
--- a/ui/ozone/platform/wayland/wayland_data_device_manager.h
+++ b/ui/ozone/platform/wayland/wayland_data_device_manager.h
@@ -7,12 +7,15 @@
 
 #include <wayland-client.h>
 
+#include <memory>
+
 #include "base/macros.h"
 #include "ui/ozone/platform/wayland/wayland_object.h"
 
 namespace ui {
 
 class WaylandConnection;
+class WaylandDataSource;
 
 class WaylandDataDeviceManager {
  public:
@@ -21,7 +24,7 @@ class WaylandDataDeviceManager {
   ~WaylandDataDeviceManager();
 
   wl_data_device* GetDevice();
-  wl_data_source* CreateSource();
+  std::unique_ptr<WaylandDataSource> CreateSource();
 
  private:
   wl::Object<wl_data_device_manager> device_manager_;
-- 
2.17.1

