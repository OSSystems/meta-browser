Upstream-Status: Backport

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From 022597169ecd2a9bdfb70ca6c4f5e84432b2f98b Mon Sep 17 00:00:00 2001
From: Nick Diego Yamane <nickdiego@igalia.com>
Date: Wed, 13 Feb 2019 08:54:17 +0000
Subject: [PATCH 17/42] ozone/wayland: Make buffer manager resistant to event
 order deviations

Currently WaylandBufferManager makes assumptions regarding the
order that frame and presentation feedback events are fired,
particularly frame callback is expected to come before each
feedback presented/discarded call. However, some wayland compositors
may not always fire Presentation and Frame events in the same order,
Sway (https://swaywm.org) is a concrete example of this.

This is causing crashes at startup in builds with dcheck_always_on
and 'Context lost because SwapBuffers failed' errors with frequent
crashes in release builds. To fix these issues, this CL modifies
WaylandBufferManager, getting rid of the assumptions mentioned above
thus making it more resistant to compositor implementation differences,
etc.

Bug: 931030
Change-Id: I23dd3e1f442a4a754a0f8bb128acce39aeffe603
Reviewed-on: https://chromium-review.googlesource.com/c/1465781
Commit-Queue: Nick Diego Yamane <nickdiego@igalia.com>
Reviewed-by: Maksim Sisov <msisov@igalia.com>
Cr-Commit-Position: refs/heads/master@{#631604}
---
 .../wayland/wayland_buffer_manager.cc         | 35 +++++++++++++------
 1 file changed, 24 insertions(+), 11 deletions(-)

diff --git a/ui/ozone/platform/wayland/wayland_buffer_manager.cc b/ui/ozone/platform/wayland/wayland_buffer_manager.cc
index 213605e1a1ec..862989e10cfa 100644
--- a/ui/ozone/platform/wayland/wayland_buffer_manager.cc
+++ b/ui/ozone/platform/wayland/wayland_buffer_manager.cc
@@ -407,13 +407,16 @@ void WaylandBufferManager::FrameCallbackDone(void* data,
       buffer->swap_result = gfx::SwapResult::SWAP_ACK;
       buffer->wl_frame_callback.reset();
 
-      // If presentation feedback is not supported, use fake feedback and
-      // trigger the callback.
+      // If presentation feedback is not supported, use a fake feedback
       if (!self->connection_->presentation()) {
         buffer->feedback = gfx::PresentationFeedback(base::TimeTicks::Now(),
                                                      base::TimeDelta(), 0);
-        self->OnBufferSwapped(buffer);
       }
+      // If presentation feedback event either has already been fired or
+      // has not been set, trigger swap callback.
+      if (!buffer->wp_presentation_feedback)
+        self->OnBufferSwapped(buffer);
+
       return;
     }
   }
@@ -446,16 +449,20 @@ void WaylandBufferManager::FeedbackPresented(
   for (auto& item : self->buffers_) {
     Buffer* buffer = item.second.get();
     if (buffer->wp_presentation_feedback.get() == wp_presentation_feedback) {
-      // Frame callback must come before a feedback is presented.
-      DCHECK(!buffer->wl_frame_callback);
-
       buffer->feedback = gfx::PresentationFeedback(
           GetPresentationFeedbackTimeStamp(tv_sec_hi, tv_sec_lo, tv_nsec),
           base::TimeDelta::FromNanoseconds(refresh),
           GetPresentationKindFlags(flags));
-
       buffer->wp_presentation_feedback.reset();
-      self->OnBufferSwapped(buffer);
+
+      // Some compositors not always fire PresentationFeedback and Frame
+      // events in the same order (i.e, frame callbacks coming always before
+      // feedback presented/discaded ones). So, check FrameCallbackDone has
+      // already been called at this point, if yes, trigger the swap callback.
+      // otherwise it will be triggered in the upcoming frame callback.
+      if (!buffer->wl_frame_callback)
+        self->OnBufferSwapped(buffer);
+
       return;
     }
   }
@@ -474,11 +481,17 @@ void WaylandBufferManager::FeedbackDiscarded(
     Buffer* buffer = item.second.get();
     if (buffer->wp_presentation_feedback.get() == wp_presentation_feedback) {
       // Frame callback must come before a feedback is presented.
-      DCHECK(!buffer->wl_frame_callback);
       buffer->feedback = gfx::PresentationFeedback::Failure();
-
       buffer->wp_presentation_feedback.reset();
-      self->OnBufferSwapped(buffer);
+
+      // Some compositors not always fire PresentationFeedback and Frame
+      // events in the same order (i.e, frame callbacks coming always before
+      // feedback presented/discaded ones). So, check FrameCallbackDone has
+      // already been called at this point, if yes, trigger the swap callback.
+      // Otherwise it will be triggered in the upcoming frame callback.
+      if (!buffer->wl_frame_callback)
+        self->OnBufferSwapped(buffer);
+
       return;
     }
   }
-- 
2.17.1

