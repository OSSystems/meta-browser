Upstream-Status: Backport

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From bbede5f3e732e49a10b7c94aa29e3c5a06c0636a Mon Sep 17 00:00:00 2001
From: Nick Diego Yamane <nickdiego@igalia.com>
Date: Wed, 13 Mar 2019 17:44:58 +0000
Subject: [PATCH 02/27] ozone/wayland: Fix flaky DataDevice unit tests

This CL fixes 2 issues which were causing flakiness on Drag &
Drop tests:

(1) Most of the times, tests using wl::TestDataSource functions
were not waiting for the async read callback to be performed to finish.
Fixing this revealed issue (2).

(2) The test has been passing the wrong mime type when calling
TestDataSource::ReadData(). So no data was being written into pipe
fd at client side (WaylandDataSource), so the string returned in
the test callback (empty '') wasn't matching the expected one.

Additionally this CL, aims to improve TestDataSource::SendData
documentation, adding some comments explaing why each pass is intended
to.

Bug: 926101
Change-Id: Ic17ae793caca085a4e57b5913b6ad0736dcf36bf
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/1518601
Reviewed-by: Maksim Sisov <msisov@igalia.com>
Commit-Queue: Nick Yamane <nickdiego@igalia.com>
Cr-Commit-Position: refs/heads/master@{#640400}
---
 .../platform/wayland/test/test_data_source.cc |  6 ++++
 .../wayland/wayland_data_device_unittest.cc   | 35 +++++++++++--------
 2 files changed, 27 insertions(+), 14 deletions(-)

diff --git a/ui/ozone/platform/wayland/test/test_data_source.cc b/ui/ozone/platform/wayland/test/test_data_source.cc
index 657ce29d5a35..ade78494889b 100644
--- a/ui/ozone/platform/wayland/test/test_data_source.cc
+++ b/ui/ozone/platform/wayland/test/test_data_source.cc
@@ -84,8 +84,14 @@ void TestDataSource::ReadData(ReadDataCallback callback) {
   base::ScopedFD write_fd;
   CreatePipe(&read_fd, &write_fd);
 
+  // 1. Send the SEND event to notify client's DataSource that it's time
+  // to send us the drag data thrhough the write_fd file descriptor.
   wl_data_source_send_send(resource(), kTextMimeTypeUtf8, write_fd.get());
+  wl_client_flush(wl_resource_get_client(resource()));
 
+  // 2. Schedule the ReadDataOnWorkerThread task. The result of read
+  // operation will be delivered through TestDataSource::DataReadCb,
+  // which will then call the callback function requested by the caller.
   PostTaskAndReplyWithResult(
       task_runner_.get(), FROM_HERE,
       base::BindOnce(&ReadDataOnWorkerThread, std::move(read_fd)),
diff --git a/ui/ozone/platform/wayland/wayland_data_device_unittest.cc b/ui/ozone/platform/wayland/wayland_data_device_unittest.cc
index 219ff760fece..5aff53a64c41 100644
--- a/ui/ozone/platform/wayland/wayland_data_device_unittest.cc
+++ b/ui/ozone/platform/wayland/wayland_data_device_unittest.cc
@@ -92,18 +92,21 @@ class WaylandDataDeviceManagerTest : public WaylandTest {
 
 TEST_P(WaylandDataDeviceManagerTest, WriteToClipboard) {
   // The client writes data to the clipboard ...
-  auto callback = base::BindOnce([]() {});
   clipboard_client_->SetData(wl::kSampleClipboardText, wl::kTextMimeTypeUtf8,
-                             std::move(callback));
+                             base::BindOnce([]() {}));
   Sync();
 
   // ... and the server reads it.
-  data_device_manager_->data_source()->ReadData(
-      base::BindOnce([](const std::vector<uint8_t>& data) {
+  base::RunLoop run_loop;
+  auto callback = base::BindOnce(
+      [](base::RunLoop* loop, const std::vector<uint8_t>& data) {
         std::string string_data(data.begin(), data.end());
         EXPECT_EQ(wl::kSampleClipboardText, string_data);
-      }));
-  Sync();
+        loop->Quit();
+      },
+      &run_loop);
+  data_device_manager_->data_source()->ReadData(std::move(callback));
+  run_loop.Run();
 }
 
 TEST_P(WaylandDataDeviceManagerTest, ReadFromClibpard) {
@@ -153,17 +156,21 @@ TEST_P(WaylandDataDeviceManagerTest, StartDrag) {
   connection_->StartDrag(*os_exchange_data, operation);
 
   WaylandDataSource::DragDataMap data;
-  data[wl::kTextMimeTypeText] = wl::kSampleTextForDragAndDrop;
+  data[wl::kTextMimeTypeUtf8] = wl::kSampleTextForDragAndDrop;
   connection_->drag_data_source()->SetDragData(data);
-
   Sync();
-  // The server reads the data and the callback gets it.
-  data_device_manager_->data_source()->ReadData(
-      base::BindOnce([](const std::vector<uint8_t>& data) {
-        std::string string_data(data.begin(), data.end());
-        EXPECT_EQ(wl::kSampleTextForDragAndDrop, string_data);
-      }));
 
+  // The server reads the data and the callback gets it.
+  base::RunLoop run_loop;
+  auto callback = base::BindOnce(
+      [](base::RunLoop* loop, const std::vector<uint8_t>& data) {
+        std::string result(data.begin(), data.end());
+        EXPECT_EQ(wl::kSampleTextForDragAndDrop, result);
+        loop->Quit();
+      },
+      &run_loop);
+  data_device_manager_->data_source()->ReadData(std::move(callback));
+  run_loop.Run();
   window_->set_pointer_focus(restored_focus);
 }
 
-- 
2.20.1

