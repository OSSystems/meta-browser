Upstream-Status: Backport

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From 94d61e16a32bde3ff86a675c330b48bd58991218 Mon Sep 17 00:00:00 2001
From: Nick Diego Yamane <nickdiego@igalia.com>
Date: Wed, 27 Mar 2019 15:13:47 +0000
Subject: [PATCH 16/27] ozone/wayland: Introduce WaylandShmBuffer class

Cl adds WaylandShmBuffer class, which basically unifies functions and
data regarding wayland shm buffers, currently spread into wayland_util,
data device and cursor implementation, thus reducing code redundancy and
improving on current awkward CreateSHMBuffer/DrawBitmapIntoSHMB API.

This new class is meant to cover both: 1) local buffers created and
mapped within local memory address space to draw bitmaps into (as
WaylandDataDevice and WaylandCursor do); and 2) buffers created using
file descriptor sent by other process throuhg IPC (e.g: ShmBufferManager
and buffers requested by GPU process/thread). This change covers case 1,
and a followup CL will add support for case 2.

Bug: 578890
Change-Id: I4ab853166a6fed4e16d85988495313ed84575990
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/1535493
Commit-Queue: Nick Yamane <nickdiego@igalia.com>
Reviewed-by: Maksim Sisov <msisov@igalia.com>
Cr-Commit-Position: refs/heads/master@{#644805}
---
 ui/ozone/platform/wayland/BUILD.gn            |  2 +
 ui/ozone/platform/wayland/wayland_cursor.cc   | 20 +++---
 ui/ozone/platform/wayland/wayland_cursor.h    | 12 +---
 .../platform/wayland/wayland_data_device.cc   | 31 +++------
 .../platform/wayland/wayland_data_device.h    | 10 +--
 .../platform/wayland/wayland_shm_buffer.cc    | 64 +++++++++++++++++
 .../platform/wayland/wayland_shm_buffer.h     | 64 +++++++++++++++++
 ui/ozone/platform/wayland/wayland_util.cc     | 68 ++++++-------------
 ui/ozone/platform/wayland/wayland_util.h      | 19 ++----
 9 files changed, 178 insertions(+), 112 deletions(-)
 create mode 100644 ui/ozone/platform/wayland/wayland_shm_buffer.cc
 create mode 100644 ui/ozone/platform/wayland/wayland_shm_buffer.h

diff --git a/ui/ozone/platform/wayland/BUILD.gn b/ui/ozone/platform/wayland/BUILD.gn
index 2dbd96547d3b..76208d9c2d1d 100644
--- a/ui/ozone/platform/wayland/BUILD.gn
+++ b/ui/ozone/platform/wayland/BUILD.gn
@@ -62,6 +62,8 @@ source_set("wayland") {
     "wayland_screen.h",
     "wayland_shared_memory_buffer_manager.cc",
     "wayland_shared_memory_buffer_manager.h",
+    "wayland_shm_buffer.cc",
+    "wayland_shm_buffer.h",
     "wayland_surface_factory.cc",
     "wayland_surface_factory.h",
     "wayland_touch.cc",
diff --git a/ui/ozone/platform/wayland/wayland_cursor.cc b/ui/ozone/platform/wayland/wayland_cursor.cc
index deb864165580..e9dfed6e122a 100644
--- a/ui/ozone/platform/wayland/wayland_cursor.cc
+++ b/ui/ozone/platform/wayland/wayland_cursor.cc
@@ -47,15 +47,13 @@ void WaylandCursor::UpdateBitmap(const std::vector<SkBitmap>& cursor_image,
     return HideCursor(serial);
 
   const SkBitmap& image = cursor_image[0];
-  SkISize size = image.dimensions();
-  if (size.isEmpty())
+  if (image.dimensions().isEmpty())
     return HideCursor(serial);
 
-  gfx::Size image_size = gfx::SkISizeToSize(size);
-  auto shared_memory = std::make_unique<base::SharedMemory>();
-  wl::Object<wl_buffer> buffer(
-      wl::CreateSHMBuffer(image_size, shared_memory.get(), shm_));
-  if (!buffer) {
+  gfx::Size image_size = gfx::SkISizeToSize(image.dimensions());
+  WaylandShmBuffer buffer(shm_, image_size);
+
+  if (!buffer.IsValid()) {
     LOG(ERROR) << "Failed to create SHM buffer for Cursor Bitmap.";
     return HideCursor(serial);
   }
@@ -65,7 +63,7 @@ void WaylandCursor::UpdateBitmap(const std::vector<SkBitmap>& cursor_image,
   };
   wl_buffer_add_listener(buffer.get(), &wl_buffer_listener, this);
 
-  wl::DrawBitmapToSHMB(image_size, *shared_memory, image);
+  wl::DrawBitmap(image, &buffer);
 
   wl_pointer_set_cursor(input_pointer_, serial, pointer_surface_.get(),
                         hotspot.x(), hotspot.y());
@@ -74,10 +72,8 @@ void WaylandCursor::UpdateBitmap(const std::vector<SkBitmap>& cursor_image,
   wl_surface_attach(pointer_surface_.get(), buffer.get(), 0, 0);
   wl_surface_commit(pointer_surface_.get());
 
-  buffers_.emplace(
-      buffer.get(),
-      std::pair<wl::Object<wl_buffer>, std::unique_ptr<base::SharedMemory>>(
-          std::move(buffer), std::move(shared_memory)));
+  auto* address = buffer.get();
+  buffers_.emplace(address, std::move(buffer));
 }
 
 void WaylandCursor::HideCursor(uint32_t serial) {
diff --git a/ui/ozone/platform/wayland/wayland_cursor.h b/ui/ozone/platform/wayland/wayland_cursor.h
index 00de27ee9e84..7f09394fc738 100644
--- a/ui/ozone/platform/wayland/wayland_cursor.h
+++ b/ui/ozone/platform/wayland/wayland_cursor.h
@@ -15,13 +15,10 @@
 #include "base/macros.h"
 #include "third_party/skia/include/core/SkSurface.h"
 #include "ui/ozone/platform/wayland/wayland_object.h"
+#include "ui/ozone/platform/wayland/wayland_shm_buffer.h"
 
 class SkBitmap;
 
-namespace base {
-class SharedMemory;
-}
-
 namespace gfx {
 class Point;
 }
@@ -61,14 +58,9 @@ class WaylandCursor {
   wl_pointer* input_pointer_ = nullptr;  // Owned by WaylandPointer.
 
   // Holds the buffers and their memory until the compositor releases them.
-  base::flat_map<
-      wl_buffer*,
-      std::pair<wl::Object<wl_buffer>, std::unique_ptr<base::SharedMemory>>>
-      buffers_;
+  base::flat_map<wl_buffer*, WaylandShmBuffer> buffers_;
   wl::Object<wl_surface> pointer_surface_;
 
-  sk_sp<SkSurface> sk_surface_;
-
   DISALLOW_COPY_AND_ASSIGN(WaylandCursor);
 };
 
diff --git a/ui/ozone/platform/wayland/wayland_data_device.cc b/ui/ozone/platform/wayland/wayland_data_device.cc
index dfe42f2bef37..8892c3b06d86 100644
--- a/ui/ozone/platform/wayland/wayland_data_device.cc
+++ b/ui/ozone/platform/wayland/wayland_data_device.cc
@@ -8,7 +8,6 @@
 #include <utility>
 
 #include "base/bind.h"
-#include "base/memory/shared_memory.h"
 #include "base/strings/string16.h"
 #include "base/strings/utf_string_conversions.h"
 #include "third_party/skia/include/core/SkBitmap.h"
@@ -71,9 +70,7 @@ void AddToOSExchangeData(const std::string& data,
 // static
 WaylandDataDevice::WaylandDataDevice(WaylandConnection* connection,
                                      wl_data_device* data_device)
-    : data_device_(data_device),
-      connection_(connection),
-      shared_memory_(new base::SharedMemory()) {
+    : data_device_(data_device), connection_(connection) {
   static const struct wl_data_device_listener kDataDeviceListener = {
       WaylandDataDevice::OnDataOffer, WaylandDataDevice::OnEnter,
       WaylandDataDevice::OnLeave,     WaylandDataDevice::OnMotion,
@@ -81,12 +78,7 @@ WaylandDataDevice::WaylandDataDevice(WaylandConnection* connection,
   wl_data_device_add_listener(data_device_.get(), &kDataDeviceListener, this);
 }
 
-WaylandDataDevice::~WaylandDataDevice() {
-  if (!shared_memory_->handle().GetHandle())
-    return;
-  shared_memory_->Unmap();
-  shared_memory_->Close();
-}
+WaylandDataDevice::~WaylandDataDevice() = default;
 
 bool WaylandDataDevice::RequestSelectionData(const std::string& mime_type) {
   if (!selection_offer_)
@@ -388,22 +380,19 @@ void WaylandDataDevice::DrawDragIcon(const SkBitmap* icon_bitmap) {
   DCHECK(!icon_bitmap->empty());
   gfx::Size size(icon_bitmap->width(), icon_bitmap->height());
 
-  if (size != icon_buffer_size_) {
-    wl_buffer* buffer =
-        wl::CreateSHMBuffer(size, shared_memory_.get(), connection_->shm());
-    if (!buffer) {
+  if (!shm_buffer_ || shm_buffer_->size() != size) {
+    shm_buffer_.reset(new WaylandShmBuffer(connection_->shm(), size));
+    if (!shm_buffer_->IsValid()) {
       LOG(ERROR) << "Failed to create drag icon buffer.";
       return;
     }
-    buffer_.reset(buffer);
-    icon_buffer_size_ = size;
   }
-  wl::DrawBitmapToSHMB(icon_buffer_size_, *shared_memory_, *icon_bitmap);
+  wl::DrawBitmap(*icon_bitmap, shm_buffer_.get());
 
-  wl_surface_attach(icon_surface_.get(), buffer_.get(), 0, 0);
-  wl_surface_damage(icon_surface_.get(), 0, 0, icon_buffer_size_.width(),
-                    icon_buffer_size_.height());
-  wl_surface_commit(icon_surface_.get());
+  wl_surface* surface = icon_surface_.get();
+  wl_surface_attach(surface, shm_buffer_->get(), 0, 0);
+  wl_surface_damage(surface, 0, 0, size.width(), size.height());
+  wl_surface_commit(surface);
 }
 
 void WaylandDataDevice::HandleUnprocessedMimeTypes() {
diff --git a/ui/ozone/platform/wayland/wayland_data_device.h b/ui/ozone/platform/wayland/wayland_data_device.h
index dcfcd83c16e5..088eedce6d45 100644
--- a/ui/ozone/platform/wayland/wayland_data_device.h
+++ b/ui/ozone/platform/wayland/wayland_data_device.h
@@ -18,13 +18,10 @@
 #include "ui/gfx/geometry/size.h"
 #include "ui/ozone/platform/wayland/wayland_data_offer.h"
 #include "ui/ozone/platform/wayland/wayland_object.h"
+#include "ui/ozone/platform/wayland/wayland_shm_buffer.h"
 
 class SkBitmap;
 
-namespace base {
-class SharedMemory;
-}
-
 namespace ui {
 
 class OSExchangeData;
@@ -172,11 +169,8 @@ class WaylandDataDevice {
   bool is_handling_dropped_data_ = false;
   bool is_leaving_ = false;
 
-  std::unique_ptr<base::SharedMemory> shared_memory_;
-
-  wl::Object<wl_buffer> buffer_;
+  std::unique_ptr<WaylandShmBuffer> shm_buffer_ = nullptr;
   wl::Object<wl_surface> icon_surface_;
-  gfx::Size icon_buffer_size_;
 
   // Mime types to be handled.
   std::list<std::string> unprocessed_mime_types_;
diff --git a/ui/ozone/platform/wayland/wayland_shm_buffer.cc b/ui/ozone/platform/wayland/wayland_shm_buffer.cc
new file mode 100644
index 000000000000..98f48ddfba3c
--- /dev/null
+++ b/ui/ozone/platform/wayland/wayland_shm_buffer.cc
@@ -0,0 +1,64 @@
+// Copyright 2019 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "ui/ozone/platform/wayland/wayland_shm_buffer.h"
+
+#include "ui/gfx/skia_util.h"
+#include "ui/ozone/platform/wayland/wayland_connection.h"
+
+namespace {
+
+const uint32_t kShmFormat = WL_SHM_FORMAT_ARGB8888;
+
+}  // namespace
+
+namespace ui {
+
+WaylandShmBuffer::WaylandShmBuffer(wl_shm* shm, const gfx::Size& size)
+    : size_(size), shared_memory_(std::make_unique<base::SharedMemory>()) {
+  Initialize(shm);
+}
+
+WaylandShmBuffer::~WaylandShmBuffer() = default;
+WaylandShmBuffer::WaylandShmBuffer(WaylandShmBuffer&& buffer) = default;
+WaylandShmBuffer& WaylandShmBuffer::operator=(WaylandShmBuffer&& buffer) =
+    default;
+
+void WaylandShmBuffer::Initialize(wl_shm* shm) {
+  DCHECK(shm);
+
+  SkImageInfo info = SkImageInfo::MakeN32Premul(size_.width(), size_.height());
+  int stride = info.minRowBytes();
+
+  size_t buffer_size = info.computeByteSize(stride);
+  if (buffer_size == SIZE_MAX)
+    return;
+
+  if (!shared_memory_->CreateAndMapAnonymous(buffer_size)) {
+    PLOG(ERROR) << "Create and mmap failed.";
+    return;
+  }
+
+  auto handle = shared_memory_->handle().GetHandle();
+  wl::Object<wl_shm_pool> pool(wl_shm_create_pool(shm, handle, buffer_size));
+
+  auto* new_buffer = wl_shm_pool_create_buffer(
+      pool.get(), 0, size_.width(), size_.height(), stride, kShmFormat);
+  if (!new_buffer) {
+    shared_memory_->Unmap();
+    shared_memory_->Close();
+    return;
+  }
+
+  stride_ = stride;
+  buffer_.reset(new_buffer);
+}
+
+uint8_t* WaylandShmBuffer::GetMemory() const {
+  if (!IsValid() || !shared_memory_)
+    return nullptr;
+  return static_cast<uint8_t*>(shared_memory_->memory());
+}
+
+}  // namespace ui
diff --git a/ui/ozone/platform/wayland/wayland_shm_buffer.h b/ui/ozone/platform/wayland/wayland_shm_buffer.h
new file mode 100644
index 000000000000..d6644d4efe43
--- /dev/null
+++ b/ui/ozone/platform/wayland/wayland_shm_buffer.h
@@ -0,0 +1,64 @@
+// Copyright 2019 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef UI_OZONE_PLATFORM_WAYLAND_WAYLAND_SHM_BUFFER_H_
+#define UI_OZONE_PLATFORM_WAYLAND_WAYLAND_SHM_BUFFER_H_
+
+#include <wayland-client.h>
+
+#include <memory>
+
+#include "base/macros.h"
+#include "base/memory/shared_memory.h"
+#include "third_party/skia/include/core/SkCanvas.h"
+#include "third_party/skia/include/core/SkSurface.h"
+#include "ui/gfx/geometry/size.h"
+#include "ui/ozone/platform/wayland/wayland_object.h"
+
+namespace ui {
+
+// Encapsulates a Wayland SHM buffer, covering basically 2 use cases:
+// (1) Buffers created and mmap'ed locally to draw skia bitmap(s) into; and
+// (2) Buffers created using file descriptor (e.g: sent by gpu process/thread,
+// through IPC), not mapped in local memory address space.
+// WaylandShmBuffer is moveable, non-copyable, and is assumed to own both
+// wl_buffer and SharedMemory (if any) instance.
+class WaylandShmBuffer {
+ public:
+  WaylandShmBuffer(wl_shm* shm, const gfx::Size& size);
+  ~WaylandShmBuffer();
+
+  WaylandShmBuffer(WaylandShmBuffer&& buffer);
+  WaylandShmBuffer& operator=(WaylandShmBuffer&& buffer);
+
+  // Buffer is valid if it has been successfully created (and mapped, depending
+  // on the constructor used).
+  bool IsValid() const { return !!buffer_; }
+
+  // Returns the underlying raw memory buffer, if it's currently mapped into
+  // local address space, otherwise return nullptr
+  uint8_t* GetMemory() const;
+
+  // Returns the underlying wl_buffer pointer
+  wl_buffer* get() const { return buffer_.get(); }
+
+  // Returns the Size used to create this buffer
+  const gfx::Size& size() const { return size_; }
+
+  int stride() const { return stride_; }
+
+ private:
+  void Initialize(wl_shm* shm);
+
+  gfx::Size size_;
+  int stride_;
+  wl::Object<wl_buffer> buffer_;
+  std::unique_ptr<base::SharedMemory> shared_memory_ = nullptr;
+
+  DISALLOW_COPY_AND_ASSIGN(WaylandShmBuffer);
+};
+
+}  // namespace ui
+
+#endif  // UI_OZONE_PLATFORM_WAYLAND_WAYLAND_SHM_BUFFER_H_
diff --git a/ui/ozone/platform/wayland/wayland_util.cc b/ui/ozone/platform/wayland/wayland_util.cc
index 0cd05346df82..bd6b328c3862 100644
--- a/ui/ozone/platform/wayland/wayland_util.cc
+++ b/ui/ozone/platform/wayland/wayland_util.cc
@@ -7,18 +7,14 @@
 #include <xdg-shell-unstable-v5-client-protocol.h>
 #include <xdg-shell-unstable-v6-client-protocol.h>
 
-#include "base/memory/shared_memory.h"
-#include "third_party/skia/include/core/SkCanvas.h"
-#include "third_party/skia/include/core/SkSurface.h"
 #include "ui/base/hit_test.h"
-#include "ui/gfx/skia_util.h"
 #include "ui/ozone/platform/wayland/wayland_connection.h"
+#include "ui/ozone/platform/wayland/wayland_shm_buffer.h"
 
 namespace wl {
 
 namespace {
 
-const uint32_t kShmFormat = WL_SHM_FORMAT_ARGB8888;
 const SkColorType kColorType = kBGRA_8888_SkColorType;
 
 uint32_t IdentifyDirectionV5(int hittest) {
@@ -51,7 +47,6 @@ uint32_t IdentifyDirectionV5(int hittest) {
     default:
       direction = xdg_surface_resize_edge::XDG_SURFACE_RESIZE_EDGE_NONE;
       break;
-      ;
   }
   return direction;
 }
@@ -101,44 +96,28 @@ uint32_t IdentifyDirectionV6(int hittest) {
 
 }  // namespace
 
-wl_buffer* CreateSHMBuffer(const gfx::Size& size,
-                           base::SharedMemory* shared_memory,
-                           wl_shm* shm) {
-  SkImageInfo info = SkImageInfo::MakeN32Premul(size.width(), size.height());
-  int stride = info.minRowBytes();
-  size_t image_buffer_size = info.computeByteSize(stride);
-  if (image_buffer_size == SIZE_MAX)
-    return nullptr;
-
-  if (shared_memory->handle().GetHandle()) {
-    shared_memory->Unmap();
-    shared_memory->Close();
-  }
-
-  if (!shared_memory->CreateAndMapAnonymous(image_buffer_size)) {
-    LOG(ERROR) << "Create and mmap failed.";
-    return nullptr;
-  }
-
-  // TODO(tonikitoo): Use SharedMemory::requested_size instead of
-  // 'image_buffer_size'?
-  wl::Object<wl_shm_pool> pool;
-  pool.reset(wl_shm_create_pool(shm, shared_memory->handle().GetHandle(),
-                                image_buffer_size));
-  wl_buffer* buffer = wl_shm_pool_create_buffer(
-      pool.get(), 0, size.width(), size.height(), stride, kShmFormat);
-  return buffer;
+uint32_t IdentifyDirection(const ui::WaylandConnection& connection,
+                           int hittest) {
+  if (connection.shell_v6())
+    return IdentifyDirectionV6(hittest);
+  DCHECK(connection.shell());
+  return IdentifyDirectionV5(hittest);
 }
 
-void DrawBitmapToSHMB(const gfx::Size& size,
-                      const base::SharedMemory& shared_memory,
-                      const SkBitmap& bitmap) {
-  SkImageInfo info = SkImageInfo::MakeN32Premul(size.width(), size.height());
-  int stride = info.minRowBytes();
+bool DrawBitmap(const SkBitmap& bitmap, ui::WaylandShmBuffer* out_buffer) {
+  DCHECK(out_buffer);
+  DCHECK(out_buffer->GetMemory());
+  DCHECK(out_buffer->size() == gfx::Size(bitmap.width(), bitmap.height()));
+
+  auto* mapped_memory = out_buffer->GetMemory();
+  auto size = out_buffer->size();
   sk_sp<SkSurface> sk_surface = SkSurface::MakeRasterDirect(
       SkImageInfo::Make(size.width(), size.height(), kColorType,
                         kOpaque_SkAlphaType),
-      static_cast<uint8_t*>(shared_memory.memory()), stride);
+      mapped_memory, out_buffer->stride());
+
+  if (!sk_surface)
+    return false;
 
   // The |bitmap| contains ARGB image, so update our wl_buffer, which is
   // backed by a SkSurface.
@@ -146,17 +125,10 @@ void DrawBitmapToSHMB(const gfx::Size& size,
   bitmap.getBounds(&damage);
 
   // Clear to transparent in case |bitmap| is smaller than the canvas.
-  SkCanvas* canvas = sk_surface->getCanvas();
+  auto* canvas = sk_surface->getCanvas();
   canvas->clear(SK_ColorTRANSPARENT);
   canvas->drawBitmapRect(bitmap, damage, nullptr);
-}
-
-uint32_t IdentifyDirection(const ui::WaylandConnection& connection,
-                           int hittest) {
-  if (connection.shell_v6())
-    return IdentifyDirectionV6(hittest);
-  DCHECK(connection.shell());
-  return IdentifyDirectionV5(hittest);
+  return true;
 }
 
 }  // namespace wl
diff --git a/ui/ozone/platform/wayland/wayland_util.h b/ui/ozone/platform/wayland/wayland_util.h
index 6d4ae174db3f..0ed287702711 100644
--- a/ui/ozone/platform/wayland/wayland_util.h
+++ b/ui/ozone/platform/wayland/wayland_util.h
@@ -7,20 +7,15 @@
 
 #include <wayland-client.h>
 
-#include <stdint.h>
-
 #include "base/callback.h"
 #include "base/macros.h"
 #include "ui/ozone/platform/wayland/wayland_object.h"
 
 class SkBitmap;
 
-namespace base {
-class SharedMemory;
-}
-
 namespace ui {
 class WaylandConnection;
+class WaylandShmBuffer;
 }
 
 namespace gfx {
@@ -40,18 +35,16 @@ using RequestSizeCallback = base::OnceCallback<void(const gfx::Size&)>;
 using OnRequestBufferCallback =
     base::OnceCallback<void(wl::Object<struct wl_buffer>)>;
 
-wl_buffer* CreateSHMBuffer(const gfx::Size& size,
-                           base::SharedMemory* shared_memory,
-                           wl_shm* shm);
-void DrawBitmapToSHMB(const gfx::Size& size,
-                      const base::SharedMemory& shared_memory,
-                      const SkBitmap& bitmap);
-
 // Identifies the direction of the "hittest" for Wayland. |connection|
 // is used to identify whether values from shell v5 or v6 must be used.
 uint32_t IdentifyDirection(const ui::WaylandConnection& connection,
                            int hittest);
 
+// Draws |bitmap| into |out_buffer|. Returns if no errors occur, and false
+// otherwise. It assumes the bitmap fits into the buffer and buffer is
+// currently mmap'ed in memory address space.
+bool DrawBitmap(const SkBitmap& bitmap, ui::WaylandShmBuffer* out_buffer);
+
 }  // namespace wl
 
 #endif  // UI_OZONE_PLATFORM_WAYLAND_WAYLAND_UTIL_H_
-- 
2.20.1

