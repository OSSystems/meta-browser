Upstream-Status: Submitted [https://crrev.com/c/1273059]

* Submitted to upstream, waiting approval

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From 8343545c9c57eb3ace93799eab3b40d29d3c617a Mon Sep 17 00:00:00 2001
From: Maksim Sisov <msisov@igalia.com>
Date: Tue, 4 Dec 2018 10:19:10 +0200
Subject: [PATCH 14/16] Reland [ozone/common] Make gbm_wrapper to be compiled
 with system libgbm

Now, it is based on the https://crrev.com/c/1273455 patch
and is less divergent from the linux implementation.

The previous CL's commit message:

> This patch makes use of new minigbm APi names, which are aligned with
> Linux libgbm.
>
> Also, it defines certain definitions, which are different between
> libgbm and minigbm.
>
> What is more, it adds USING_MINIGBM for internal usage to be able
> to distinguish between system linux gbm and minigbm.
>
> Last but not least, drmPrimeHandleToFd is used in case of linux
> system libgbm in order to be able to get mappable fds per each
> plane, which is neede to add GpuMemoryBuffers support.
>
> Bug: 869206, 578890, 820047
> Change-Id: I0a743aef1c8bad2bb5792a58ab29abec45ea4585
> Reviewed-on: https://chromium-review.googlesource.com/1158234
> Commit-Queue: Maksim Sisov <msisov@igalia.com>
> Reviewed-by: Michael Spang <spang@chromium.org>
> Reviewed-by: Robert Kroeger <rjkroege@chromium.org>
> Cr-Commit-Position: refs/heads/master@{#589475}

Bug: 869206, 578890, 820047
Change-Id: I7b21ea2c3fc3300823459e31b72c9304b4967bce
---
 ui/ozone/common/linux/gbm_wrapper.cc | 92 ++++++++++++++++++++++++----
 1 file changed, 80 insertions(+), 12 deletions(-)

diff --git a/ui/ozone/common/linux/gbm_wrapper.cc b/ui/ozone/common/linux/gbm_wrapper.cc
index 15efd7bfeb32..fdf5aa62aa1a 100644
--- a/ui/ozone/common/linux/gbm_wrapper.cc
+++ b/ui/ozone/common/linux/gbm_wrapper.cc
@@ -4,7 +4,10 @@
 
 #include "ui/ozone/common/linux/gbm_wrapper.h"
 
+#include <drm_fourcc.h>
+#include <fcntl.h>
 #include <gbm.h>
+#include <xf86drm.h>
 
 #include "base/posix/eintr_wrapper.h"
 #include "third_party/skia/include/core/SkSurface.h"
@@ -21,6 +24,48 @@ namespace {
 #define GBM_BO_IMPORT_FD_PLANAR_5504 0x5504
 #define GBM_BO_IMPORT_FD_PLANAR_5505 0x5505
 
+int GetPlaneFdForBo(gbm_bo* bo, size_t plane) {
+#if defined(MINIGBM)
+  return gbm_bo_get_plane_fd(bo, plane);
+#else
+  const int plane_count = gbm_bo_get_plane_count(bo);
+  DCHECK(plane_count > 0 && plane < static_cast<size_t>(plane_count));
+
+  // System linux gbm (or Mesa gbm) does not provide fds per plane basis. Thus,
+  // get plane handle and use drm ioctl to get a prime fd out of it avoid having
+  // two different branches for minigbm and Mesa gbm here.
+  gbm_device* gbm_dev = gbm_bo_get_device(bo);
+  int dev_fd = gbm_device_get_fd(gbm_dev);
+  DCHECK_GE(dev_fd, 0);
+
+  const uint32_t plane_handle = gbm_bo_get_handle_for_plane(bo, plane).u32;
+  int fd = -1;
+  int ret;
+  // Use DRM_RDWR to allow the fd to be mappable in another process.
+  ret = drmPrimeHandleToFD(dev_fd, plane_handle, DRM_CLOEXEC | DRM_RDWR, &fd);
+
+  // Older DRM implementations blocked DRM_RDWR, but gave a read/write mapping
+  // anyways
+  if (ret)
+    ret = drmPrimeHandleToFD(dev_fd, plane_handle, DRM_CLOEXEC, &fd);
+
+  return ret ? ret : fd;
+#endif
+}
+
+size_t GetSizeOfPlane(gbm_bo* bo, size_t plane) {
+#if defined(MINIGBM)
+  return gbm_bo_get_plane_size(bo, plane);
+#else
+  // System linux gbm (or Mesa gbm) does not provide plane size. Thus, calculate
+  // it by ourselves and avoid having two different branches for minigbm and
+  // Mesa gbm here.
+  //
+  // TODO(msisov): Handle subsampled formats
+  return gbm_bo_get_height(bo) * gbm_bo_get_stride_for_plane(bo, plane);
+#endif
+}
+
 }  // namespace
 
 class Buffer final : public ui::GbmBuffer {
@@ -84,7 +129,7 @@ class Buffer final : public ui::GbmBuffer {
   }
   uint32_t GetPlaneHandle(size_t plane) const override {
     DCHECK_LT(plane, planes_.size());
-    return gbm_bo_get_plane_handle(bo_, plane).u32;
+    return gbm_bo_get_handle_for_plane(bo_, plane).u32;
   }
   uint32_t GetHandle() const override { return gbm_bo_get_handle(bo_).u32; }
   gfx::NativePixmapHandle ExportHandle() const override {
@@ -113,8 +158,14 @@ class Buffer final : public ui::GbmBuffer {
     DCHECK(!mmap_data_);
     uint32_t stride;
     void* addr;
-    addr = gbm_bo_map(bo_, 0, 0, gbm_bo_get_width(bo_), gbm_bo_get_height(bo_),
-                      GBM_BO_TRANSFER_READ_WRITE, &stride, &mmap_data_, 0);
+    addr =
+#if defined(MINIGBM)
+        gbm_bo_map(bo_, 0, 0, gbm_bo_get_width(bo_), gbm_bo_get_height(bo_),
+                   GBM_BO_TRANSFER_READ_WRITE, &stride, &mmap_data_, 0);
+#else
+        gbm_bo_map(bo_, 0, 0, gbm_bo_get_width(bo_), gbm_bo_get_height(bo_),
+                   GBM_BO_TRANSFER_READ_WRITE, &stride, &mmap_data_);
+#endif
 
     if (!addr)
       return nullptr;
@@ -155,11 +206,18 @@ std::unique_ptr<Buffer> CreateBufferForBO(struct gbm_bo* bo,
   std::vector<base::ScopedFD> fds;
   std::vector<gfx::NativePixmapPlane> planes;
 
-  const uint64_t modifier = gbm_bo_get_format_modifier(bo);
-  for (size_t i = 0; i < gbm_bo_get_num_planes(bo); ++i) {
+  const uint64_t modifier = gbm_bo_get_modifier(bo);
+  const int plane_count = gbm_bo_get_plane_count(bo);
+  // The Mesa's gbm implementation explicitly checks whether plane count <= and
+  // returns 1 if the condition is true. Nevertheless, use a DCHECK here to make
+  // sure the condition is not broken there.
+  DCHECK_GT(plane_count, 0);
+  // Ensure there are no differences in integer signs by casting any possible
+  // values to size_t.
+  for (size_t i = 0; i < static_cast<size_t>(plane_count); ++i) {
     // The fd returned by gbm_bo_get_fd is not ref-counted and need to be
     // kept open for the lifetime of the buffer.
-    base::ScopedFD fd(gbm_bo_get_plane_fd(bo, i));
+    base::ScopedFD fd(GetPlaneFdForBo(bo, i));
 
     // TODO(dcastagna): support multiple fds.
     // crbug.com/642410
@@ -172,9 +230,9 @@ std::unique_ptr<Buffer> CreateBufferForBO(struct gbm_bo* bo,
       fds.emplace_back(std::move(fd));
     }
 
-    planes.emplace_back(gbm_bo_get_plane_stride(bo, i),
-                        gbm_bo_get_plane_offset(bo, i),
-                        gbm_bo_get_plane_size(bo, i), modifier);
+    planes.emplace_back(gbm_bo_get_stride_for_plane(bo, i),
+                        gbm_bo_get_offset(bo, i), GetSizeOfPlane(bo, i),
+                        modifier);
   }
   return std::make_unique<Buffer>(bo, format, flags, modifier, std::move(fds),
                                   size, std::move(planes));
@@ -221,7 +279,10 @@ class Device final : public ui::GbmDevice {
     DCHECK_EQ(planes[0].offset, 0);
 
     // Try to use scanout if supported.
-    int gbm_flags = GBM_BO_USE_SCANOUT | GBM_BO_USE_TEXTURING;
+    int gbm_flags = GBM_BO_USE_SCANOUT;
+#if defined(MINIGBM)
+    gbm_flags |= GBM_BO_USE_TEXTURING;
+#endif
     if (!gbm_device_is_format_supported(device_, format, gbm_flags))
       gbm_flags &= ~GBM_BO_USE_SCANOUT;
 
@@ -231,17 +292,24 @@ class Device final : public ui::GbmDevice {
       return nullptr;
     }
 
-    struct gbm_import_fd_planar_data fd_data;
+    struct gbm_import_fd_modifier_data fd_data;
     fd_data.width = size.width();
     fd_data.height = size.height();
     fd_data.format = format;
+    fd_data.modifier = DRM_FORMAT_MOD_NONE;
 
     DCHECK_LE(planes.size(), 3u);
     for (size_t i = 0; i < planes.size(); ++i) {
       fd_data.fds[i] = fds[i < fds.size() ? i : 0].get();
       fd_data.strides[i] = planes[i].stride;
       fd_data.offsets[i] = planes[i].offset;
-      fd_data.format_modifiers[i] = planes[i].modifier;
+      if (fd_data.modifier == DRM_FORMAT_MOD_NONE)
+        fd_data.modifier = planes[i].modifier;
+
+      if (fd_data.modifier != planes[i].modifier) {
+        LOG(ERROR) << "Format modifier must be the same for all the planes";
+        return nullptr;
+      }
     }
 
     // The fd passed to gbm_bo_import is not ref-counted and need to be
-- 
2.17.1

