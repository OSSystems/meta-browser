Upstream-Status: Backport

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From 771cb0782d479a4c87e76f0f4b85395d50302715 Mon Sep 17 00:00:00 2001
From: Maksim Sisov <msisov@igalia.com>
Date: Mon, 18 Mar 2019 08:28:37 +0000
Subject: [PATCH 10/27] Make minigbm users use non-deprecated gbm apis.

We have been running effort of aligning minigbm
APIs with the upstream ones. These are the last
users of deprecated APIs.

This change does not bring any functional changes, but
rather updates the callers.

Change-Id: I2bb9b7826cd94577735096254ad63d2cc675427e
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/1505813
Reviewed-by: Michael Spang <spang@chromium.org>
Reviewed-by: Daniele Castagna <dcastagna@chromium.org>
Reviewed-by: Ricky Liang <jcliang@chromium.org>
Commit-Queue: Maksim Sisov <msisov@igalia.com>
Cr-Commit-Position: refs/heads/master@{#641531}
---
 components/exo/wayland/clients/client_base.cc | 35 ++++++++++---------
 components/exo/wayland/clients/yuv.cc         |  6 ++--
 .../local_gpu_memory_buffer_manager.cc        | 10 +++---
 ui/ozone/common/linux/gbm_wrapper.cc          |  2 +-
 .../wayland/gpu/gbm_pixmap_wayland.cc         |  2 +-
 5 files changed, 28 insertions(+), 27 deletions(-)

diff --git a/components/exo/wayland/clients/client_base.cc b/components/exo/wayland/clients/client_base.cc
index 8679f4323117..f7a4f759dc9a 100644
--- a/components/exo/wayland/clients/client_base.cc
+++ b/components/exo/wayland/clients/client_base.cc
@@ -787,10 +787,10 @@ std::unique_ptr<ClientBase::Buffer> ClientBase::CreateDrmBuffer(
 
     buffer->params.reset(
         zwp_linux_dmabuf_v1_create_params(globals_.linux_dmabuf.get()));
-    for (size_t i = 0; i < gbm_bo_get_num_planes(buffer->bo.get()); ++i) {
+    for (size_t i = 0; i < gbm_bo_get_plane_count(buffer->bo.get()); ++i) {
       base::ScopedFD fd(gbm_bo_get_plane_fd(buffer->bo.get(), i));
-      uint32_t stride = gbm_bo_get_plane_stride(buffer->bo.get(), i);
-      uint32_t offset = gbm_bo_get_plane_offset(buffer->bo.get(), i);
+      uint32_t stride = gbm_bo_get_stride_for_plane(buffer->bo.get(), i);
+      uint32_t offset = gbm_bo_get_offset(buffer->bo.get(), i);
       zwp_linux_buffer_params_v1_add(buffer->params.get(), fd.get(), i, offset,
                                      stride, 0, 0);
     }
@@ -801,22 +801,23 @@ std::unique_ptr<ClientBase::Buffer> ClientBase::CreateDrmBuffer(
     buffer->buffer.reset(zwp_linux_buffer_params_v1_create_immed(
         buffer->params.get(), size.width(), size.height(), drm_format, flags));
 
-    if (gbm_bo_get_num_planes(buffer->bo.get()) != 1)
+    if (gbm_bo_get_plane_count(buffer->bo.get()) != 1)
       return buffer;
 
-    EGLint khr_image_attrs[] = {EGL_DMA_BUF_PLANE0_FD_EXT,
-                                fd.get(),
-                                EGL_WIDTH,
-                                size.width(),
-                                EGL_HEIGHT,
-                                size.height(),
-                                EGL_LINUX_DRM_FOURCC_EXT,
-                                drm_format,
-                                EGL_DMA_BUF_PLANE0_PITCH_EXT,
-                                gbm_bo_get_plane_stride(buffer->bo.get(), 0),
-                                EGL_DMA_BUF_PLANE0_OFFSET_EXT,
-                                0,
-                                EGL_NONE};
+    EGLint khr_image_attrs[] = {
+        EGL_DMA_BUF_PLANE0_FD_EXT,
+        fd.get(),
+        EGL_WIDTH,
+        size.width(),
+        EGL_HEIGHT,
+        size.height(),
+        EGL_LINUX_DRM_FOURCC_EXT,
+        drm_format,
+        EGL_DMA_BUF_PLANE0_PITCH_EXT,
+        gbm_bo_get_stride_for_plane(buffer->bo.get(), 0),
+        EGL_DMA_BUF_PLANE0_OFFSET_EXT,
+        0,
+        EGL_NONE};
     EGLImageKHR image = eglCreateImageKHR(
         eglGetCurrentDisplay(), EGL_NO_CONTEXT, EGL_LINUX_DMA_BUF_EXT,
         nullptr /* no client buffer */, khr_image_attrs);
diff --git a/components/exo/wayland/clients/yuv.cc b/components/exo/wayland/clients/yuv.cc
index ec8e634f67a7..ceff47c2f843 100644
--- a/components/exo/wayland/clients/yuv.cc
+++ b/components/exo/wayland/clients/yuv.cc
@@ -35,10 +35,10 @@ class YuvClient : public ClientBase {
 };
 
 bool YuvClient::WriteSolidColor(gbm_bo* bo, SkColor color) {
-  for (size_t i = 0; i < gbm_bo_get_num_planes(bo); ++i) {
+  for (size_t i = 0; i < gbm_bo_get_plane_count(bo); ++i) {
     base::ScopedFD fd(gbm_bo_get_plane_fd(bo, i));
-    uint32_t stride = gbm_bo_get_plane_stride(bo, i);
-    uint32_t offset = gbm_bo_get_plane_offset(bo, i);
+    uint32_t stride = gbm_bo_get_stride_for_plane(bo, i);
+    uint32_t offset = gbm_bo_get_offset(bo, i);
     uint32_t map_size = gbm_bo_get_plane_size(bo, i) + offset;
     void* void_data = mmap(nullptr, map_size, (PROT_READ | PROT_WRITE),
                            MAP_SHARED, fd.get(), 0);
diff --git a/media/capture/video/chromeos/local_gpu_memory_buffer_manager.cc b/media/capture/video/chromeos/local_gpu_memory_buffer_manager.cc
index acc18fdbe74b..bf319f4f0d84 100644
--- a/media/capture/video/chromeos/local_gpu_memory_buffer_manager.cc
+++ b/media/capture/video/chromeos/local_gpu_memory_buffer_manager.cc
@@ -71,12 +71,12 @@ class GpuMemoryBufferImplGbm : public gfx::GpuMemoryBuffer {
     handle_.type = gfx::NATIVE_PIXMAP;
     // Set a dummy id since this is for testing only.
     handle_.id = gfx::GpuMemoryBufferId(0);
-    for (size_t i = 0; i < gbm_bo_get_num_planes(buffer_object); ++i) {
+    for (size_t i = 0; i < gbm_bo_get_plane_count(buffer_object); ++i) {
       handle_.native_pixmap_handle.fds.push_back(
           base::FileDescriptor(gbm_bo_get_plane_fd(buffer_object, i), true));
       handle_.native_pixmap_handle.planes.push_back(
-          gfx::NativePixmapPlane(gbm_bo_get_plane_stride(buffer_object, i),
-                                 gbm_bo_get_plane_offset(buffer_object, i),
+          gfx::NativePixmapPlane(gbm_bo_get_stride_for_plane(buffer_object, i),
+                                 gbm_bo_get_offset(buffer_object, i),
                                  gbm_bo_get_plane_size(buffer_object, i)));
     }
   }
@@ -98,7 +98,7 @@ class GpuMemoryBufferImplGbm : public gfx::GpuMemoryBuffer {
     if (mapped_) {
       return true;
     }
-    size_t num_planes = gbm_bo_get_num_planes(buffer_object_);
+    size_t num_planes = gbm_bo_get_plane_count(buffer_object_);
     uint32_t stride;
     mapped_planes_.resize(num_planes);
     for (size_t i = 0; i < num_planes; ++i) {
@@ -151,7 +151,7 @@ class GpuMemoryBufferImplGbm : public gfx::GpuMemoryBuffer {
   gfx::BufferFormat GetFormat() const override { return format_; }
 
   int stride(size_t plane) const override {
-    return gbm_bo_get_plane_stride(buffer_object_, plane);
+    return gbm_bo_get_stride_for_plane(buffer_object_, plane);
   }
 
   void SetColorSpace(const gfx::ColorSpace& color_space) override {}
diff --git a/ui/ozone/common/linux/gbm_wrapper.cc b/ui/ozone/common/linux/gbm_wrapper.cc
index db7ff236ea7f..ce05d2930aea 100644
--- a/ui/ozone/common/linux/gbm_wrapper.cc
+++ b/ui/ozone/common/linux/gbm_wrapper.cc
@@ -147,7 +147,7 @@ class Buffer final : public ui::GbmBuffer {
   gfx::NativePixmapHandle ExportHandle() const override {
     gfx::NativePixmapHandle handle;
     gfx::BufferFormat format = ui::GetBufferFormatFromFourCCFormat(format_);
-    // TODO(dcastagna): Use gbm_bo_get_num_planes once all the formats we use
+    // TODO(dcastagna): Use gbm_bo_get_plane_count once all the formats we use
     // are supported by gbm.
     for (size_t i = 0; i < gfx::NumberOfPlanesForBufferFormat(format); ++i) {
       base::ScopedFD scoped_fd(HANDLE_EINTR(dup(GetPlaneFd(i))));
diff --git a/ui/ozone/platform/wayland/gpu/gbm_pixmap_wayland.cc b/ui/ozone/platform/wayland/gpu/gbm_pixmap_wayland.cc
index 5d46385dbe18..c2c1ea086610 100644
--- a/ui/ozone/platform/wayland/gpu/gbm_pixmap_wayland.cc
+++ b/ui/ozone/platform/wayland/gpu/gbm_pixmap_wayland.cc
@@ -133,7 +133,7 @@ gfx::NativePixmapHandle GbmPixmapWayland::ExportHandle() {
   gfx::NativePixmapHandle handle;
   gfx::BufferFormat format = GetBufferFormat();
 
-  // TODO(dcastagna): Use gbm_bo_get_num_planes once all the formats we use are
+  // TODO(dcastagna): Use gbm_bo_get_plane_count once all the formats we use are
   // supported by gbm.
   const size_t num_planes = gfx::NumberOfPlanesForBufferFormat(format);
   std::vector<base::ScopedFD> scoped_fds(num_planes);
-- 
2.20.1

