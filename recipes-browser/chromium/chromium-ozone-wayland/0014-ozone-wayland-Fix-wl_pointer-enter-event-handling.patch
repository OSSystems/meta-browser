Upstream-Status: Backport

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From 1778dd602b08489e0fe745c03ee3594d2df0516b Mon Sep 17 00:00:00 2001
From: Nick Diego Yamane <nickdiego@igalia.com>
Date: Fri, 8 Feb 2019 20:50:13 +0000
Subject: [PATCH 14/42] ozone/wayland: Fix wl_pointer::enter event handling

Currently, WaylandPointer is not emitting MOUSE_ENTERED events. This
has been causing a couple of issues, among them:

- When you open a new window using keyboard shortcut for example, the
mouse cursor is invisible until you start moving the pointer around.

- When a window looses focus with no movement events fired and one
tries to open a new window (e.g: using keyboard shortcut), the browser
crashes (in builds with dchecks enabled) when it tries to reset cursor
for that window. This happens because cursor is not set in this case
for the first window (holding a CursorType::kNull in this case), because
WaylandWindow::SetCursor is only being triggered when WaylandPointer::Motion
events are fired (what doesn't happen in this case).

This patch fixes these issues by dispatching a MOUSE_ENTERED platform
event in WaylandPointer::Entered() function.

Bug: 928272
Change-Id: I13e01f28116fd6ce3a47ce8dc14cedcd51ed72ed
Reviewed-on: https://chromium-review.googlesource.com/c/1460357
Reviewed-by: Antonio Gomes <tonikitoo@igalia.com>
Commit-Queue: Nick Yamane <nickdiego@igalia.com>
Cr-Commit-Position: refs/heads/master@{#630461}
---
 ui/ozone/platform/wayland/wayland_pointer.cc  | 35 +++++++++++++------
 ui/ozone/platform/wayland/wayland_pointer.h   |  2 ++
 .../wayland/wayland_pointer_unittest.cc       | 30 +++++++++++++---
 3 files changed, 51 insertions(+), 16 deletions(-)

diff --git a/ui/ozone/platform/wayland/wayland_pointer.cc b/ui/ozone/platform/wayland/wayland_pointer.cc
index 4e7940cd8e95..41ec5c58e755 100644
--- a/ui/ozone/platform/wayland/wayland_pointer.cc
+++ b/ui/ozone/platform/wayland/wayland_pointer.cc
@@ -61,11 +61,12 @@ void WaylandPointer::Enter(void* data,
   WaylandPointer* pointer = static_cast<WaylandPointer*>(data);
   pointer->location_.SetPoint(wl_fixed_to_double(surface_x),
                               wl_fixed_to_double(surface_y));
-  if (surface) {
-    WaylandWindow* window = WaylandWindow::FromSurface(surface);
-    window->set_pointer_focus(true);
-    pointer->window_with_pointer_focus_ = window;
-  }
+  pointer->FocusWindow(surface);
+  MouseEvent event(ET_MOUSE_ENTERED, gfx::Point(), gfx::Point(),
+                   EventTimeForNow(), pointer->flags_, 0);
+  event.set_location_f(pointer->location_);
+  event.set_root_location_f(pointer->location_);
+  pointer->callback_.Run(&event);
 }
 
 // static
@@ -77,12 +78,7 @@ void WaylandPointer::Leave(void* data,
   MouseEvent event(ET_MOUSE_EXITED, gfx::Point(), gfx::Point(),
                    EventTimeForNow(), pointer->flags_, 0);
   pointer->callback_.Run(&event);
-  if (surface) {
-    WaylandWindow* window = WaylandWindow::FromSurface(surface);
-    window->set_pointer_focus(false);
-    window->set_has_implicit_grab(false);
-    pointer->window_with_pointer_focus_ = nullptr;
-  }
+  pointer->UnfocusWindow(surface);
 }
 
 // static
@@ -218,4 +214,21 @@ void WaylandPointer::ResetFlags() {
   keyboard_modifiers_ = 0;
 }
 
+void WaylandPointer::FocusWindow(wl_surface* surface) {
+  if (surface) {
+    WaylandWindow* window = WaylandWindow::FromSurface(surface);
+    window->set_pointer_focus(true);
+    window_with_pointer_focus_ = window;
+  }
+}
+
+void WaylandPointer::UnfocusWindow(wl_surface* surface) {
+  if (surface) {
+    WaylandWindow* window = WaylandWindow::FromSurface(surface);
+    window->set_pointer_focus(false);
+    window->set_has_implicit_grab(false);
+    window_with_pointer_focus_ = nullptr;
+  }
+}
+
 }  // namespace ui
diff --git a/ui/ozone/platform/wayland/wayland_pointer.h b/ui/ozone/platform/wayland/wayland_pointer.h
index 0c398d19a83e..1af7b9703c1a 100644
--- a/ui/ozone/platform/wayland/wayland_pointer.h
+++ b/ui/ozone/platform/wayland/wayland_pointer.h
@@ -65,6 +65,8 @@ class WaylandPointer {
                    wl_fixed_t value);
 
   void MaybeSetOrResetImplicitGrab();
+  void FocusWindow(wl_surface* surface);
+  void UnfocusWindow(wl_surface* surface);
 
   WaylandConnection* connection_ = nullptr;
   std::unique_ptr<WaylandCursor> cursor_;
diff --git a/ui/ozone/platform/wayland/wayland_pointer_unittest.cc b/ui/ozone/platform/wayland/wayland_pointer_unittest.cc
index 52fe40fb226e..1e584c52bbf0 100644
--- a/ui/ozone/platform/wayland/wayland_pointer_unittest.cc
+++ b/ui/ozone/platform/wayland/wayland_pointer_unittest.cc
@@ -42,6 +42,27 @@ class WaylandPointerTest : public WaylandTest {
   DISALLOW_COPY_AND_ASSIGN(WaylandPointerTest);
 };
 
+ACTION_P(CloneEvent, ptr) {
+  *ptr = Event::Clone(*arg0);
+}
+
+TEST_P(WaylandPointerTest, Enter) {
+  wl_pointer_send_enter(pointer_->resource(), 1, surface_->resource(), 0, 0);
+
+  std::unique_ptr<Event> event;
+  EXPECT_CALL(delegate_, DispatchEvent(_)).WillOnce(CloneEvent(&event));
+
+  Sync();
+
+  ASSERT_TRUE(event);
+  ASSERT_TRUE(event->IsMouseEvent());
+  auto* mouse_event = event->AsMouseEvent();
+  EXPECT_EQ(ET_MOUSE_ENTERED, mouse_event->type());
+  EXPECT_EQ(0, mouse_event->button_flags());
+  EXPECT_EQ(0, mouse_event->changed_button_flags());
+  EXPECT_EQ(gfx::PointF(0, 0), mouse_event->location_f());
+}
+
 TEST_P(WaylandPointerTest, Leave) {
   MockPlatformWindowDelegate other_delegate;
   WaylandWindow other_window(&other_delegate, connection_.get());
@@ -66,17 +87,13 @@ TEST_P(WaylandPointerTest, Leave) {
                         0);
   wl_pointer_send_button(pointer_->resource(), 4, 1004, BTN_LEFT,
                          WL_POINTER_BUTTON_STATE_PRESSED);
-  EXPECT_CALL(delegate_, DispatchEvent(_)).Times(1);
+  EXPECT_CALL(delegate_, DispatchEvent(_)).Times(2);
 
   // Do an extra Sync() here so that we process the second enter event before we
   // destroy |other_window|.
   Sync();
 }
 
-ACTION_P(CloneEvent, ptr) {
-  *ptr = Event::Clone(*arg0);
-}
-
 ACTION_P3(CloneEventAndCheckCapture, window, result, ptr) {
   ASSERT_TRUE(window->HasCapture() == result);
   *ptr = Event::Clone(*arg0);
@@ -84,6 +101,9 @@ ACTION_P3(CloneEventAndCheckCapture, window, result, ptr) {
 
 TEST_P(WaylandPointerTest, Motion) {
   wl_pointer_send_enter(pointer_->resource(), 1, surface_->resource(), 0, 0);
+  Sync();  // We're interested in checking Motion event in this test case, so
+           // skip Enter event here.
+
   wl_pointer_send_motion(pointer_->resource(), 1002,
                          wl_fixed_from_double(10.75),
                          wl_fixed_from_double(20.375));
-- 
2.17.1

