Upstream-Status: Backport

* Backported from the ToT: https://crrev.com/c/1369934

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From 903f3617968496b7300eba258dbc15dd9bd72aff Mon Sep 17 00:00:00 2001
From: Maksim Sisov <msisov@igalia.com>
Date: Mon, 17 Dec 2018 22:38:55 +0000
Subject: [PATCH 02/16] [ozone] Rename ClipboardDelegate to PlatformClipboard.

In order to comply with other interfaces, rename the ClipboardDelegate
to PlatformClipboard, and add OzonePlatform::GetPlatformClipboard()
method.

Bug: 875168
Change-Id: Ia2e353b73902b5de59db253c8d2a9395c7ef749a
Reviewed-on: https://chromium-review.googlesource.com/c/1369934
Commit-Queue: Maksim Sisov <msisov@igalia.com>
Reviewed-by: Robert Kroeger <rjkroege@chromium.org>
Cr-Commit-Position: refs/heads/master@{#617268}
---
 ui/ozone/BUILD.gn                             |  2 +-
 .../wayland/ozone_platform_wayland.cc         |  5 +++++
 .../platform/wayland/wayland_connection.cc    | 12 +++++------
 .../platform/wayland/wayland_connection.h     | 21 ++++++++++---------
 .../wayland/wayland_data_device_unittest.cc   | 16 +++++++-------
 .../platform/wayland/wayland_data_source.cc   |  4 ++--
 .../platform/wayland/wayland_data_source.h    |  8 +++----
 ui/ozone/public/ozone_platform.cc             |  5 +++++
 ui/ozone/public/ozone_platform.h              |  2 ++
 ...pboard_delegate.h => platform_clipboard.h} | 10 ++++-----
 10 files changed, 49 insertions(+), 36 deletions(-)
 rename ui/ozone/public/{clipboard_delegate.h => platform_clipboard.h} (92%)

diff --git a/ui/ozone/BUILD.gn b/ui/ozone/BUILD.gn
index b35403f1264e..147734e6d3f5 100644
--- a/ui/ozone/BUILD.gn
+++ b/ui/ozone/BUILD.gn
@@ -72,7 +72,6 @@ constructor_list_cc_file = "$target_gen_dir/constructor_list.cc"
 jumbo_component("ozone_base") {
   sources = [
     "ozone_base_export.h",
-    "public/clipboard_delegate.h",
     "public/cursor_factory_ozone.cc",
     "public/cursor_factory_ozone.h",
     "public/gl_ozone.h",
@@ -91,6 +90,7 @@ jumbo_component("ozone_base") {
     "public/overlay_surface_candidate.h",
     "public/ozone_switches.cc",
     "public/ozone_switches.h",
+    "public/platform_clipboard.h",
     "public/platform_screen.h",
     "public/surface_factory_ozone.cc",
     "public/surface_factory_ozone.h",
diff --git a/ui/ozone/platform/wayland/ozone_platform_wayland.cc b/ui/ozone/platform/wayland/ozone_platform_wayland.cc
index 0bba90d5b5d4..a8aa25987772 100644
--- a/ui/ozone/platform/wayland/ozone_platform_wayland.cc
+++ b/ui/ozone/platform/wayland/ozone_platform_wayland.cc
@@ -118,6 +118,11 @@ class OzonePlatformWayland : public OzonePlatform {
     return connection_->wayland_output_manager()->CreateWaylandScreen();
   }
 
+  PlatformClipboard* GetPlatformClipboard() override {
+    DCHECK(connection_);
+    return connection_->GetPlatformClipboard();
+  }
+
   bool IsNativePixmapConfigSupported(gfx::BufferFormat format,
                                      gfx::BufferUsage usage) const override {
     if (std::find(supported_buffer_formats_.begin(),
diff --git a/ui/ozone/platform/wayland/wayland_connection.cc b/ui/ozone/platform/wayland/wayland_connection.cc
index 72c8d8b527db..12d029df644c 100644
--- a/ui/ozone/platform/wayland/wayland_connection.cc
+++ b/ui/ozone/platform/wayland/wayland_connection.cc
@@ -203,13 +203,13 @@ void WaylandConnection::ScheduleBufferSwap(
   }
 }
 
-ClipboardDelegate* WaylandConnection::GetClipboardDelegate() {
+PlatformClipboard* WaylandConnection::GetPlatformClipboard() {
   return this;
 }
 
 void WaylandConnection::OfferClipboardData(
-    const ClipboardDelegate::DataMap& data_map,
-    ClipboardDelegate::OfferDataClosure callback) {
+    const PlatformClipboard::DataMap& data_map,
+    PlatformClipboard::OfferDataClosure callback) {
   if (!data_source_) {
     data_source_ = CreateWaylandDataSource(data_device_manager_.get(), this);
     data_source_->WriteToClipboard(data_map);
@@ -220,8 +220,8 @@ void WaylandConnection::OfferClipboardData(
 
 void WaylandConnection::RequestClipboardData(
     const std::string& mime_type,
-    ClipboardDelegate::DataMap* data_map,
-    ClipboardDelegate::RequestDataClosure callback) {
+    PlatformClipboard::DataMap* data_map,
+    PlatformClipboard::RequestDataClosure callback) {
   read_clipboard_closure_ = std::move(callback);
 
   DCHECK(data_map);
@@ -289,7 +289,7 @@ void WaylandConnection::ResetPointerFlags() {
 }
 
 void WaylandConnection::GetAvailableMimeTypes(
-    ClipboardDelegate::GetMimeTypesClosure callback) {
+    PlatformClipboard::GetMimeTypesClosure callback) {
   std::move(callback).Run(data_device_->GetAvailableMimeTypes());
 }
 
diff --git a/ui/ozone/platform/wayland/wayland_connection.h b/ui/ozone/platform/wayland/wayland_connection.h
index d2487cd967b2..6c4c081b22be 100644
--- a/ui/ozone/platform/wayland/wayland_connection.h
+++ b/ui/ozone/platform/wayland/wayland_connection.h
@@ -21,8 +21,8 @@
 #include "ui/ozone/platform/wayland/wayland_output.h"
 #include "ui/ozone/platform/wayland/wayland_pointer.h"
 #include "ui/ozone/platform/wayland/wayland_touch.h"
-#include "ui/ozone/public/clipboard_delegate.h"
 #include "ui/ozone/public/interfaces/wayland/wayland_connection.mojom.h"
+#include "ui/ozone/public/platform_clipboard.h"
 
 namespace ui {
 
@@ -30,8 +30,9 @@ class WaylandBufferManager;
 class WaylandOutputManager;
 class WaylandWindow;
 
+// TODO: factor out PlatformClipboard to a separate class.
 class WaylandConnection : public PlatformEventSource,
-                          public ClipboardDelegate,
+                          public PlatformClipboard,
                           public ozone::mojom::WaylandConnection,
                           public base::MessagePumpLibevent::FdWatcher {
  public:
@@ -105,21 +106,21 @@ class WaylandConnection : public PlatformEventSource,
   }
 
   // Clipboard implementation.
-  ClipboardDelegate* GetClipboardDelegate();
+  PlatformClipboard* GetPlatformClipboard();
   void DataSourceCancelled();
   void SetClipboardData(const std::string& contents,
                         const std::string& mime_type);
 
-  // ClipboardDelegate.
+  // PlatformClipboard.
   void OfferClipboardData(
-      const ClipboardDelegate::DataMap& data_map,
-      ClipboardDelegate::OfferDataClosure callback) override;
+      const PlatformClipboard::DataMap& data_map,
+      PlatformClipboard::OfferDataClosure callback) override;
   void RequestClipboardData(
       const std::string& mime_type,
-      ClipboardDelegate::DataMap* data_map,
-      ClipboardDelegate::RequestDataClosure callback) override;
+      PlatformClipboard::DataMap* data_map,
+      PlatformClipboard::RequestDataClosure callback) override;
   void GetAvailableMimeTypes(
-      ClipboardDelegate::GetMimeTypesClosure callback) override;
+      PlatformClipboard::GetMimeTypesClosure callback) override;
   bool IsSelectionOwner() override;
 
   // Returns bound pointer to own mojo interface.
@@ -222,7 +223,7 @@ class WaylandConnection : public PlatformEventSource,
 
   // Holds a temporary instance of the client's clipboard content
   // so that we can asynchronously write to it.
-  ClipboardDelegate::DataMap* data_map_ = nullptr;
+  PlatformClipboard::DataMap* data_map_ = nullptr;
 
   // Stores the callback to be invoked upon data reading from clipboard.
   RequestDataClosure read_clipboard_closure_;
diff --git a/ui/ozone/platform/wayland/wayland_data_device_unittest.cc b/ui/ozone/platform/wayland/wayland_data_device_unittest.cc
index f8fe5abf6206..b0b038581971 100644
--- a/ui/ozone/platform/wayland/wayland_data_device_unittest.cc
+++ b/ui/ozone/platform/wayland/wayland_data_device_unittest.cc
@@ -10,23 +10,23 @@
 #include "ui/events/base_event_utils.h"
 #include "ui/ozone/platform/wayland/fake_server.h"
 #include "ui/ozone/platform/wayland/wayland_test.h"
-#include "ui/ozone/public/clipboard_delegate.h"
+#include "ui/ozone/public/platform_clipboard.h"
 
 namespace ui {
 
 // This class mocks how a real clipboard/ozone client would
-// hook to ClipboardDelegate, with one difference: real clients
+// hook to PlatformClipboard, with one difference: real clients
 // have no access to the WaylandConnection instance like this
 // MockClipboardClient impl does. Instead, clients and ozone gets
 // plumbbed up by calling the appropriated Ozone API,
-// OzonePlatform::GetClipboardDelegate.
+// OzonePlatform::GetPlatformClipboard.
 class MockClipboardClient {
  public:
   MockClipboardClient(WaylandConnection* connection) {
     DCHECK(connection);
     // See comment above for reasoning to access the WaylandConnection
     // directly from here.
-    delegate_ = connection->GetClipboardDelegate();
+    delegate_ = connection->GetPlatformClipboard();
 
     DCHECK(delegate_);
   }
@@ -35,7 +35,7 @@ class MockClipboardClient {
   // Fill the clipboard backing store with sample data.
   void SetData(const std::string& utf8_text,
                const std::string& mime_type,
-               ClipboardDelegate::OfferDataClosure callback) {
+               PlatformClipboard::OfferDataClosure callback) {
     // This mimics how Mus' ClipboardImpl writes data to the DataMap.
     std::vector<char> object_map(utf8_text.begin(), utf8_text.end());
     char* object_data = &object_map.front();
@@ -46,7 +46,7 @@ class MockClipboardClient {
   }
 
   void ReadData(const std::string& mime_type,
-                ClipboardDelegate::RequestDataClosure callback) {
+                PlatformClipboard::RequestDataClosure callback) {
     delegate_->RequestClipboardData(mime_type, &data_types_,
                                     std::move(callback));
   }
@@ -54,8 +54,8 @@ class MockClipboardClient {
   bool IsSelectionOwner() { return delegate_->IsSelectionOwner(); }
 
  private:
-  ClipboardDelegate* delegate_ = nullptr;
-  ClipboardDelegate::DataMap data_types_;
+  PlatformClipboard* delegate_ = nullptr;
+  PlatformClipboard::DataMap data_types_;
 
   DISALLOW_COPY_AND_ASSIGN(MockClipboardClient);
 };
diff --git a/ui/ozone/platform/wayland/wayland_data_source.cc b/ui/ozone/platform/wayland/wayland_data_source.cc
index e1fe23b6c19c..9f8d6cfabe22 100644
--- a/ui/ozone/platform/wayland/wayland_data_source.cc
+++ b/ui/ozone/platform/wayland/wayland_data_source.cc
@@ -27,7 +27,7 @@ WaylandDataSource::WaylandDataSource(wl_data_source* data_source,
 WaylandDataSource::~WaylandDataSource() = default;
 
 void WaylandDataSource::WriteToClipboard(
-    const ClipboardDelegate::DataMap& data_map) {
+    const PlatformClipboard::DataMap& data_map) {
   for (const auto& data : data_map) {
     wl_data_source_offer(data_source_.get(), data.first.c_str());
     if (strcmp(data.first.c_str(), kTextMimeType) == 0)
@@ -40,7 +40,7 @@ void WaylandDataSource::WriteToClipboard(
 }
 
 void WaylandDataSource::UpdataDataMap(
-    const ClipboardDelegate::DataMap& data_map) {
+    const PlatformClipboard::DataMap& data_map) {
   data_map_ = data_map;
 }
 
diff --git a/ui/ozone/platform/wayland/wayland_data_source.h b/ui/ozone/platform/wayland/wayland_data_source.h
index 33dfeb2f9121..6295cf6af4f9 100644
--- a/ui/ozone/platform/wayland/wayland_data_source.h
+++ b/ui/ozone/platform/wayland/wayland_data_source.h
@@ -15,7 +15,7 @@
 #include "base/macros.h"
 #include "base/optional.h"
 #include "ui/ozone/platform/wayland/wayland_object.h"
-#include "ui/ozone/public/clipboard_delegate.h"
+#include "ui/ozone/public/platform_clipboard.h"
 
 namespace ui {
 
@@ -42,8 +42,8 @@ class WaylandDataSource {
     connection_ = connection;
   }
 
-  void WriteToClipboard(const ClipboardDelegate::DataMap& data_map);
-  void UpdataDataMap(const ClipboardDelegate::DataMap& data_map);
+  void WriteToClipboard(const PlatformClipboard::DataMap& data_map);
+  void UpdataDataMap(const PlatformClipboard::DataMap& data_map);
   void Offer(const ui::OSExchangeData& data);
   void SetAction(int operation);
   void SetDragData(const DragDataMap& data_map);
@@ -71,7 +71,7 @@ class WaylandDataSource {
   WaylandConnection* connection_ = nullptr;
   WaylandWindow* source_window_ = nullptr;
 
-  ClipboardDelegate::DataMap data_map_;
+  PlatformClipboard::DataMap data_map_;
   DragDataMap drag_data_map_;
   // Action selected by the compositor
   uint32_t dnd_action_;
diff --git a/ui/ozone/public/ozone_platform.cc b/ui/ozone/public/ozone_platform.cc
index d9c531079cf0..f4ce19f0e591 100644
--- a/ui/ozone/public/ozone_platform.cc
+++ b/ui/ozone/public/ozone_platform.cc
@@ -122,6 +122,11 @@ std::unique_ptr<PlatformScreen> OzonePlatform::CreateScreen() {
   return nullptr;
 }
 
+PlatformClipboard* OzonePlatform::GetPlatformClipboard() {
+  // Platforms that support system clipboard must override this method.
+  return nullptr;
+}
+
 bool OzonePlatform::IsNativePixmapConfigSupported(
     gfx::BufferFormat format,
     gfx::BufferUsage usage) const {
diff --git a/ui/ozone/public/ozone_platform.h b/ui/ozone/public/ozone_platform.h
index ceb287245bd3..453c9ffd61a7 100644
--- a/ui/ozone/public/ozone_platform.h
+++ b/ui/ozone/public/ozone_platform.h
@@ -40,6 +40,7 @@ class PlatformWindow;
 class PlatformWindowDelegate;
 class SurfaceFactoryOzone;
 class SystemInputInjector;
+class PlatformClipboard;
 
 struct PlatformWindowInitProperties;
 
@@ -148,6 +149,7 @@ class OZONE_EXPORT OzonePlatform {
   virtual std::unique_ptr<display::NativeDisplayDelegate>
   CreateNativeDisplayDelegate() = 0;
   virtual std::unique_ptr<PlatformScreen> CreateScreen();
+  virtual PlatformClipboard* GetPlatformClipboard();
 
   // Returns true if the specified buffer format is supported.
   virtual bool IsNativePixmapConfigSupported(gfx::BufferFormat format,
diff --git a/ui/ozone/public/clipboard_delegate.h b/ui/ozone/public/platform_clipboard.h
similarity index 92%
rename from ui/ozone/public/clipboard_delegate.h
rename to ui/ozone/public/platform_clipboard.h
index f2dcbb3d34ee..df5940924b16 100644
--- a/ui/ozone/public/clipboard_delegate.h
+++ b/ui/ozone/public/platform_clipboard.h
@@ -2,8 +2,8 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#ifndef UI_OZONE_PUBLIC_CLIPBOARD_DELEGATE_H_
-#define UI_OZONE_PUBLIC_CLIPBOARD_DELEGATE_H_
+#ifndef UI_OZONE_PUBLIC_PLATFORM_CLIPBOARD_H_
+#define UI_OZONE_PUBLIC_PLATFORM_CLIPBOARD_H_
 
 #include <string>
 #include <unordered_map>
@@ -15,11 +15,11 @@
 
 namespace ui {
 
-// ClipboardDelegate is an interface that allows Ozone backends to exchange
+// PlatformClipboard is an interface that allows Ozone backends to exchange
 // data with other applications on the host system. The most familiar use for
 // it is handling copy and paste operations.
 //
-class OZONE_BASE_EXPORT ClipboardDelegate {
+class OZONE_BASE_EXPORT PlatformClipboard {
  public:
   // DataMap is a map from "mime type" to associated data, whereas
   // the data can be organized differently for each mime type.
@@ -75,4 +75,4 @@ class OZONE_BASE_EXPORT ClipboardDelegate {
 
 }  // namespace ui
 
-#endif  // UI_OZONE_PUBLIC_CLIPBOARD_DELEGATE_H_
+#endif  // UI_OZONE_PUBLIC_PLATFORM_CLIPBOARD_H_
-- 
2.17.1

