Upstream-Status: Backport

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From 3508c2fe04fba373743c7497ef707e3d36ef6acc Mon Sep 17 00:00:00 2001
From: Alex Ilin <alexilin@chromium.org>
Date: Mon, 29 Apr 2019 16:53:06 +0000
Subject: [PATCH 03/23] Migrate WaylandCanvasSurface to the new shared memory
 API

This CL removes the last usage of deprecated base::SharedMemory from
ozone/wayland.

Bug: 947464
Change-Id: I2db93227576931531ecd94f219cb474a3f8141d3
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/1588635
Commit-Queue: Antonio Gomes <tonikitoo@igalia.com>
Auto-Submit: Alex Ilin <alexilin@chromium.org>
Reviewed-by: Antonio Gomes <tonikitoo@igalia.com>
Cr-Commit-Position: refs/heads/master@{#654888}
---
 .../wayland/gpu/wayland_canvas_surface.cc     | 34 +++++++++++--------
 .../wayland/host/wayland_shm_buffer.h         |  2 +-
 2 files changed, 21 insertions(+), 15 deletions(-)

diff --git a/ui/ozone/platform/wayland/gpu/wayland_canvas_surface.cc b/ui/ozone/platform/wayland/gpu/wayland_canvas_surface.cc
index a8fb25a25b5f..e21bff0bfbfa 100644
--- a/ui/ozone/platform/wayland/gpu/wayland_canvas_surface.cc
+++ b/ui/ozone/platform/wayland/gpu/wayland_canvas_surface.cc
@@ -9,7 +9,8 @@
 
 #include "base/files/scoped_file.h"
 #include "base/macros.h"
-#include "base/memory/shared_memory.h"
+#include "base/memory/shared_memory_mapping.h"
+#include "base/memory/unsafe_shared_memory_region.h"
 #include "base/posix/eintr_wrapper.h"
 #include "ui/gfx/vsync_provider.h"
 #include "ui/ozone/platform/wayland/gpu/wayland_connection_proxy.h"
@@ -18,8 +19,8 @@ namespace ui {
 
 namespace {
 
-void DeleteSharedMemory(void* pixels, void* context) {
-  delete static_cast<base::SharedMemory*>(context);
+void DeleteSharedMemoryMapping(void* pixels, void* context) {
+  delete static_cast<base::WritableSharedMemoryMapping*>(context);
 }
 
 }  // namespace
@@ -39,29 +40,34 @@ sk_sp<SkSurface> WaylandCanvasSurface::GetSurface() {
   DCHECK(!size_.IsEmpty());
 
   size_t length = size_.width() * size_.height() * 4;
-  auto shared_memory = std::make_unique<base::SharedMemory>();
-  if (!shared_memory->CreateAndMapAnonymous(length)) {
+  base::UnsafeSharedMemoryRegion shm_region =
+      base::UnsafeSharedMemoryRegion::Create(length);
+  if (!shm_region.IsValid())
     return nullptr;
-  }
 
-  base::ScopedFD fd(HANDLE_EINTR(dup(shared_memory->handle().GetHandle())));
-  if (!fd.is_valid()) {
-    PLOG(FATAL) << "dup";
+  base::WritableSharedMemoryMapping shm_mapping = shm_region.Map();
+  if (!shm_mapping.IsValid())
     return nullptr;
-  }
 
-  base::File file(fd.release());
+  base::subtle::PlatformSharedMemoryRegion platform_shm =
+      base::UnsafeSharedMemoryRegion::TakeHandleForSerialization(
+          std::move(shm_region));
+  base::subtle::ScopedFDPair fd_pair = platform_shm.PassPlatformHandle();
+  base::File file(fd_pair.fd.release());
   connection_->CreateShmBufferForWidget(widget_, std::move(file), length,
                                         size_);
 
+  auto shm_mapping_on_heap =
+      std::make_unique<base::WritableSharedMemoryMapping>(
+          std::move(shm_mapping));
   sk_surface_ = SkSurface::MakeRasterDirectReleaseProc(
       SkImageInfo::MakeN32Premul(size_.width(), size_.height()),
-      shared_memory->memory(), size_.width() * 4, &DeleteSharedMemory,
-      shared_memory.get(), nullptr);
+      shm_mapping_on_heap->memory(), size_.width() * 4,
+      &DeleteSharedMemoryMapping, shm_mapping_on_heap.get(), nullptr);
   if (!sk_surface_)
     return nullptr;
 
-  ignore_result(shared_memory.release());
+  ignore_result(shm_mapping_on_heap.release());
   return sk_surface_;
 }
 
diff --git a/ui/ozone/platform/wayland/host/wayland_shm_buffer.h b/ui/ozone/platform/wayland/host/wayland_shm_buffer.h
index 8639dca2f605..1b70920e1ef8 100644
--- a/ui/ozone/platform/wayland/host/wayland_shm_buffer.h
+++ b/ui/ozone/platform/wayland/host/wayland_shm_buffer.h
@@ -23,7 +23,7 @@ namespace ui {
 // (2) Buffers created using file descriptor (e.g: sent by gpu process/thread,
 // through IPC), not mapped in local memory address space.
 // WaylandShmBuffer is moveable, non-copyable, and is assumed to own both
-// wl_buffer and SharedMemory (if any) instance.
+// wl_buffer and WritableSharedMemoryMapping (if any) instance.
 class WaylandShmBuffer {
  public:
   WaylandShmBuffer(wl_shm* shm, const gfx::Size& size);
-- 
2.20.1

