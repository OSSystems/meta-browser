Upstream-Status: Backport

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From 2ea877ccc3965d2fee85a0db9fd62eef0cca3d8d Mon Sep 17 00:00:00 2001
From: Nick Diego Yamane <nickdiego@igalia.com>
Date: Thu, 21 Mar 2019 14:32:14 +0000
Subject: [PATCH 12/27] ozone/wayland: Fix drag icon handling

This CL fixes drag&drop icon rendering when running Chromium in compositors
such as Weston and Gnome/Mutter compositor. Without this change, the drag icon
does not show up, despite it seems to work well in other SwayWM compositor,
for example.

The fix consists in only attaching/updating/committing the icon
surface/buffer *after* calling wl_data_device::start_drag(), which
actually sets surface role to `drag_icon` [1]. Additionally, minor
change is done in StartDrag API to avoid unneeded const_cast<>.

[1] https://wayland.freedesktop.org/docs/html/apa.html#protocol-spec-wl_data_device

Bug: 943694, 875164
Change-Id: I2b71378b998fe648cde65fa0e2c234288d1238a8
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/1531070
Reviewed-by: Maksim Sisov <msisov@igalia.com>
Commit-Queue: Nick Yamane <nickdiego@igalia.com>
Cr-Commit-Position: refs/heads/master@{#642915}
---
 .../platform/wayland/wayland_connection.cc    |  2 +-
 .../platform/wayland/wayland_data_device.cc   | 39 +++++++++++--------
 .../platform/wayland/wayland_data_device.h    |  9 +++--
 .../platform/wayland/wayland_data_source.h    |  2 +-
 4 files changed, 30 insertions(+), 22 deletions(-)

diff --git a/ui/ozone/platform/wayland/wayland_connection.cc b/ui/ozone/platform/wayland/wayland_connection.cc
index c4ea023944a8..bbcb18eb5898 100644
--- a/ui/ozone/platform/wayland/wayland_connection.cc
+++ b/ui/ozone/platform/wayland/wayland_connection.cc
@@ -311,7 +311,7 @@ void WaylandConnection::StartDrag(const ui::OSExchangeData& data,
     dragdrop_data_source_ = data_device_manager_->CreateSource();
   dragdrop_data_source_->Offer(data);
   dragdrop_data_source_->SetAction(operation);
-  data_device_->StartDrag(*(dragdrop_data_source_->data_source()), data);
+  data_device_->StartDrag(dragdrop_data_source_->data_source(), data);
 }
 
 void WaylandConnection::FinishDragSession(uint32_t dnd_action,
diff --git a/ui/ozone/platform/wayland/wayland_data_device.cc b/ui/ozone/platform/wayland/wayland_data_device.cc
index ff6b0d5d7b7f..ab5df3f4d501 100644
--- a/ui/ozone/platform/wayland/wayland_data_device.cc
+++ b/ui/ozone/platform/wayland/wayland_data_device.cc
@@ -150,23 +150,20 @@ void WaylandDataDevice::DeliverDragData(const std::string& mime_type,
   }
 }
 
-void WaylandDataDevice::StartDrag(const wl_data_source& data_source,
+void WaylandDataDevice::StartDrag(wl_data_source* data_source,
                                   const ui::OSExchangeData& data) {
+  DCHECK(data_source);
   WaylandWindow* window = connection_->GetCurrentFocusedWindow();
   if (!window) {
     LOG(ERROR) << "Failed to get focused window.";
     return;
   }
-
-  wl_surface* surface = window->surface();
-  const SkBitmap* icon = data.provider().GetDragImage().bitmap();
-  if (icon && !icon->empty())
-    CreateDragImage(icon);
-
+  const SkBitmap* icon = PrepareDragIcon(data);
   source_data_ = std::make_unique<ui::OSExchangeData>(data.provider().Clone());
-  wl_data_device_start_drag(data_device_.get(),
-                            const_cast<wl_data_source*>(&data_source), surface,
+  wl_data_device_start_drag(data_device_.get(), data_source, window->surface(),
                             icon_surface_.get(), connection_->serial());
+  if (icon)
+    DrawDragIcon(icon);
   connection_->ScheduleFlush();
 }
 
@@ -376,22 +373,32 @@ void WaylandDataDevice::DeferredReadCallback(void* data,
   data_device->deferred_read_callback_.reset();
 }
 
-void WaylandDataDevice::CreateDragImage(const SkBitmap* bitmap) {
-  DCHECK(bitmap);
-  gfx::Size size(bitmap->width(), bitmap->height());
+const SkBitmap* WaylandDataDevice::PrepareDragIcon(const OSExchangeData& data) {
+  const SkBitmap* icon_bitmap = data.provider().GetDragImage().bitmap();
+  if (!icon_bitmap || icon_bitmap->empty())
+    return nullptr;
+  icon_surface_.reset(wl_compositor_create_surface(connection_->compositor()));
+  DCHECK(icon_surface_);
+  return icon_bitmap;
+}
+
+void WaylandDataDevice::DrawDragIcon(const SkBitmap* icon_bitmap) {
+  DCHECK(icon_bitmap);
+  DCHECK(!icon_bitmap->empty());
+  gfx::Size size(icon_bitmap->width(), icon_bitmap->height());
 
   if (size != icon_buffer_size_) {
     wl_buffer* buffer =
         wl::CreateSHMBuffer(size, shared_memory_.get(), connection_->shm());
-    if (!buffer)
+    if (!buffer) {
+      LOG(ERROR) << "Failed to create drag icon buffer.";
       return;
-
+    }
     buffer_.reset(buffer);
     icon_buffer_size_ = size;
   }
-  wl::DrawBitmapToSHMB(icon_buffer_size_, *shared_memory_, *bitmap);
+  wl::DrawBitmapToSHMB(icon_buffer_size_, *shared_memory_, *icon_bitmap);
 
-  icon_surface_.reset(wl_compositor_create_surface(connection_->compositor()));
   wl_surface_attach(icon_surface_.get(), buffer_.get(), 0, 0);
   wl_surface_damage(icon_surface_.get(), 0, 0, icon_buffer_size_.width(),
                     icon_buffer_size_.height());
diff --git a/ui/ozone/platform/wayland/wayland_data_device.h b/ui/ozone/platform/wayland/wayland_data_device.h
index e623f2eaf37e..dcfcd83c16e5 100644
--- a/ui/ozone/platform/wayland/wayland_data_device.h
+++ b/ui/ozone/platform/wayland/wayland_data_device.h
@@ -52,8 +52,7 @@ class WaylandDataDevice {
   void DeliverDragData(const std::string& mime_type, std::string* buffer);
   // Starts drag with |data| to be delivered, |operation| supported by the
   // source side initiated the dragging.
-  void StartDrag(const wl_data_source& data_source,
-                 const ui::OSExchangeData& data);
+  void StartDrag(wl_data_source* data_source, const ui::OSExchangeData& data);
   // Resets |source_data_| when the dragging is finished.
   void ResetSourceData();
 
@@ -121,8 +120,10 @@ class WaylandDataDevice {
                                    struct wl_callback* cb,
                                    uint32_t time);
 
-  bool CreateSHMBuffer(const gfx::Size& size);
-  void CreateDragImage(const SkBitmap* bitmap);
+  // Returns the drag icon bitmap and creates and wayland surface to draw it
+  // on, if a valid drag image is present in |data|; otherwise returns null.
+  const SkBitmap* PrepareDragIcon(const OSExchangeData& data);
+  void DrawDragIcon(const SkBitmap* bitmap);
 
   void OnDragDataReceived(const std::string& contents);
 
diff --git a/ui/ozone/platform/wayland/wayland_data_source.h b/ui/ozone/platform/wayland/wayland_data_source.h
index 1ed57322abbb..34fb885b5f2c 100644
--- a/ui/ozone/platform/wayland/wayland_data_source.h
+++ b/ui/ozone/platform/wayland/wayland_data_source.h
@@ -48,7 +48,7 @@ class WaylandDataSource {
   void SetAction(int operation);
   void SetDragData(const DragDataMap& data_map);
 
-  const wl_data_source* data_source() const { return data_source_.get(); }
+  wl_data_source* data_source() const { return data_source_.get(); }
 
  private:
   static void OnTarget(void* data,
-- 
2.20.1

