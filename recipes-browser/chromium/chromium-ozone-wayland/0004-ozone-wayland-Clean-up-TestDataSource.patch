Upstream-Status: Backport

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From 1ca637b9b954a68945e440c1e3b88977f785b684 Mon Sep 17 00:00:00 2001
From: Nick Diego Yamane <nickdiego@igalia.com>
Date: Thu, 14 Mar 2019 20:32:02 +0000
Subject: [PATCH 04/27] ozone/wayland: Clean up TestDataSource

This CL cleans up TestDataSource API and implementation:

 - Removed unneeded callback from ReadData implementation;
 - Parameterizing mime type in ReadData function, making tests
 using it more readable with less implict logic regarding mime type
 handling;
 - Adds a test to validate the case where the client offers a given
 mime type and the the server is expecting another one, where no data
 should be sent;
 - Remove unneeded WeakPtrFactory class variable;
 - Simplify ReadDataOnWorkerThread logic;

Bug: 926101
Change-Id: Ic35de3a9740eb9d56809cbf38a16b10c97347cd9
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/1521170
Commit-Queue: Nick Yamane <nickdiego@igalia.com>
Reviewed-by: Maksim Sisov <msisov@igalia.com>
Cr-Commit-Position: refs/heads/master@{#640902}
---
 .../platform/wayland/test/test_data_source.cc | 31 +++++------
 .../platform/wayland/test/test_data_source.h  | 12 ++---
 .../wayland/wayland_data_device_unittest.cc   | 52 +++++++++++++++----
 3 files changed, 58 insertions(+), 37 deletions(-)

diff --git a/ui/ozone/platform/wayland/test/test_data_source.cc b/ui/ozone/platform/wayland/test/test_data_source.cc
index ade78494889b..a0ef41e7d2d4 100644
--- a/ui/ozone/platform/wayland/test/test_data_source.cc
+++ b/ui/ozone/platform/wayland/test/test_data_source.cc
@@ -5,6 +5,7 @@
 #include "ui/ozone/platform/wayland/test/test_data_source.h"
 
 #include <wayland-server-core.h>
+#include <utility>
 
 #include "base/bind.h"
 #include "base/files/file_util.h"
@@ -30,13 +31,13 @@ std::vector<uint8_t> ReadDataOnWorkerThread(base::ScopedFD fd) {
       bytes.insert(bytes.end(), chunk, chunk + bytes_read);
       continue;
     }
-    if (!bytes_read)
-      return bytes;
     if (bytes_read < 0) {
-      LOG(ERROR) << "Failed to read selection data from clipboard.";
-      return std::vector<uint8_t>();
+      PLOG(ERROR) << "Failed to read data";
+      bytes.clear();
     }
+    break;
   }
+  return bytes;
 }
 
 void CreatePipe(base::ScopedFD* read_pipe, base::ScopedFD* write_pipe) {
@@ -70,8 +71,7 @@ const struct wl_data_source_interface kTestDataSourceImpl = {
 TestDataSource::TestDataSource(wl_resource* resource)
     : ServerObject(resource),
       task_runner_(
-          base::CreateSequencedTaskRunnerWithTraits({base::MayBlock()})),
-      read_data_weak_ptr_factory_(this) {}
+          base::CreateSequencedTaskRunnerWithTraits({base::MayBlock()})) {}
 
 TestDataSource::~TestDataSource() {}
 
@@ -79,30 +79,23 @@ void TestDataSource::Offer(const std::string& mime_type) {
   NOTIMPLEMENTED();
 }
 
-void TestDataSource::ReadData(ReadDataCallback callback) {
+void TestDataSource::ReadData(const std::string& mime_type,
+                              ReadDataCallback callback) {
   base::ScopedFD read_fd;
   base::ScopedFD write_fd;
   CreatePipe(&read_fd, &write_fd);
 
   // 1. Send the SEND event to notify client's DataSource that it's time
   // to send us the drag data thrhough the write_fd file descriptor.
-  wl_data_source_send_send(resource(), kTextMimeTypeUtf8, write_fd.get());
+  wl_data_source_send_send(resource(), mime_type.c_str(), write_fd.get());
   wl_client_flush(wl_resource_get_client(resource()));
 
   // 2. Schedule the ReadDataOnWorkerThread task. The result of read
-  // operation will be delivered through TestDataSource::DataReadCb,
-  // which will then call the callback function requested by the caller.
-  PostTaskAndReplyWithResult(
+  // operation will be then passed in to the callback requested by the caller.
+  base::PostTaskAndReplyWithResult(
       task_runner_.get(), FROM_HERE,
       base::BindOnce(&ReadDataOnWorkerThread, std::move(read_fd)),
-      base::BindOnce(&TestDataSource::DataReadCb,
-                     read_data_weak_ptr_factory_.GetWeakPtr(),
-                     std::move(callback)));
-}
-
-void TestDataSource::DataReadCb(ReadDataCallback callback,
-                                const std::vector<uint8_t>& data) {
-  std::move(callback).Run(data);
+      std::move(callback));
 }
 
 void TestDataSource::OnCancelled() {
diff --git a/ui/ozone/platform/wayland/test/test_data_source.h b/ui/ozone/platform/wayland/test/test_data_source.h
index 4d6296281722..32592071f2d0 100644
--- a/ui/ozone/platform/wayland/test/test_data_source.h
+++ b/ui/ozone/platform/wayland/test/test_data_source.h
@@ -5,12 +5,12 @@
 #ifndef UI_OZONE_PLATFORM_WAYLAND_TEST_TEST_DATA_SOURCE_H_
 #define UI_OZONE_PLATFORM_WAYLAND_TEST_TEST_DATA_SOURCE_H_
 
+#include <wayland-server-protocol-core.h>
+
 #include <memory>
 #include <string>
 #include <vector>
 
-#include <wayland-server-protocol-core.h>
-
 #include "base/macros.h"
 #include "base/memory/weak_ptr.h"
 #include "ui/ozone/platform/wayland/test/server_object.h"
@@ -32,17 +32,13 @@ class TestDataSource : public ServerObject {
 
   void Offer(const std::string& mime_type);
 
-  using ReadDataCallback =
-      base::OnceCallback<void(const std::vector<uint8_t>&)>;
-  void ReadData(ReadDataCallback);
+  using ReadDataCallback = base::OnceCallback<void(std::vector<uint8_t>&&)>;
+  void ReadData(const std::string& mime_type, ReadDataCallback callback);
 
   void OnCancelled();
 
  private:
-  void DataReadCb(ReadDataCallback callback, const std::vector<uint8_t>& data);
-
   const scoped_refptr<base::SequencedTaskRunner> task_runner_;
-  base::WeakPtrFactory<TestDataSource> read_data_weak_ptr_factory_;
 
   DISALLOW_COPY_AND_ASSIGN(TestDataSource);
 };
diff --git a/ui/ozone/platform/wayland/wayland_data_device_unittest.cc b/ui/ozone/platform/wayland/wayland_data_device_unittest.cc
index 5aff53a64c41..54c590570702 100644
--- a/ui/ozone/platform/wayland/wayland_data_device_unittest.cc
+++ b/ui/ozone/platform/wayland/wayland_data_device_unittest.cc
@@ -29,7 +29,7 @@ namespace ui {
 // OzonePlatform::GetPlatformClipboard.
 class MockClipboardClient {
  public:
-  MockClipboardClient(WaylandConnection* connection) {
+  explicit MockClipboardClient(WaylandConnection* connection) {
     DCHECK(connection);
     // See comment above for reasoning to access the WaylandConnection
     // directly from here.
@@ -99,19 +99,20 @@ TEST_P(WaylandDataDeviceManagerTest, WriteToClipboard) {
   // ... and the server reads it.
   base::RunLoop run_loop;
   auto callback = base::BindOnce(
-      [](base::RunLoop* loop, const std::vector<uint8_t>& data) {
+      [](base::RunLoop* loop, std::vector<uint8_t>&& data) {
         std::string string_data(data.begin(), data.end());
         EXPECT_EQ(wl::kSampleClipboardText, string_data);
         loop->Quit();
       },
       &run_loop);
-  data_device_manager_->data_source()->ReadData(std::move(callback));
+  data_device_manager_->data_source()->ReadData(wl::kTextMimeTypeUtf8,
+                                                std::move(callback));
   run_loop.Run();
 }
 
 TEST_P(WaylandDataDeviceManagerTest, ReadFromClibpard) {
-  // TODO: implement this in terms of an actual wl_surface that gets
-  // focused and compositor sends data_device data to it.
+  // TODO(nickdiego): implement this in terms of an actual wl_surface that
+  // gets focused and compositor sends data_device data to it.
   auto* data_offer = data_device_manager_->data_device()->OnDataOffer();
   data_offer->OnOffer(wl::kTextMimeTypeUtf8);
   data_device_manager_->data_device()->OnSelection(data_offer);
@@ -150,10 +151,9 @@ TEST_P(WaylandDataDeviceManagerTest, StartDrag) {
   window_->set_pointer_focus(true);
 
   // The client starts dragging.
-  std::unique_ptr<OSExchangeData> os_exchange_data =
-      std::make_unique<OSExchangeData>();
+  OSExchangeData os_exchange_data;
   int operation = DragDropTypes::DRAG_COPY | DragDropTypes::DRAG_MOVE;
-  connection_->StartDrag(*os_exchange_data, operation);
+  connection_->StartDrag(os_exchange_data, operation);
 
   WaylandDataSource::DragDataMap data;
   data[wl::kTextMimeTypeUtf8] = wl::kSampleTextForDragAndDrop;
@@ -163,13 +163,45 @@ TEST_P(WaylandDataDeviceManagerTest, StartDrag) {
   // The server reads the data and the callback gets it.
   base::RunLoop run_loop;
   auto callback = base::BindOnce(
-      [](base::RunLoop* loop, const std::vector<uint8_t>& data) {
+      [](base::RunLoop* loop, std::vector<uint8_t>&& data) {
         std::string result(data.begin(), data.end());
         EXPECT_EQ(wl::kSampleTextForDragAndDrop, result);
         loop->Quit();
       },
       &run_loop);
-  data_device_manager_->data_source()->ReadData(std::move(callback));
+  data_device_manager_->data_source()->ReadData(wl::kTextMimeTypeUtf8,
+                                                std::move(callback));
+  run_loop.Run();
+  window_->set_pointer_focus(restored_focus);
+}
+
+TEST_P(WaylandDataDeviceManagerTest, StartDragWithWrongMimeType) {
+  bool restored_focus = window_->has_pointer_focus();
+  window_->set_pointer_focus(true);
+
+  // The client starts dragging offering data with wl::kTextMimeTypeUtf8
+  // mime type.
+  OSExchangeData os_exchange_data;
+  int operation = DragDropTypes::DRAG_COPY | DragDropTypes::DRAG_MOVE;
+  connection_->StartDrag(os_exchange_data, operation);
+
+  WaylandDataSource::DragDataMap data;
+  data[wl::kTextMimeTypeUtf8] = wl::kSampleTextForDragAndDrop;
+  connection_->drag_data_source()->SetDragData(data);
+  Sync();
+
+  // The server should get an empty data buffer in ReadData callback
+  // when trying to read it.
+  base::RunLoop run_loop;
+  auto callback = base::BindOnce(
+      [](base::RunLoop* loop, std::vector<uint8_t>&& data) {
+        std::string result(data.begin(), data.end());
+        EXPECT_EQ("", result);
+        loop->Quit();
+      },
+      &run_loop);
+  data_device_manager_->data_source()->ReadData(wl::kTextMimeTypeText,
+                                                std::move(callback));
   run_loop.Run();
   window_->set_pointer_focus(restored_focus);
 }
-- 
2.20.1

