Upstream-Status: Backport

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From ef54f817de2babcf0a8e058990c2d7d1aa72330c Mon Sep 17 00:00:00 2001
From: Maksim Sisov <msisov@igalia.com>
Date: Tue, 28 May 2019 07:11:06 +0000
Subject: [PATCH 15/23] [ozone/wayland] Stop providing WaylandConnection
 through Proxy.

This is a prerequisite to rename WaylandConnectionProxy
to WaylandBufferManagerGpu, and establish a connection
between Gpu side and Host side buffer managers without
intermediate forwarding.

At the moment, WaylandConnectionProxy can return a pointer
to the WaylandConnection object if the browser is running with
--in-process-gpu flag supplied. Though, when the proxy is renamed,
this will look awkward.

Thus, pass a pointer to the WaylandConnection as a separate
argument, and use it when appropriate.

The surface factory holds pointers to WaylandConnection and
WaylandConnectionProxy now. Even though, it looks strange now,
the proxy is going to be renamed in the follow up patch.

Bug: 947411
Change-Id: If3a1749d662e4e7242d4f3b98938fc0c3535ebdd
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/1617488
Commit-Queue: Maksim Sisov <msisov@igalia.com>
Reviewed-by: Robert Kroeger <rjkroege@chromium.org>
Cr-Commit-Position: refs/heads/master@{#663671}
---
 .../wayland/gpu/wayland_connection_proxy.cc   | 34 +----------------
 .../wayland/gpu/wayland_connection_proxy.h    | 32 ++--------------
 .../wayland/gpu/wayland_surface_factory.cc    | 37 ++++++++++++-------
 .../wayland/gpu/wayland_surface_factory.h     |  6 ++-
 .../wayland/ozone_platform_wayland.cc         |  6 +--
 .../platform/wayland/test/wayland_test.cc     |  6 +--
 6 files changed, 38 insertions(+), 83 deletions(-)

diff --git a/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.cc b/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.cc
index d1402ab6f70a..e29b645ae914 100644
--- a/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.cc
+++ b/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.cc
@@ -10,18 +10,14 @@
 #include "base/process/process.h"
 #include "mojo/public/cpp/bindings/associated_interface_ptr.h"
 #include "mojo/public/cpp/system/platform_handle.h"
-#include "third_party/khronos/EGL/egl.h"
 #include "ui/ozone/common/linux/drm_util_linux.h"
 #include "ui/ozone/platform/wayland/gpu/gbm_surfaceless_wayland.h"
 #include "ui/ozone/platform/wayland/gpu/wayland_surface_factory.h"
-#include "ui/ozone/platform/wayland/host/wayland_connection.h"
 
 namespace ui {
 
-WaylandConnectionProxy::WaylandConnectionProxy(WaylandConnection* connection,
-                                               WaylandSurfaceFactory* factory)
-    : connection_(connection),
-      factory_(factory),
+WaylandConnectionProxy::WaylandConnectionProxy(WaylandSurfaceFactory* factory)
+    : factory_(factory),
       associated_binding_(this),
       gpu_thread_runner_(base::ThreadTaskRunnerHandle::Get()) {}
 
@@ -130,32 +126,6 @@ void WaylandConnectionProxy::DestroyBuffer(gfx::AcceleratedWidget widget,
                                 base::Unretained(this), widget, buffer_id));
 }
 
-WaylandWindow* WaylandConnectionProxy::GetWindow(
-    gfx::AcceleratedWidget widget) const {
-  if (connection_)
-    return connection_->GetWindow(widget);
-  return nullptr;
-}
-
-void WaylandConnectionProxy::ScheduleFlush() {
-  if (connection_)
-    return connection_->ScheduleFlush();
-
-  LOG(FATAL) << "Flush mustn't be called directly on the WaylandConnection, "
-                "when multi-process moe is used";
-}
-
-intptr_t WaylandConnectionProxy::Display() const {
-  if (connection_)
-    return reinterpret_cast<intptr_t>(connection_->display());
-
-#if defined(WAYLAND_GBM)
-  return EGL_DEFAULT_DISPLAY;
-#else
-  return 0;
-#endif
-}
-
 void WaylandConnectionProxy::AddBindingWaylandConnectionClient(
     ozone::mojom::WaylandConnectionClientRequest request) {
   bindings_.AddBinding(this, std::move(request));
diff --git a/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.h b/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.h
index 6fe2aa9ab592..00eca366b4ae 100644
--- a/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.h
+++ b/ui/ozone/platform/wayland/gpu/wayland_connection_proxy.h
@@ -13,9 +13,7 @@
 #include "mojo/public/cpp/bindings/associated_binding.h"
 #include "mojo/public/cpp/bindings/binding_set.h"
 #include "ui/gfx/native_widget_types.h"
-#include "ui/gl/gl_surface.h"
 #include "ui/ozone/platform/wayland/common/wayland_util.h"
-#include "ui/ozone/platform/wayland/host/wayland_connection.h"
 #include "ui/ozone/public/interfaces/wayland/wayland_connection.mojom.h"
 
 #if defined(WAYLAND_GBM)
@@ -33,17 +31,14 @@ class WaylandConnection;
 class WaylandSurfaceFactory;
 class WaylandWindow;
 
-// Provides a proxy connection to a WaylandConnection object on
-// browser process side. When in multi-process mode, this is used to create
-// Wayland dmabufs and ask it to do commits. When in single process mode,
-// this class just forwards calls directly to WaylandConnection.
+// Forwards calls through an associated mojo connection to WaylandBufferManager
+// on the browser process side.
 //
 // It's guaranteed that WaylandConnectionProxy makes mojo calls on the right
 // sequence.
 class WaylandConnectionProxy : public ozone::mojom::WaylandConnectionClient {
  public:
-  WaylandConnectionProxy(WaylandConnection* connection,
-                         WaylandSurfaceFactory* factory);
+  explicit WaylandConnectionProxy(WaylandSurfaceFactory* factory);
   ~WaylandConnectionProxy() override;
 
   // WaylandConnectionProxy overrides:
@@ -107,27 +102,10 @@ class WaylandConnectionProxy : public ozone::mojom::WaylandConnectionClient {
   }
 #endif
 
-  // Methods, which must be used when a single process mode is used (GPU is
-  // hosted in the browser process).
-  //
-  // Return a WaylandWindow based on the |widget|.
-  WaylandWindow* GetWindow(gfx::AcceleratedWidget widget) const;
-  // Schedule flush in the Wayland message loop.
-  void ScheduleFlush();
-
-  // Methods, which can be used with both single- and multi-process modes.
-  //
-  // Returns a pointer to native display. When used in single process mode,
-  // a wl_display pointer is returned. For the the mode, when there are GPU
-  // and browser processes, EGL_DEFAULT_DISPLAY is returned.
-  intptr_t Display() const;
-
   // Adds a WaylandConnectionClient binding.
   void AddBindingWaylandConnectionClient(
       ozone::mojom::WaylandConnectionClientRequest request);
 
-  WaylandConnection* connection() const { return connection_; }
-
  private:
   void CreateDmabufBasedBufferInternal(gfx::AcceleratedWidget widget,
                                        base::ScopedFD dmabuf_fd,
@@ -150,10 +128,6 @@ class WaylandConnectionProxy : public ozone::mojom::WaylandConnectionClient {
 
   void BindHostInterface();
 
-  // Non-owned pointer to a WaylandConnection. It is only used in a single
-  // process mode, when a shared dmabuf approach is not used.
-  WaylandConnection* const connection_;
-
   // Non-owned. Only used to get registered surfaces and notify them about
   // submission and presentation of buffers.
   WaylandSurfaceFactory* const factory_;
diff --git a/ui/ozone/platform/wayland/gpu/wayland_surface_factory.cc b/ui/ozone/platform/wayland/gpu/wayland_surface_factory.cc
index 0e48b63b0317..05937daaa709 100644
--- a/ui/ozone/platform/wayland/gpu/wayland_surface_factory.cc
+++ b/ui/ozone/platform/wayland/gpu/wayland_surface_factory.cc
@@ -14,6 +14,7 @@
 #include "ui/ozone/platform/wayland/gpu/gl_surface_wayland.h"
 #include "ui/ozone/platform/wayland/gpu/wayland_canvas_surface.h"
 #include "ui/ozone/platform/wayland/gpu/wayland_connection_proxy.h"
+#include "ui/ozone/platform/wayland/host/wayland_connection.h"
 #include "ui/ozone/platform/wayland/host/wayland_window.h"
 
 #if defined(WAYLAND_GBM)
@@ -28,9 +29,12 @@ namespace {
 
 class GLOzoneEGLWayland : public GLOzoneEGL {
  public:
-  GLOzoneEGLWayland(WaylandConnectionProxy* connection,
+  GLOzoneEGLWayland(WaylandConnection* connection,
+                    WaylandConnectionProxy* connection_proxy,
                     WaylandSurfaceFactory* factory)
-      : connection_(connection), factory_(factory) {}
+      : connection_(connection),
+        connection_proxy_(connection_proxy),
+        factory_(factory) {}
   ~GLOzoneEGLWayland() override {}
 
   scoped_refptr<gl::GLSurface> CreateViewGLSurface(
@@ -47,7 +51,8 @@ class GLOzoneEGLWayland : public GLOzoneEGL {
   bool LoadGLES2Bindings(gl::GLImplementation impl) override;
 
  private:
-  WaylandConnectionProxy* const connection_;
+  WaylandConnection* const connection_;
+  WaylandConnectionProxy* const connection_proxy_;
   WaylandSurfaceFactory* const factory_;
 
   DISALLOW_COPY_AND_ASSIGN(GLOzoneEGLWayland);
@@ -56,10 +61,10 @@ class GLOzoneEGLWayland : public GLOzoneEGL {
 scoped_refptr<gl::GLSurface> GLOzoneEGLWayland::CreateViewGLSurface(
     gfx::AcceleratedWidget widget) {
   // Only EGLGLES2 is supported with surfaceless view gl.
-  if (gl::GetGLImplementation() != gl::kGLImplementationEGLGLES2)
+  if ((gl::GetGLImplementation() != gl::kGLImplementationEGLGLES2) ||
+      !connection_)
     return nullptr;
 
-  DCHECK(connection_);
   WaylandWindow* window = connection_->GetWindow(widget);
   if (!window)
     return nullptr;
@@ -82,10 +87,10 @@ scoped_refptr<gl::GLSurface> GLOzoneEGLWayland::CreateSurfacelessViewGLSurface(
 
 #if defined(WAYLAND_GBM)
   // If there is a gbm device available, use surfaceless gl surface.
-  if (!connection_->gbm_device())
+  if (!connection_proxy_->gbm_device())
     return nullptr;
   return gl::InitializeGLSurface(
-      new GbmSurfacelessWayland(factory_, connection_, window));
+      new GbmSurfacelessWayland(factory_, connection_proxy_, window));
 #else
   return nullptr;
 #endif
@@ -102,7 +107,9 @@ scoped_refptr<gl::GLSurface> GLOzoneEGLWayland::CreateOffscreenGLSurface(
 }
 
 intptr_t GLOzoneEGLWayland::GetNativeDisplay() {
-  return connection_->Display();
+  if (connection_)
+    return reinterpret_cast<intptr_t>(connection_->display());
+  return EGL_DEFAULT_DISPLAY;
 }
 
 bool GLOzoneEGLWayland::LoadGLES2Bindings(gl::GLImplementation impl) {
@@ -114,15 +121,17 @@ bool GLOzoneEGLWayland::LoadGLES2Bindings(gl::GLImplementation impl) {
 
 }  // namespace
 
-WaylandSurfaceFactory::WaylandSurfaceFactory() = default;
+WaylandSurfaceFactory::WaylandSurfaceFactory(WaylandConnection* connection)
+    : connection_(connection) {}
 
 WaylandSurfaceFactory::~WaylandSurfaceFactory() = default;
 
 void WaylandSurfaceFactory::SetProxy(WaylandConnectionProxy* proxy) {
-  DCHECK(!connection_ && proxy);
-  connection_ = proxy;
+  DCHECK(!connection_proxy_ && proxy);
+  connection_proxy_ = proxy;
 
-  egl_implementation_ = std::make_unique<GLOzoneEGLWayland>(connection_, this);
+  egl_implementation_ =
+      std::make_unique<GLOzoneEGLWayland>(connection_, connection_proxy_, this);
 }
 
 void WaylandSurfaceFactory::RegisterSurface(gfx::AcceleratedWidget widget,
@@ -146,7 +155,7 @@ GbmSurfacelessWayland* WaylandSurfaceFactory::GetSurface(
 
 std::unique_ptr<SurfaceOzoneCanvas>
 WaylandSurfaceFactory::CreateCanvasForWidget(gfx::AcceleratedWidget widget) {
-  return std::make_unique<WaylandCanvasSurface>(connection_, widget);
+  return std::make_unique<WaylandCanvasSurface>(connection_proxy_, widget);
 }
 
 std::vector<gl::GLImplementation>
@@ -177,7 +186,7 @@ scoped_refptr<gfx::NativePixmap> WaylandSurfaceFactory::CreateNativePixmap(
     gfx::BufferUsage usage) {
 #if defined(WAYLAND_GBM)
   scoped_refptr<GbmPixmapWayland> pixmap =
-      base::MakeRefCounted<GbmPixmapWayland>(this, connection_, widget);
+      base::MakeRefCounted<GbmPixmapWayland>(this, connection_proxy_, widget);
   if (!pixmap->InitializeBuffer(size, format, usage))
     return nullptr;
   return pixmap;
diff --git a/ui/ozone/platform/wayland/gpu/wayland_surface_factory.h b/ui/ozone/platform/wayland/gpu/wayland_surface_factory.h
index e2730d64199c..2b01c617c755 100644
--- a/ui/ozone/platform/wayland/gpu/wayland_surface_factory.h
+++ b/ui/ozone/platform/wayland/gpu/wayland_surface_factory.h
@@ -18,11 +18,12 @@
 namespace ui {
 
 class GbmSurfacelessWayland;
+class WaylandConnection;
 class WaylandConnectionProxy;
 
 class WaylandSurfaceFactory : public SurfaceFactoryOzone {
  public:
-  WaylandSurfaceFactory();
+  explicit WaylandSurfaceFactory(WaylandConnection* connection);
   ~WaylandSurfaceFactory() override;
 
   void SetProxy(WaylandConnectionProxy* proxy);
@@ -50,7 +51,8 @@ class WaylandSurfaceFactory : public SurfaceFactoryOzone {
       gfx::NativePixmapHandle handle) override;
 
  private:
-  WaylandConnectionProxy* connection_ = nullptr;
+  WaylandConnection* const connection_;
+  WaylandConnectionProxy* connection_proxy_ = nullptr;
   std::unique_ptr<GLOzone> egl_implementation_;
 
   std::map<gfx::AcceleratedWidget, GbmSurfacelessWayland*>
diff --git a/ui/ozone/platform/wayland/ozone_platform_wayland.cc b/ui/ozone/platform/wayland/ozone_platform_wayland.cc
index d4f26d8bac4c..a4d262ab6194 100644
--- a/ui/ozone/platform/wayland/ozone_platform_wayland.cc
+++ b/ui/ozone/platform/wayland/ozone_platform_wayland.cc
@@ -167,9 +167,9 @@ class OzonePlatformWayland : public OzonePlatform {
   }
 
   void InitializeGPU(const InitParams& args) override {
-    surface_factory_ = std::make_unique<WaylandSurfaceFactory>();
-    proxy_ = std::make_unique<WaylandConnectionProxy>(connection_.get(),
-                                                      surface_factory_.get());
+    surface_factory_ =
+        std::make_unique<WaylandSurfaceFactory>(connection_.get());
+    proxy_ = std::make_unique<WaylandConnectionProxy>(surface_factory_.get());
     surface_factory_->SetProxy(proxy_.get());
 #if defined(WAYLAND_GBM)
     const base::FilePath drm_node_path = path_finder_.GetDrmRenderNodePath();
diff --git a/ui/ozone/platform/wayland/test/wayland_test.cc b/ui/ozone/platform/wayland/test/wayland_test.cc
index 29b7af9b64aa..66726ead82d7 100644
--- a/ui/ozone/platform/wayland/test/wayland_test.cc
+++ b/ui/ozone/platform/wayland/test/wayland_test.cc
@@ -32,9 +32,9 @@ WaylandTest::WaylandTest()
       std::make_unique<StubKeyboardLayoutEngine>());
 #endif
   connection_ = std::make_unique<WaylandConnection>();
-  surface_factory_ = std::make_unique<WaylandSurfaceFactory>();
-  connection_proxy_ = std::make_unique<WaylandConnectionProxy>(
-      connection_.get(), surface_factory_.get());
+  surface_factory_ = std::make_unique<WaylandSurfaceFactory>(connection_.get());
+  connection_proxy_ =
+      std::make_unique<WaylandConnectionProxy>(surface_factory_.get());
   surface_factory_->SetProxy(connection_proxy_.get());
   window_ = std::make_unique<WaylandWindow>(&delegate_, connection_.get());
 }
-- 
2.20.1

