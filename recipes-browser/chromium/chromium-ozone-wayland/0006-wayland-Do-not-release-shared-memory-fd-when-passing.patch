Upstream-Status: Backport

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From 1d2e6cc13c8a0b37ba8e86200b3ecdcddee796af Mon Sep 17 00:00:00 2001
From: Alex Ilin <alexilin@chromium.org>
Date: Tue, 7 May 2019 10:02:57 +0000
Subject: [PATCH 06/23] wayland: Do not release shared memory fd when passing
 to wl_*

wl_keyboard_send_keymap() and wl_shm_create_pool() do not close a file
descriptor passed as a parameter.

Caller's code incorrectly assumed that the fd will be eventually closed
inside wl_*() and released the ownership. This results in a system
resource leak.

This CL fixes the leak by closing a file descriptor after passing to
wl_keyboard_send_keymap() and wl_shm_create_pool().

Bug: 947464
Change-Id: I07a75f7727d80ce1996e0a5e5f020ba5aad2d262
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/1588576
Reviewed-by: Michael Spang <spang@chromium.org>
Reviewed-by: Maksim Sisov <msisov@igalia.com>
Reviewed-by: Daniele Castagna <dcastagna@chromium.org>
Commit-Queue: Alex Ilin <alexilin@chromium.org>
Cr-Commit-Position: refs/heads/master@{#657184}
---
 components/exo/wayland/clients/client_base.cc               | 4 +---
 components/exo/wayland/wayland_keyboard_delegate.cc         | 6 +++---
 ui/ozone/platform/wayland/host/wayland_keyboard_unittest.cc | 2 +-
 ui/ozone/platform/wayland/host/wayland_shm_buffer.cc        | 3 +--
 4 files changed, 6 insertions(+), 9 deletions(-)

diff --git a/components/exo/wayland/clients/client_base.cc b/components/exo/wayland/clients/client_base.cc
index 64bb682803de..d5b2b4f3c8ba 100644
--- a/components/exo/wayland/clients/client_base.cc
+++ b/components/exo/wayland/clients/client_base.cc
@@ -751,10 +751,8 @@ std::unique_ptr<ClientBase::Buffer> ClientBase::CreateBuffer(
         base::UnsafeSharedMemoryRegion::TakeHandleForSerialization(
             std::move(shared_memory_region));
 
-    // wl_shm_create_pool takes ownership of the file descriptor being passed.
     buffer->shm_pool.reset(wl_shm_create_pool(
-        globals_.shm.get(),
-        platform_shared_memory.PassPlatformHandle().fd.release(),
+        globals_.shm.get(), platform_shared_memory.GetPlatformHandle().fd,
         buffer->shared_memory_mapping.size()));
 
     buffer->buffer.reset(static_cast<wl_buffer*>(
diff --git a/components/exo/wayland/wayland_keyboard_delegate.cc b/components/exo/wayland/wayland_keyboard_delegate.cc
index 659786ccf350..1023f8086a0f 100644
--- a/components/exo/wayland/wayland_keyboard_delegate.cc
+++ b/components/exo/wayland/wayland_keyboard_delegate.cc
@@ -187,9 +187,9 @@ void WaylandKeyboardDelegate::SendLayout(const xkb_rule_names* names) {
   DCHECK(shared_keymap.IsValid());
 
   memcpy(shared_keymap.memory(), keymap_string.get(), keymap_size);
-  wl_keyboard_send_keymap(
-      keyboard_resource_, WL_KEYBOARD_KEYMAP_FORMAT_XKB_V1,
-      platform_shared_keymap.PassPlatformHandle().fd.release(), keymap_size);
+  wl_keyboard_send_keymap(keyboard_resource_, WL_KEYBOARD_KEYMAP_FORMAT_XKB_V1,
+                          platform_shared_keymap.GetPlatformHandle().fd,
+                          keymap_size);
   wl_client_flush(client());
 }
 
diff --git a/ui/ozone/platform/wayland/host/wayland_keyboard_unittest.cc b/ui/ozone/platform/wayland/host/wayland_keyboard_unittest.cc
index 2ca1faaacd52..8217cd9c42d1 100644
--- a/ui/ozone/platform/wayland/host/wayland_keyboard_unittest.cc
+++ b/ui/ozone/platform/wayland/host/wayland_keyboard_unittest.cc
@@ -68,7 +68,7 @@ class WaylandKeyboardTest : public WaylandTest {
     memcpy(shared_keymap.memory(), keymap_string.get(), keymap_size);
     wl_keyboard_send_keymap(
         keyboard_->resource(), WL_KEYBOARD_KEYMAP_FORMAT_XKB_V1,
-        platform_shared_keymap.PassPlatformHandle().fd.release(), keymap_size);
+        platform_shared_keymap.GetPlatformHandle().fd, keymap_size);
 #endif
   }
 
diff --git a/ui/ozone/platform/wayland/host/wayland_shm_buffer.cc b/ui/ozone/platform/wayland/host/wayland_shm_buffer.cc
index 839fd07fc5eb..9a17e35c37e8 100644
--- a/ui/ozone/platform/wayland/host/wayland_shm_buffer.cc
+++ b/ui/ozone/platform/wayland/host/wayland_shm_buffer.cc
@@ -49,8 +49,7 @@ void WaylandShmBuffer::Initialize(wl_shm* shm) {
           std::move(shared_memory_region));
 
   wl::Object<wl_shm_pool> pool(wl_shm_create_pool(
-      shm, platform_shared_memory.PassPlatformHandle().fd.release(),
-      buffer_size));
+      shm, platform_shared_memory.GetPlatformHandle().fd, buffer_size));
 
   auto* new_buffer = wl_shm_pool_create_buffer(
       pool.get(), 0, size_.width(), size_.height(), stride, kShmFormat);
-- 
2.20.1

