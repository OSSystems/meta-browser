Upstream-status: Inappropriate

This reverts gn's new feature:
* The revert is needed to make gn work again with stable chromium
  release. There has been quite a few changes to gn and as long as gn
  tarball is taken from master snapshot, the chromium sources and gn
  sources are out of sync, and the chromium codebase requires additional
  patches to make this gn feature work.

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From 8730b0feb6b991fa47368566501ab9ccfb453c92 Mon Sep 17 00:00:00 2001
From: Tom Anderson <thomasanderson@chromium.org>
Date: Thu, 16 May 2019 11:00:40 -0700
Subject: [PATCH] Revert: Disallow non-buildable sources in binary targets

this revert is needed to make gn work again with stable chromium
release. there has been quite a few changes to gn and as long as gn
tarball is taken from master snapshot, the chromium sources and gn
sources are out of sync, and the chromium codebase requires additional
patches to make this gn feature work.

>>When adding a file that's not a source, header, or object file to a source_set,
>>loadable_module, shared_library, executable, or static_library, gn will now
>>generate an error like the following:
>>
>>ERROR at //third_party/protobuf/proto_library.gni:369:15: Only source, header,
>>and object files belong in the sources of a
>>source_set. //out/Test/pyproto/google_apis/gcm/protocol/mcs_pb2.py is not one of
>>the valid types.
>>    sources = get_target_outputs(":$action_name")
>>              ^---------------------------------
>>See //google_apis/gcm/BUILD.gn:78:1: whence it was called.
>>proto_library("proto") {
>>^-----------------------
>>See //BUILD.gn:89:7: which caused the file to be included.
>>      "//google_apis/gcm:gcm_unit_tests",
>>      ^---------------------------------
>>
>>BUG=77
>>R=brettw
>>
>>Change-Id: I4ed8da10c48e3e5d74f79e51d8222c998a7b883a
>>Reviewed-on: https://gn-review.googlesource.com/c/gn/+/4980
>>Commit-Queue: Brett Wilson <brettw@google.com>
>>Reviewed-by: Brett Wilson <brettw@google.com>
---
 tools/gn/binary_target_generator.cc | 32 +++++++++++++++++++++++++++++
 tools/gn/binary_target_generator.h  |  1 +
 tools/gn/source_dir.cc              |  6 +++---
 tools/gn/source_file.cc             | 12 ++++++++---
 tools/gn/source_file.h              |  7 ++++++-
 tools/gn/target_generator.h         |  2 +-
 6 files changed, 52 insertions(+), 8 deletions(-)

diff --git b/tools/gn/binary_target_generator.cc a/tools/gn/binary_target_generator.cc
index 6d8cec92..60af2423 100644
--- b/tools/gn/tools/gn/binary_target_generator.cc
+++ a/tools/gn/tools/gn/binary_target_generator.cc
@@ -68,38 +68,6 @@ void BinaryTargetGenerator::DoRun() {
     return;
 }

-bool BinaryTargetGenerator::FillSources() {
-  bool ret = TargetGenerator::FillSources();
-  for (std::size_t i = 0; i < target_->sources().size(); ++i) {
-    const auto& source = target_->sources()[i];
-    switch (source.type()) {
-      case SourceFile::SOURCE_CPP:
-      case SourceFile::SOURCE_H:
-      case SourceFile::SOURCE_C:
-      case SourceFile::SOURCE_M:
-      case SourceFile::SOURCE_MM:
-      case SourceFile::SOURCE_S:
-      case SourceFile::SOURCE_ASM:
-      case SourceFile::SOURCE_O:
-        // These are allowed.
-        break;
-      case SourceFile::SOURCE_RC:
-      case SourceFile::SOURCE_DEF:
-      case SourceFile::SOURCE_RS:
-      case SourceFile::SOURCE_GO:
-      case SourceFile::SOURCE_UNKNOWN:
-      case SourceFile::SOURCE_NUMTYPES:
-        *err_ =
-            Err(scope_->GetValue(variables::kSources, true)->list_value()[i],
-                std::string("Only source, header, and object files belong in "
-                            "the sources of a ") +
-                    Target::GetStringForOutputType(target_->output_type()) +
-                    ". " + source.value() + " is not one of the valid types.");
-    }
-  }
-  return ret;
-}
-
 bool BinaryTargetGenerator::FillCompleteStaticLib() {
   if (target_->output_type() == Target::STATIC_LIBRARY) {
     const Value* value = scope_->GetValue(variables::kCompleteStaticLib, true);
diff --git b/tools/gn/binary_target_generator.h a/tools/gn/binary_target_generator.h
index 6cbd11ea..40fc3141 100644
--- b/tools/gn/tools/gn/binary_target_generator.h
+++ a/tools/gn/tools/gn/binary_target_generator.h
@@ -22,7 +22,6 @@ class BinaryTargetGenerator : public TargetGenerator {

  protected:
   void DoRun() override;
-  bool FillSources() override;

  private:
   bool FillCompleteStaticLib();
diff --git b/tools/gn/source_dir.cc a/tools/gn/source_dir.cc
index 50b45175..0fd5c75a 100644
--- b/tools/gn/tools/gn/source_dir.cc
+++ a/tools/gn/tools/gn/source_dir.cc
@@ -98,10 +98,10 @@ SourceFile SourceDir::ResolveRelativeFile(
     return ret;

   const std::string& input_string = p.string_value();
-  if (!ValidateResolveInput<std::string>(true, p, input_string, err))
+  if (!ValidateResolveInput<std::string>(true, p, input_string, err)) {
     return ret;
-
-  ret.SetValue(ResolveRelative(input_string, value_, true, source_root));
+  }
+  ret.value_ = ResolveRelative(input_string, value_, true, source_root);
   return ret;
 }

diff --git b/tools/gn/source_file.cc a/tools/gn/source_file.cc
index 29232274..7c860d43 100644
--- b/tools/gn/tools/gn/source_file.cc
+++ a/tools/gn/tools/gn/source_file.cc
@@ -55,19 +55,18 @@ SourceFile::Type GetSourceFileType(const std::string& file) {
 SourceFile::SourceFile() : type_(SOURCE_UNKNOWN) {}

 SourceFile::SourceFile(const base::StringPiece& p)
-    : value_(p.data(), p.size()) {
+    : value_(p.data(), p.size()), type_(GetSourceFileType(value_)) {
   DCHECK(!value_.empty());
   AssertValueSourceFileString(value_);
   NormalizePath(&value_);
-  type_ = GetSourceFileType(value_);
 }

-SourceFile::SourceFile(SwapIn, std::string* value) {
+SourceFile::SourceFile(SwapIn, std::string* value)
+    : type_(GetSourceFileType(*value)) {
   value_.swap(*value);
   DCHECK(!value_.empty());
   AssertValueSourceFileString(value_);
   NormalizePath(&value_);
-  type_ = GetSourceFileType(value_);
 }

 SourceFile::~SourceFile() = default;
@@ -93,8 +92,3 @@ SourceDir SourceFile::GetDir() const {
 base::FilePath SourceFile::Resolve(const base::FilePath& source_root) const {
   return ResolvePath(value_, true, source_root);
 }
-
-void SourceFile::SetValue(const std::string& value) {
-  value_ = value;
-  type_ = GetSourceFileType(value_);
-}
diff --git b/tools/gn/source_file.h a/tools/gn/source_file.h
index d42063d6..bcf5f422 100644
--- b/tools/gn/tools/gn/source_file.h
+++ a/tools/gn/tools/gn/source_file.h
@@ -97,16 +97,11 @@ class SourceFile {
     return value_ < other.value_;
   }

-  void swap(SourceFile& other) {
-    value_.swap(other.value_);
-    std::swap(type_, other.type_);
-  }
+  void swap(SourceFile& other) { value_.swap(other.value_); }

  private:
   friend class SourceDir;

-  void SetValue(const std::string& value);
-
   std::string value_;
   Type type_;

diff --git b/tools/gn/target_generator.h a/tools/gn/target_generator.h
index 8795cbf9..627505da 100644
--- b/tools/gn/tools/gn/target_generator.h
+++ a/tools/gn/tools/gn/target_generator.h
@@ -47,7 +47,7 @@ class TargetGenerator {

   const BuildSettings* GetBuildSettings() const;

-  virtual bool FillSources();
+  bool FillSources();
   bool FillPublic();
   bool FillConfigs();
   bool FillOutputs(bool allow_substitutions);
-- 
2.21.0
