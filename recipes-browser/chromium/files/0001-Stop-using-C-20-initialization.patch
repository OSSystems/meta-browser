Upstream-Status: Backport

* Backported from https://crrev.com/c/1478159

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From 3a50cf7ac564d4ff177266379463bf5176f75b57 Mon Sep 17 00:00:00 2001
From: Allan Sandfeld Jensen <allan.jensen@qt.io>
Date: Fri, 8 Mar 2019 19:35:45 +0000
Subject: [PATCH] Stop using C++20 initialization
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Named initialization is proposed for C++20 and we are supposed to be using
only C++14. It just happens to also be an old GCC extension also implemented
by clang.

Change-Id: I1a2f15a90bb4975aacb37812ed711ecb8481ac96
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/1478159
Commit-Queue: Nico Weber <thakis@chromium.org>
Reviewed-by: Nico Weber <thakis@chromium.org>
Reviewed-by: Sami Kyöstilä <skyostil@chromium.org>
Cr-Commit-Position: refs/heads/master@{#639116}
---
 base/message_loop/message_loop.cc             |  3 +--
 .../sequence_manager_impl_unittest.cc         | 19 +++++++++----------
 .../test/sequence_manager_for_test.h          |  3 ++-
 .../scheduler/common/web_thread_scheduler.cc  |  3 ++-
 .../scheduler/worker/compositor_thread.cc     |  3 ++-
 .../worker/non_main_thread_scheduler_impl.cc  |  3 ++-
 .../worker/worker_scheduler_proxy_unittest.cc |  3 ++-
 7 files changed, 20 insertions(+), 17 deletions(-)

diff --git a/base/message_loop/message_loop.cc b/base/message_loop/message_loop.cc
index fff922d36819..ae58f829393d 100644
--- a/base/message_loop/message_loop.cc
+++ b/base/message_loop/message_loop.cc
@@ -176,8 +176,7 @@ std::unique_ptr<MessageLoop> MessageLoop::CreateUnbound(
 
 MessageLoop::MessageLoop(Type type, std::unique_ptr<MessagePump> custom_pump)
     : backend_(sequence_manager::internal::SequenceManagerImpl::CreateUnbound(
-          sequence_manager::SequenceManager::Settings{.message_loop_type =
-                                                          type})),
+          sequence_manager::SequenceManager::Settings{type})),
       default_task_queue_(CreateDefaultTaskQueue()),
       type_(type),
       custom_pump_(std::move(custom_pump)) {
diff --git a/base/task/sequence_manager/sequence_manager_impl_unittest.cc b/base/task/sequence_manager/sequence_manager_impl_unittest.cc
index 6975f0caa8b9..0397763453c6 100644
--- a/base/task/sequence_manager/sequence_manager_impl_unittest.cc
+++ b/base/task/sequence_manager/sequence_manager_impl_unittest.cc
@@ -149,8 +149,8 @@ class FixtureWithMockTaskRunner final : public Fixture {
             nullptr,
             ThreadTaskRunnerHandle::Get(),
             mock_tick_clock(),
-            SequenceManager::Settings{.randomised_sampling_enabled = false,
-                                      .clock = mock_tick_clock()})) {
+            SequenceManager::Settings{MessageLoop::Type::TYPE_DEFAULT, false,
+                                      mock_tick_clock()})) {
     // A null clock triggers some assertions.
     AdvanceMockTickClock(TimeDelta::FromMilliseconds(1));
 
@@ -220,8 +220,8 @@ class FixtureWithMockMessagePump : public Fixture {
     sequence_manager_ = SequenceManagerForTest::Create(
         std::make_unique<ThreadControllerWithMessagePumpImpl>(
             std::move(pump), mock_tick_clock()),
-        SequenceManager::Settings{.randomised_sampling_enabled = false,
-                                  .clock = mock_tick_clock()});
+        SequenceManager::Settings{MessageLoop::Type::TYPE_DEFAULT, false,
+                                  mock_tick_clock()});
     sequence_manager_->SetDefaultTaskRunner(MakeRefCounted<NullTaskRunner>());
 
     // The SequenceManager constructor calls Now() once for setting up
@@ -302,8 +302,8 @@ class FixtureWithMessageLoop : public Fixture {
     sequence_manager_ = SequenceManagerForTest::Create(
         message_loop_->GetMessageLoopBase(), ThreadTaskRunnerHandle::Get(),
         mock_tick_clock(),
-        SequenceManager::Settings{.randomised_sampling_enabled = false,
-                                  .clock = mock_tick_clock()});
+        SequenceManager::Settings{MessageLoop::Type::TYPE_DEFAULT, false,
+                                  mock_tick_clock()});
 
     // The SequenceManager constructor calls Now() once for setting up
     // housekeeping. The MessageLoop also contains a SequenceManager so two
@@ -3748,10 +3748,9 @@ TEST(SequenceManagerBasicTest, DefaultTaskRunnerSupport) {
       MakeRefCounted<TestSimpleTaskRunner>();
   {
     std::unique_ptr<SequenceManagerForTest> manager =
-        SequenceManagerForTest::Create(
-            message_loop.GetMessageLoopBase(), message_loop.task_runner(),
-            nullptr,
-            SequenceManager::Settings{.randomised_sampling_enabled = false});
+        SequenceManagerForTest::Create(message_loop.GetMessageLoopBase(),
+                                       message_loop.task_runner(), nullptr,
+                                       SequenceManager::Settings());
     manager->SetDefaultTaskRunner(custom_task_runner);
     DCHECK_EQ(custom_task_runner, message_loop.task_runner());
   }
diff --git a/base/task/sequence_manager/test/sequence_manager_for_test.h b/base/task/sequence_manager/test/sequence_manager_for_test.h
index 0b6afe4d1016..82a6297b7fdb 100644
--- a/base/task/sequence_manager/test/sequence_manager_for_test.h
+++ b/base/task/sequence_manager/test/sequence_manager_for_test.h
@@ -35,7 +35,8 @@ class SequenceManagerForTest : public internal::SequenceManagerImpl {
   static std::unique_ptr<SequenceManagerForTest> Create(
       std::unique_ptr<internal::ThreadController> thread_controller,
       SequenceManager::Settings settings = SequenceManager::Settings{
-          .randomised_sampling_enabled = true});
+          base::MessageLoop::TYPE_DEFAULT,
+          /*randomised_sampling_enabled=*/true});
 
   size_t ActiveQueuesCount() const;
   bool HasImmediateWork() const;
diff --git a/third_party/blink/renderer/platform/scheduler/common/web_thread_scheduler.cc b/third_party/blink/renderer/platform/scheduler/common/web_thread_scheduler.cc
index 00850c82c37f..1646b092c9fd 100644
--- a/third_party/blink/renderer/platform/scheduler/common/web_thread_scheduler.cc
+++ b/third_party/blink/renderer/platform/scheduler/common/web_thread_scheduler.cc
@@ -21,7 +21,8 @@ WebThreadScheduler::CreateMainThreadScheduler(
     std::unique_ptr<base::MessagePump> message_pump,
     base::Optional<base::Time> initial_virtual_time) {
   auto settings = base::sequence_manager::SequenceManager::Settings{
-      .randomised_sampling_enabled = true};
+      base::MessageLoop::TYPE_DEFAULT,
+      /*randomised_sampling_enabled=*/true};
   auto sequence_manager =
       message_pump
           ? base::sequence_manager::
diff --git a/third_party/blink/renderer/platform/scheduler/worker/compositor_thread.cc b/third_party/blink/renderer/platform/scheduler/worker/compositor_thread.cc
index 32d5f4f80da9..71724a36276c 100644
--- a/third_party/blink/renderer/platform/scheduler/worker/compositor_thread.cc
+++ b/third_party/blink/renderer/platform/scheduler/worker/compositor_thread.cc
@@ -20,7 +20,8 @@ CompositorThread::CreateNonMainThreadScheduler() {
   return std::make_unique<CompositorThreadScheduler>(
       base::sequence_manager::CreateSequenceManagerOnCurrentThread(
           base::sequence_manager::SequenceManager::Settings{
-              .randomised_sampling_enabled = true}));
+              base::MessageLoop::TYPE_DEFAULT,
+              /*randomised_sampling_enabled=*/true}));
 }
 
 }  // namespace scheduler
diff --git a/third_party/blink/renderer/platform/scheduler/worker/non_main_thread_scheduler_impl.cc b/third_party/blink/renderer/platform/scheduler/worker/non_main_thread_scheduler_impl.cc
index 4c456039b93c..def26167a3f2 100644
--- a/third_party/blink/renderer/platform/scheduler/worker/non_main_thread_scheduler_impl.cc
+++ b/third_party/blink/renderer/platform/scheduler/worker/non_main_thread_scheduler_impl.cc
@@ -28,7 +28,8 @@ std::unique_ptr<NonMainThreadSchedulerImpl> NonMainThreadSchedulerImpl::Create(
       thread_type,
       base::sequence_manager::CreateSequenceManagerOnCurrentThread(
           base::sequence_manager::SequenceManager::Settings{
-              .randomised_sampling_enabled = true}),
+              base::MessageLoop::TYPE_DEFAULT,
+              /*randomised_sampling_enabled=*/true}),
       proxy);
 }
 
diff --git a/third_party/blink/renderer/platform/scheduler/worker/worker_scheduler_proxy_unittest.cc b/third_party/blink/renderer/platform/scheduler/worker/worker_scheduler_proxy_unittest.cc
index 11463adc7fe6..88de56fd72eb 100644
--- a/third_party/blink/renderer/platform/scheduler/worker/worker_scheduler_proxy_unittest.cc
+++ b/third_party/blink/renderer/platform/scheduler/worker/worker_scheduler_proxy_unittest.cc
@@ -79,7 +79,8 @@ class WorkerThreadForTest : public WorkerThread {
     auto scheduler = std::make_unique<WorkerThreadSchedulerForTest>(
         base::sequence_manager::CreateSequenceManagerOnCurrentThread(
             base::sequence_manager::SequenceManager::Settings{
-                .randomised_sampling_enabled = true}),
+                base::MessageLoop::TYPE_DEFAULT,
+                /*randomised_sampling_enabled=*/true}),
         worker_scheduler_proxy(), throtting_state_changed_);
     scheduler_ = scheduler.get();
     worker_scheduler_ = std::make_unique<scheduler::WorkerScheduler>(
-- 
2.20.1

