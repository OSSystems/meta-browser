Upstream-Status: Backport

https://crrev.com/c/2214556

Signed-off-by: Maksim Sisov <msisov@igalia.com>
---
From 85c6c0b5466637fb31635d574893ee95d79b5f92 Mon Sep 17 00:00:00 2001
From: Stephan Hartmann <stha09@googlemail.com>
Date: Mon, 1 Jun 2020 21:56:38 +0000
Subject: [PATCH] libstdc++: std::vector must have non-const value_type

Bug: 957519
Change-Id: I535b3bcf318f98cecbf4be1520ffe4126abcacd8
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/2214556
Commit-Queue: Karan Bhatia <karandeepb@chromium.org>
Reviewed-by: Karan Bhatia <karandeepb@chromium.org>
Cr-Commit-Position: refs/heads/master@{#773855}
---
 extensions/common/features/feature_flags.cc           | 6 +++---
 extensions/common/features/feature_flags.h            | 4 ++--
 extensions/common/features/simple_feature_unittest.cc | 2 +-
 3 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/extensions/common/features/feature_flags.cc b/extensions/common/features/feature_flags.cc
index 5b63764e4c19..7efa308dbecd 100644
--- a/extensions/common/features/feature_flags.cc
+++ b/extensions/common/features/feature_flags.cc
@@ -19,7 +19,7 @@ namespace {
 constexpr base::Feature kFeatureFlags[] = {
     {"DeclarativeNetRequest", base::FEATURE_ENABLED_BY_DEFAULT}};
 
-const std::vector<const base::Feature>* g_feature_flags_test_override = nullptr;
+const std::vector<base::Feature>* g_feature_flags_test_override = nullptr;
 
 template <typename T>
 const base::Feature* GetFeature(T begin,
@@ -52,8 +52,8 @@ bool IsFeatureFlagEnabled(const std::string& feature_flag) {
 }
 
 ScopedFeatureFlagsOverride CreateScopedFeatureFlagsOverrideForTesting(
-    const std::vector<const base::Feature>* features) {
-  return base::AutoReset<const std::vector<const base::Feature>*>(
+    const std::vector<base::Feature>* features) {
+  return base::AutoReset<const std::vector<base::Feature>*>(
       &g_feature_flags_test_override, features);
 }
 
diff --git a/extensions/common/features/feature_flags.h b/extensions/common/features/feature_flags.h
index d1a5dd3720b3..b57740b25cf6 100644
--- a/extensions/common/features/feature_flags.h
+++ b/extensions/common/features/feature_flags.h
@@ -25,9 +25,9 @@ bool IsFeatureFlagEnabled(const std::string& feature_flag);
 // in scope. Clients must ensure that |features| remains alive (non-dangling)
 // while the returned value is in scope.
 using ScopedFeatureFlagsOverride =
-    base::AutoReset<const std::vector<const base::Feature>*>;
+    base::AutoReset<const std::vector<base::Feature>*>;
 ScopedFeatureFlagsOverride CreateScopedFeatureFlagsOverrideForTesting(
-    const std::vector<const base::Feature>* features);
+    const std::vector<base::Feature>* features);
 
 }  // namespace extensions
 
diff --git a/extensions/common/features/simple_feature_unittest.cc b/extensions/common/features/simple_feature_unittest.cc
index 8d9e0ad31534..659d4ef7c90a 100644
--- a/extensions/common/features/simple_feature_unittest.cc
+++ b/extensions/common/features/simple_feature_unittest.cc
@@ -718,7 +718,7 @@ TEST_F(SimpleFeatureTest, CommandLineSwitch) {
 }
 
 TEST_F(SimpleFeatureTest, FeatureFlags) {
-  const std::vector<const base::Feature> features(
+  const std::vector<base::Feature> features(
       {{"stub_feature_1", base::FEATURE_ENABLED_BY_DEFAULT},
        {"stub_feature_2", base::FEATURE_DISABLED_BY_DEFAULT}});
   auto scoped_feature_override =
-- 
2.25.1

